<!DOCTYPE html>
<html dir="ltr" lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Tidy Documentation</title>
	<meta name="keywords" content="tidy, html tidy, html, htacg">
	<meta name="description" content="HTML Tidy Homepage">
  <link rel="stylesheet" href="https://www.html-tidy.org/assets/stylesheets/base.css">
    <link rel="stylesheet" href="https://www.html-tidy.org/assets/stylesheets/site.css">
  <link href='https://fonts.googleapis.com/css?family=PT+Sans:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
  <link href='https://fonts.googleapis.com/css?family=PT+Serif:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
  
	
</head>
<body>
  <div id="main">

    <nav><ul>
        
        <li><a href="/" class="manual">Home</a></li>
        
        
        
        <li class="p-documentation20000101part_intro_doc"><a href="#documentation20000101part_intro_doc">Intro</a></li>
        
        
        <li class="p-documentation20000201part_what"><a href="#documentation20000201part_what">What</a></li>
        
        
        <li class="p-documentation20000301part_running"><a href="#documentation20000301part_running">Use</a></li>
        
        
        <li class="p-documentation20000401part_options_config"><a href="#documentation20000401part_options_config">Configure</a></li>
        
        
        <li class="p-documentation20000501part_features_notes"><a href="#documentation20000501part_features_notes">Featured</a></li>
        
        
        <li class="p-documentation20000601part_building"><a href="#documentation20000601part_building">Build</a></li>
        
        
        <li class="p-documentation20000701part_faq"><a href="#documentation20000701part_faq">FAQ</a></li>
        
        
        <li class="p-documentation20000801part_license"><a href="#documentation20000801part_license">License</a></li>
        
    </ul></nav>

    

<div id="documentation20000101part_intro_doc" class="section p-documentation20000101part_intro_doc">
    
    <div class="subtlecircle sectiondivider faicon">
          <span class="fa-stack">
            <i class="fa fa-circle fa-stack-2x"></i>
            <i class="fa fa-intro fa-stack-1x"></i>
          </span>
        <h5 class="icon-title">Intro</h5>
    </div>
    
    <div class="container left">
        <h1 id="html-tidy">HTML Tidy</h1>

<h2 id="documentation-introduction">Documentation Introduction</h2>

<p>On this page you can refer to nearly everything you need to know about <strong>HTML
Tidy</strong>. If you’re on macOS, Linux, or UNIX you can also use <code class="language-plaintext highlighter-rouge">man tidy</code> and
read the purpose-built documentation for the version of <strong>Tidy</strong> that you have
installed.</p>

<p>You can find configuration quick references <a href="http://api.html-tidy.org">in the API and Quick Reference Site</a>.</p>

<p>If you’re a developer using <strong><code class="language-plaintext highlighter-rouge">libtidy</code></strong> please consult the 
<a href="http://api.html-tidy.org">API and Quick Reference Site</a> here, and the <a href="https://www.html-tidy.org/developer/">libtidy Introduction</a> page.</p>

<p>And if you simply want to use <strong>Tidy</strong>, then please read on.</p>


    </div>
</div>


<div id="documentation20000201part_what" class="section p-documentation20000201part_what">
    
    <div class="subtlecircle sectiondivider faicon">
          <span class="fa-stack">
            <i class="fa fa-circle fa-stack-2x"></i>
            <i class="fa fa-info fa-stack-1x"></i>
          </span>
        <h5 class="icon-title">What</h5>
    </div>
    
    <div class="container left">
        <h1 id="what-tidy-does">What Tidy does</h1>

<p>Tidy corrects and cleans up HTML content by fixing markup errors.
Here are a few examples:</p>

<ul class="tidy-features">
  <li>
    <p>Mismatched end tags:</p>

    <p><code class="language-plaintext highlighter-rouge">&lt;h2&gt;subheading&lt;/h3&gt;</code></p>

    <p>…is converted to:</p>

    <p><code class="language-plaintext highlighter-rouge">&lt;h2&gt;subheading&lt;/h2&gt;</code></p>
  </li>
  <li>
    <p>Misnested tags:</p>

    <p><code class="language-plaintext highlighter-rouge">&lt;p&gt;here is a para &lt;b&gt;bold &lt;i&gt;bold italic&lt;/b&gt; bold?&lt;/i&gt; normal?</code></p>

    <p>…is converted to:</p>

    <p><code class="language-plaintext highlighter-rouge">&lt;p&gt;here is a para &lt;b&gt;bold &lt;i&gt;bold italic&lt;/i&gt; bold?&lt;/b&gt; normal?</code></p>
  </li>
  <li>
    <p>Missing end tags:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;h1&gt;heading
&lt;h2&gt;subheading&lt;/h2&gt;
</code></pre></div>    </div>

    <p>…is converted to:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;h1&gt;heading&lt;/h1&gt;
&lt;h2&gt;subheading&lt;/h2&gt;
</code></pre></div>    </div>

    <p>…and</p>

    <p><code class="language-plaintext highlighter-rouge">&lt;h1&gt;&lt;i&gt;italic heading&lt;/h1&gt;</code></p>

    <p>…is converted to:</p>

    <p><code class="language-plaintext highlighter-rouge">&lt;h1&gt;&lt;i&gt;italic heading&lt;/i&gt;&lt;/h1&gt;</code></p>
  </li>
  <li>
    <p>Mixed-up tags</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;i&gt;&lt;h1&gt;heading&lt;/h1&gt;&lt;/i&gt;
&lt;p&gt;new paragraph &lt;b&gt;bold text
&lt;p&gt;some more bold text
</code></pre></div>    </div>

    <p>…is converted to:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;h1&gt;&lt;i&gt;heading&lt;/i&gt;&lt;/h1&gt;
&lt;p&gt;new paragraph &lt;b&gt;bold text&lt;/b&gt;
&lt;p&gt;&lt;b&gt;some more bold text&lt;/b&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p>Tag in the wrong place:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;h1&gt;&lt;hr&gt;heading&lt;/h1&gt;
&lt;h2&gt;sub&lt;hr&gt;heading&lt;/h2&gt;
</code></pre></div>    </div>

    <p>…is converted to:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;hr&gt;
&lt;h1&gt;heading&lt;/h1&gt;
&lt;h2&gt;sub&lt;/h2&gt;
&lt;hr&gt;
&lt;h2&gt;heading&lt;/h2&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p>Missing “/” in end tags:</p>

    <p><code class="language-plaintext highlighter-rouge">&lt;a href="#refs"&gt;References&lt;a&gt;</code></p>

    <p>…is converted to:</p>

    <p><code class="language-plaintext highlighter-rouge">&lt;a href="#refs"&gt;References&lt;/a&gt;</code></p>
  </li>
  <li>
    <p>List markup with missing tags:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;body&gt;
&lt;ul&gt;
&lt;li&gt;1st list item
&lt;li&gt;2nd list item
</code></pre></div>    </div>

    <p>…is converted to:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;body&gt;
&lt;ul&gt;
&lt;li&gt;1st list item&lt;/li&gt;
&lt;li&gt;2nd list item&lt;/li&gt;
&lt;/ul&gt;
</code></pre></div>    </div>

    <p>Note Tidy will warn about the missing ul close tag, but not about 
the optional li close tag.</p>
  </li>
  <li>
    <p>Missing quotation marks around attribute values</p>

    <p>Tidy inserts quotation marks around all attribute values for you. It
can also detect when you have forgotten the closing quotation mark,
although this is something you will have to fix yourself.</p>
  </li>
  <li>
    <p>Unknown/proprietary attributes</p>

    <p>Tidy has a comprehensive knowledge of the attributes defined in HTML5.
That often allows you to spot where you have mis-typed an attribute.</p>
  </li>
  <li>
    <p>Tags lacking a terminating <code class="language-plaintext highlighter-rouge">&gt;</code></p>

    <p>This is something you then have to fix yourself as Tidy cannot
determine where the <code class="language-plaintext highlighter-rouge">&gt;</code> was meant to be inserted.</p>
  </li>
</ul>

    </div>
</div>


<div id="documentation20000301part_running" class="section p-documentation20000301part_running">
    
    <div class="subtlecircle sectiondivider faicon">
          <span class="fa-stack">
            <i class="fa fa-circle fa-stack-2x"></i>
            <i class="fa fa-play-circle fa-stack-1x"></i>
          </span>
        <h5 class="icon-title">Use</h5>
    </div>
    
    <div class="container left">
        <h1 id="running-tidy">Running Tidy</h1>

<h2 id="running-tidy-in-a-terminal-console">Running Tidy in a Terminal (Console)</h2>

<p>This is the syntax for invoking <strong>Tidy</strong> from the command line:</p>

<p><code class="language-plaintext highlighter-rouge">tidy [[options] filename]</code></p>

<p><strong>Tidy</strong> defaults to reading from standard input, so if you run <strong>Tidy</strong> without
specifying the <code class="language-plaintext highlighter-rouge">filename</code> argument, it will just sit there waiting for input
to read.</p>

<p><strong>Tidy</strong> defaults to writing to standard output. So you can pipe output
from <strong>Tidy</strong> to other programs, as well as pipe output from other programs to
<strong>Tidy</strong>. You can page through the output from <strong>Tidy</strong> by piping it to a
pager, e.g.:</p>

<p><code class="language-plaintext highlighter-rouge">tidy file.html | less</code></p>

<p>To have <strong>Tidy</strong> write its output to a file instead, either use the</p>

<p><code class="language-plaintext highlighter-rouge">-o filename</code> or <code class="language-plaintext highlighter-rouge">-output filename</code></p>

<p>option, or redirect standard output to the file. For example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tidy -o output.html index.html
tidy index.html &gt; output.html
</code></pre></div></div>

<p>Both of those run <strong>Tidy</strong> on the file <strong>index.html</strong> and write the
output to the file <strong>output.html</strong>, while writing any error messages to
standard error.</p>

<p><strong>Tidy</strong> defaults to writing its error messages to standard error (that is, to
the console where you’re running <strong>Tidy</strong>). To page through the error messages
along with the output, redirect standard error to standard output, and pipe
it to your pager:</p>

<p><code class="language-plaintext highlighter-rouge">tidy index.html 2&gt;&amp;1 | less</code></p>

<p>To have <strong>Tidy</strong> write the errors to a file instead, either use the</p>

<p><code class="language-plaintext highlighter-rouge">-f filename</code> or <code class="language-plaintext highlighter-rouge">-file filename</code></p>

<p>option, or redirect standard error to a file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tidy -o output.html -f errs.txt index.html
tidy index.html &gt; output.html 2&gt; errs.txt
</code></pre></div></div>

<p>Both of those run <strong>Tidy</strong> on the file <strong>index.html</strong> and write the
output to the file <strong>output.html</strong>, while writing any error messages to
the file <strong>errs.txt</strong>.</p>

<p>Writing the error messages to a file is especially useful if the file you
are checking has many errors; reading them from a file instead of the
console or pager can make it easier to review them.</p>

<p>You can use the or <code class="language-plaintext highlighter-rouge">-m</code> or <code class="language-plaintext highlighter-rouge">-modify</code> option to modify (in-place) the contents
of the input file you are checking; that is, to overwrite those contents with
the output from <strong>Tidy</strong>. For example:</p>

<p><code class="language-plaintext highlighter-rouge">tidy -f errs.txt -m index.html</code></p>

<p>That runs <strong>Tidy</strong> on the file <strong>index.html</strong>, modifying it in place
and writing the error messages to the file <strong>errs.txt</strong>.</p>

<p><strong>Caution:</strong> If you use the <code class="language-plaintext highlighter-rouge">-m</code> option, you should first ensure that you have a
backup copy of your file.</p>

<h2 id="running-tidy-in-scripts">Running Tidy in Scripts</h2>

<p>If you want to run <strong>Tidy</strong> from a Perl, bash, or other scripting language
you may find it of value to inspect the result returned by <strong>Tidy</strong>
when it exits: <code class="language-plaintext highlighter-rouge">0</code> if everything is fine, <code class="language-plaintext highlighter-rouge">1</code> if there were warnings
and <code class="language-plaintext highlighter-rouge">2</code> if there were errors. This is an example using Perl:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (close(TIDY) == 0) {
  my $exitcode = $? &amp;gt;&amp;gt; 8;
  if ($exitcode == 1) {
    printf STDERR "tidy issued warning messages\n";
  } elsif ($exitcode == 2) {
    printf STDERR "tidy issued error messages\n";
  } else {
    die "tidy exited with code: $exitcode\n";
  }
} else {
  printf STDERR "tidy detected no errors\n";
}
</code></pre></div></div>

    </div>
</div>


<div id="documentation20000401part_options_config" class="section p-documentation20000401part_options_config">
    
    <div class="subtlecircle sectiondivider faicon">
          <span class="fa-stack">
            <i class="fa fa-circle fa-stack-2x"></i>
            <i class="fa fa-gears fa-stack-1x"></i>
          </span>
        <h5 class="icon-title">Configure</h5>
    </div>
    
    <div class="container left">
        <h1 id="tidy-options-and-configuration">Tidy Options and Configuration</h1>

<h2 id="from-the-terminal-console">From the Terminal (Console)</h2>

<p>To get a list of available options, use:</p>

<p><code class="language-plaintext highlighter-rouge">tidy -help</code></p>

<p>To get a list of all configuration settings, use:</p>

<p><code class="language-plaintext highlighter-rouge">tidy -help-config</code></p>

<p>To see the default configuration values, use:</p>

<p><code class="language-plaintext highlighter-rouge">tidy -export-default-config</code></p>

<p>To read the help output a page at time, pipe it to a pager, e.g.,:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tidy -help | less
tidy -help-config | less
</code></pre></div></div>

<p>Single-letter options other than <code class="language-plaintext highlighter-rouge">-f</code> may be combined; for example:</p>

<p><code class="language-plaintext highlighter-rouge">tidy -f errs.txt -imu foo.html</code></p>

<h2 id="using-a-configuration-file">Using a configuration file</h2>

<p>The most convenient way to configure <strong>Tidy</strong> is by using separate configuration
file.</p>

<p>Assuming you have created a <strong>Tidy</strong> configuration file named <strong>config.txt</strong>
(the name and extension don’t matter), you can instruct <strong>Tidy</strong> to use it via
the command line option <code class="language-plaintext highlighter-rouge">-config config.txt</code>; for example:</p>

<p><code class="language-plaintext highlighter-rouge">tidy -config config.txt file1.html file2.html</code></p>

<p>Alternatively, you can name the default config file via the environment variable
named <code class="language-plaintext highlighter-rouge">HTML_TIDY</code>, the value of which is the absolute path for the config file.</p>

<p>You can also set config options on the command line by preceding the name of the
option immediately (no intervening space) with the string “<code class="language-plaintext highlighter-rouge">--</code>”; for example:</p>

<p><code class="language-plaintext highlighter-rouge">tidy --break-before-br true --show-warnings false</code></p>

<p>You can find Quick Reference documentation for your version of <strong>Tidy</strong> that describe the
full set of configuration options on our <a href="http://api.html-tidy.org/#part_quickref">API and Quick Reference Page</a>.</p>

<h2 id="sample-configuration-file">Sample Configuration File</h2>

<p>The following is an example of a <strong>Tidy</strong> config file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// sample config file for HTML tidy
indent: auto
indent-spaces: 2
wrap: 72
markup: yes
output-xml: no
input-xml: no
show-warnings: yes
numeric-entities: yes
quote-marks: yes
quote-nbsp: yes
quote-ampersand: no
break-before-br: no
uppercase-tags: no
uppercase-attributes: no
char-encoding: latin1
new-inline-tags: cfif, cfelse, math, mroot,
  mrow, mi, mn, mo, msqrt, mfrac, msubsup, munderover,
  munder, mover, mmultiscripts, msup, msub, mtext,
  mprescripts, mtable, mtr, mtd, mth
new-blocklevel-tags: cfoutput, cfquery
new-empty-tags: cfelse
</code></pre></div></div>


    </div>
</div>


<div id="documentation20000501part_features_notes" class="section p-documentation20000501part_features_notes">
    
    <div class="subtlecircle sectiondivider faicon">
          <span class="fa-stack">
            <i class="fa fa-circle fa-stack-2x"></i>
            <i class="fa fa-file-code-o fa-stack-1x"></i>
          </span>
        <h5 class="icon-title">Featured</h5>
    </div>
    
    <div class="container left">
        <h1 id="featured-options-and-solutions">Featured Options and Solutions</h1>

<h2 id="indenting-output-for-readability">Indenting output for readability</h2>

<p>Indenting the source markup of an HTML document makes the markup easier
to read. <strong>Tidy</strong> can indent the markup for an HTML document while recognizing
elements whose contents should not be indented. In the example below, <strong>Tidy</strong>
indents the output while preserving the formatting of the <code class="language-plaintext highlighter-rouge">&lt;pre&gt;</code> element:</p>

<p>Input:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
 &lt;head&gt;
 &lt;title&gt;Test document&lt;/title&gt;
 &lt;/head&gt;
 &lt;body&gt;
 &lt;p&gt;This example shows how Tidy can indent output while preserving
 formatting of particular elements.&lt;/p&gt;

 &lt;pre&gt;This is
 &lt;em&gt;genuine
       preformatted&lt;/em&gt;
    text
 &lt;/pre&gt;
 &lt;/body&gt;
 &lt;/html&gt;
</code></pre></div></div>

<p>Output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Test document&lt;/title&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;p&gt;This example shows how Tidy can indent output while preserving
    formatting of particular elements.&lt;/p&gt;
&lt;pre&gt;
This is
&lt;em&gt;genuine
       preformatted&lt;/em&gt;
   text
&lt;/pre&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre></div></div>

<p><strong>Tidy</strong>’s indenting behavior is not perfect and can sometimes cause your
output to be rendered by browsers in a different way than the input.
You can avoid unexpected indenting-related rendering problems by setting
<code class="language-plaintext highlighter-rouge">indent:no</code> or <code class="language-plaintext highlighter-rouge">indent:auto</code> in a config file.</p>

<h2 id="preserving-original-indenting-not-possible">Preserving original indenting not possible</h2>

<p><strong>Tidy</strong> is not capable of preserving the original indenting of the markup
from the input it receives. That’s because <strong>Tidy</strong> starts by building a clean
parse tree from the input, and that parse tree doesn’t contain any
information about the original indenting. <strong>Tidy</strong> then pretty-prints the parse
tree using the current config settings. Trying to preserve the original
indenting from the input would interact badly with the repair operations
needed to build a clean parse tree, and would considerably complicate the
code.</p>

<h2 id="encodings-and-character-references">Encodings and character references</h2>

<p><strong>Tidy</strong> defaults to assuming you want output to be encoded in UTF-8.
But <strong>Tidy</strong> offers you a choice of other character encodings: US ASCII, ISO
Latin-1, and the ISO 2022 family of 7 bit encodings.</p>

<p><strong>Tidy</strong> doesn’t yet recognize the use of the HTML <code class="language-plaintext highlighter-rouge">&lt;meta&gt;</code> element for
specifying the character encoding.</p>

<p>The full set of HTML character references are defined. Cleaned-up output
uses named character references for characters when appropriate. Otherwise,
characters outside the normal range are output as numeric character
references.</p>

<h2 id="accessibility">Accessibility</h2>

<p><strong>Tidy</strong> offers advice on potential accessibility problems for people using
non-graphical browsers. Have a look at our rescued <a href="https://www.html-tidy.org/accessibility/">HTML Tidy Accessibility
Checker page</a>.</p>

<h2 id="cleaning-up-presentational-markup">Cleaning up presentational markup</h2>

<p>Some tools generate HTML with presentational elements such as <code class="language-plaintext highlighter-rouge">&lt;font&gt;</code>,
<code class="language-plaintext highlighter-rouge">&lt;nobr&gt;</code>, and <code class="language-plaintext highlighter-rouge">&lt;center&gt;</code>. <strong>Tidy</strong>’s <code class="language-plaintext highlighter-rouge">‑clean</code> option will replace those elements
with <code class="language-plaintext highlighter-rouge">&lt;style&gt;</code> elements and CSS.</p>

<p>Some HTML documents rely on the presentational effects of <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> start
tags that are not followed by any content. <strong>Tidy</strong> deletes such <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> tags
(as well as any headings that don’t have content). So do not use <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code>
tags simply for adding vertical whitespace; instead use CSS, or the
<code class="language-plaintext highlighter-rouge">&lt;br&gt;</code> element. However, note that <strong>Tidy</strong> won’t discard <code class="language-plaintext highlighter-rouge">&lt;p&gt;</code> tags that
are followed by any non-breaking space (that is, the <code class="language-plaintext highlighter-rouge">&amp;nbsp;</code> named
character reference).</p>

<h2 id="teaching-tidy-about-new-tags">Teaching Tidy about new tags</h2>

<p>You can teach <strong>Tidy</strong> about new tags by declaring them in the
configuration file, the syntax is:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>new-inline-tags: tag1, tag2, tag3
new-empty-tags: tag1, tag2, tag3
new-blocklevel-tags: tag1, tag2, tag3
new-pre-tags: tag1, tag2, tag3
</code></pre></div></div>

<p>The same tag can be defined as <strong>empty</strong> and as <strong>inline</strong>, or as <strong>empty</strong>
and as <strong>block</strong>.</p>

<p>These declarations can be combined to define a new empty
inline or empty block element, but you are not advised to declare
tags as being both <strong>inline</strong> and <strong>block</strong>.</p>

<p>Note that the new tags can only appear where <strong>Tidy</strong> expects inline
or block-level tags respectively. That means you can’t place
new tags within the document head or other contexts with restricted
content models.</p>

<h2 id="ignoring-php-asp-and-jste-instructions">Ignoring PHP, ASP, and JSTE instructions</h2>

<p><strong>Tidy</strong> will gracefully ignore many cases of PHP, ASP, and JSTE
instructions within element content and as replacements for attributes,
and preserve them as-is in output; for example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;option &lt;% if rsSchool.Fields("ID").Value
  = session("sessSchoolID")
  then Response.Write("selected") %&gt;
  value='&lt;%=rsSchool.Fields("ID").Value%&gt;'&gt;
  &lt;%=rsSchool.Fields("Name").Value%&gt;
  (&lt;%=rsSchool.Fields("ID").Value%&gt;)
&lt;/option&gt;
</code></pre></div></div>

<p>But note that <strong>Tidy</strong> may report missing attributes when those are “hidden”
within the PHP, ASP, or JSTE code. If you use PHP, ASP, or JSTE code to
create a start tag, but place the end tag explicitly in the HTML markup,
<strong>Tidy</strong> won’t be able to match them up, and will delete the end tag.  In that
case you are advised to make the start tag explicit and to use PHP, ASP, or
JSTE code for just the attributes; for example:</p>

<p><code class="language-plaintext highlighter-rouge">&lt;a href="&lt;%=random.site()%&gt;"&gt;do you feel lucky?&lt;/a&gt;</code></p>

<p><strong>Tidy</strong> can also get things wrong if the PHP, ASP, or JSTE code includes
quotation marks; for example:</p>

<p><code class="language-plaintext highlighter-rouge">value="&lt;%=rsSchool.Fields("ID").Value%&gt;"</code></p>

<p><strong>Tidy</strong> will see the quotation mark preceding <code class="language-plaintext highlighter-rouge">ID</code> as ending the
attribute value, and proceed to complain about what follows.</p>

<p><strong>Tidy</strong> allows you to control whether line wrapping on spaces within PHP, ASP,
and JSTE instructions is enabled; see the <code class="language-plaintext highlighter-rouge">wrap-php</code>, <code class="language-plaintext highlighter-rouge">wrap-asp</code>,
and <code class="language-plaintext highlighter-rouge">wrap-jste</code> config options.</p>

<h2 id="correcting-well-formedness-errors-in-xml-markup">Correcting well-formedness errors in XML markup</h2>

<p><strong>Tidy</strong> can help you to correct well-formedness errors in XML markup. <strong>Tidy</strong>
doesn’t yet recognize all XML features, though; for example, it doesn’t
understand CDATA sections or DTD subsets.</p>


    </div>
</div>


<div id="documentation20000601part_building" class="section p-documentation20000601part_building">
    
    <div class="subtlecircle sectiondivider faicon">
          <span class="fa-stack">
            <i class="fa fa-circle fa-stack-2x"></i>
            <i class="fa fa-cubes fa-stack-1x"></i>
          </span>
        <h5 class="icon-title">Build</h5>
    </div>
    
    <div class="container left">
        <h1 id="building-tidy">Building Tidy</h1>

<h2 id="source-code">Source code</h2>

<p><strong>Tidy</strong>’s sourcecode can be found at <a href="https://github.com/htacg/tidy-html5">https://github.com/htacg/tidy-html5</a>.
There are sometimes several branches, but in general <strong>Master</strong> is the most
recently updated version. Note that as “cutting edge,” it may have bugs or other
unstable behavior. If you prefer a stable, officially released version, be
sure to have a look at <a href="https://github.com/htacg/tidy-html5/releases"><strong>Releases</strong></a> on the github page.</p>

<p>In general you can use the <strong>Download ZIP</strong> button on the github page to
download the most recent version of a branch. If you prefer Git then you can
use, e.g.:</p>

<p><code class="language-plaintext highlighter-rouge">git clone correc@ti.con:htacg/tidy-html5.git</code></p>

<p>…to clone the repository to your working machine.</p>

<h2 id="build-the-tidy-command-line-tool-and-libtidy-library">Build the <code class="language-plaintext highlighter-rouge">tidy</code> command-line tool and <code class="language-plaintext highlighter-rouge">libtidy</code> library</h2>

<p>For Linux/BSD/Mac platforms, you can build and install the <code class="language-plaintext highlighter-rouge">tidy</code> command-line
tool from the source code using the following steps:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">cd {your-tidy-html5-directory}/build/cmake</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">cmake ../.. [-DCMAKE_INSTALL_PREFIX=/path/for/install]</code></p>
  </li>
  <li>
    <p>Windows:  <code class="language-plaintext highlighter-rouge">cmake --build . --config Release</code><br />
Unix/OS X: <code class="language-plaintext highlighter-rouge">make</code></p>
  </li>
  <li>
    <p>Install, if desired:<br />
Windows: <code class="language-plaintext highlighter-rouge">cmake --build . --config Release --target INSTALL</code><br />
Unix/OS X: <code class="language-plaintext highlighter-rouge">[sudo] make install</code></p>
  </li>
</ol>

<p>Note that you will either need to run <code class="language-plaintext highlighter-rouge">make install</code> as root,
or with <code class="language-plaintext highlighter-rouge">sudo make install</code>.</p>


    </div>
</div>


<div id="documentation20000701part_faq" class="section p-documentation20000701part_faq">
    
    <div class="subtlecircle sectiondivider faicon">
          <span class="fa-stack">
            <i class="fa fa-circle fa-stack-2x"></i>
            <i class="fa fa-cubes fa-stack-1x"></i>
          </span>
        <h5 class="icon-title">FAQ</h5>
    </div>
    
    <div class="container left">
        <h1 id="faqs">FAQs</h1>

<dl>
  <dt>What now?</dt>
  <dd>
    <p>If you have a popup screen that reads similar to the below:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTML Tidy for Windows &lt;vers 1st August 2002; built on Aug 8 2002, at 15:41:13&gt;
Parsing Console input &lt;stdin&gt;
</code></pre></div>    </div>

    <p>…and do not know what to do next, read on.</p>

    <p><strong>Tidy</strong> is waiting for your HTML to come in so that it can parse it.
<strong>Tidy</strong> is fundamentally a tool that reads in HTML, cleans it up, and then
writes it out again. It was developed as a program you run from the
console prompt, but there are GUI encapsulations available, e.g.
HTML-Kit, which you might prefer.</p>

    <p>From the console prompt you can run <strong>Tidy</strong> like this:</p>

    <p><code class="language-plaintext highlighter-rouge">C&gt; tidy -m mywebpage.html</code></p>

    <p>In this case, the <code class="language-plaintext highlighter-rouge">-m</code> option requests <strong>Tidy</strong> to write
the tidied file back to the same filename as it read from
(<code class="language-plaintext highlighter-rouge">mywebpage.html</code>). <strong>Tidy</strong> will give you a breakdown of the problems it
found and the version of HTML the file appears to be using.</p>

    <p>To get a listing of <strong>Tidy</strong> command line options, just type
<code class="language-plaintext highlighter-rouge">tidy -?</code>.  To see a listing on configuration options,
try <code class="language-plaintext highlighter-rouge">tidy -help-config</code>.  To get more info on the
config options, see the applicable <a href="http://api.html-tidy.org/#part_quickref">Quick Reference</a>.</p>
  </dd>
  <dt>How to get support and/or file a bug report and/or feature request</dt>
  <dd>
    <p>For support and/or to file a bug report for HTACG’s <strong>HTML Tidy</strong>, please
use our <a href="https://github.com/htacg/tidy-html5/issues">bug tracker</a>. For general <strong>Tidy</strong> support, including for different
versions of <strong>Tidy</strong> and for products that use <strong><code class="language-plaintext highlighter-rouge">libtidy</code></strong>, a good location
is the original W3C mailing list <a href="mailto:correc@ti.con">correc@ti.con</a>.</p>
  </dd>
  <dt>Best practice to submit a bug report</dt>
  <dd>
    <p>Prior to submitting a bug report, please check that the bug is
not already known. Many are. If you are not sure, just ask. If it
is new bug, make sure to include at least the following information
in your report:</p>

    <ul>
      <li>A description of what you think went wrong.</li>
      <li>The <strong>HTML Tidy</strong> version (find it out by running <code class="language-plaintext highlighter-rouge">tidy -v</code>),
and operating system you are running.</li>
      <li>The input that exposes the bug. A small HTML document that reproduces
the problem is best.</li>
      <li>The configuration options you’ve used. Command line options like
<code class="language-plaintext highlighter-rouge">-asxml</code>, configuration files, etc. You may use <code class="language-plaintext highlighter-rouge">tidy -show-config</code> to
get an overview of the active <strong>Tidy</strong> settings.</li>
      <li>Your e-mail address for further questions and comments.</li>
    </ul>

    <p>This information is necessary to reproduce whatever is
failing; without them we cannot help you.</p>

    <p><strong>Please include only one bug per report.</strong> Reports with
multiple bugs are less easy to track and some bugs may get
missed.</p>
  </dd>
  <dt>Best practice to submit a feature request</dt>
  <dd>
    <p>If you want <strong>Tidy</strong> to do something new that it doesn’t do today
(or to stop doing something), then it is probably a feature request.</p>

    <p>As with bugs, please be sure that the feature has not already
been requested. If the feature has already been requested, you can add
your comments to the issue tracker. If the feature has not
already been requested, send the same information as for a bug
report, but place special emphasis on the desired output for a
given input, desired options, etc. Please be as specific as
possible about what you want <strong>Tidy</strong> to <em>do</em>.</p>
  </dd>
  <dt>How Do I Control the Output Layout?</dt>
  <dd>
    <p>There are three primary options that control how <strong>Tidy</strong> formats your
markup:</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">indent</code></li>
      <li><code class="language-plaintext highlighter-rouge">indent-attributes</code></li>
      <li><code class="language-plaintext highlighter-rouge">vertical-space</code></li>
    </ul>

    <p>Briefly, <code class="language-plaintext highlighter-rouge">indent</code> sets the level of left-to-right indenting
and, somewhat, how often elements are put onto a new line.  The options
are <code class="language-plaintext highlighter-rouge">yes</code>, <code class="language-plaintext highlighter-rouge">no</code>, and <code class="language-plaintext highlighter-rouge">auto</code>.</p>

    <p><code class="language-plaintext highlighter-rouge">indent-attributes</code> is a flag that, when set, tells <strong>Tidy</strong> to
put each attribute on a new line.</p>

    <p><code class="language-plaintext highlighter-rouge">vertical-space</code> is a flag that, when set, tells <strong>Tidy</strong> to add some empty
lines for readability.</p>

    <p>The default for all three is <code class="language-plaintext highlighter-rouge">no</code>.  These options may be used in
any combination to control how you want your markup to look.  The best
thing is to experiment a bit to see what you like. Be aware that
<code class="language-plaintext highlighter-rouge">indent yes</code> is deprecated for production use as it will
cause visual changes in most browsers.</p>

    <p>To get <strong>Tidy</strong> <em>Classic</em> <code class="language-plaintext highlighter-rouge">--indent auto</code> layout, use the following options:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>indent: auto
indent-attributes: no
vertical-space: yes
</code></pre></div>    </div>

    <p>You can read about more pretty print options in the applicable <a href="http://api.html-tidy.org/#part_quickref">Quick Reference</a>.</p>
  </dd>
  <dt>What version of <strong>Tidy</strong> should I Use?</dt>
  <dd>
    <p>The current HTACG builds are recommended. You can find these on the
<a href="https://github.com/htacg/tidy-html5">github repository</a> or from <a href="https://www.html-tidy.org/#get_tidy">our website</a>.</p>

    <p>Please continue to report examples where <strong>Tidy</strong> does not catch some
ill-formed HTML, or (worse) generates ill-formed HTML. These cases have
been significantly reduced. That said, be sure to test <strong>Tidy</strong> with some
representative files from your environment.</p>

    <p>For building a front end (e.g. GUI or language binding), the simplest
approach is to use <strong><code class="language-plaintext highlighter-rouge">libtidy</code></strong>.  For more information about building and
coding with <strong><code class="language-plaintext highlighter-rouge">libtidy</code></strong>, see the <a href="https://www.html-tidy.org/developer/">Introduction To <strong><code class="language-plaintext highlighter-rouge">libtidy</code></strong></a>.</p>
  </dd>
  <dt>How do I Run a regression test?</dt>
  <dd>
    <p>You might ask, “Why should I run a regression test?” If you are a
<strong>Tidy</strong> user, you might want to compare a new version of <strong>Tidy</strong>
to the version you are currently running.  This is a good idea
if you are using <strong>Tidy</strong> in production applications such as web
publishing. If you are a <strong>Tidy</strong> developer, it is a good idea to
run the regression test suite to make sure your fix or enhancement
doesn’t add new bugs.</p>

    <p>Detecting new bugs is easier said than done because sometimes
they are subtle and can only be seen in browsers (or one particular
browser you don’t even have). You can catch most crashes and
many layout problems by running the test suite as described here.</p>

    <p>The basic process is simple: run the test suite <strong>before</strong>
and <strong>after</strong> making changes to <strong><code class="language-plaintext highlighter-rouge">libtidy</code></strong> and compare the output
markup and messages. Be aware that the test scripts for Windows
(<code class="language-plaintext highlighter-rouge">alltest.cmd</code>) and Linux/Unix (<code class="language-plaintext highlighter-rouge">testall.sh</code>) place the output files in
<code class="language-plaintext highlighter-rouge">tidy/test/tmp</code>. If you forget to run the <strong>before</strong> test, you can always
download a binary or checkout the previous version of the branch you
are testing.</p>

    <p>Here are the steps to evaluate the impact of a <strong><code class="language-plaintext highlighter-rouge">libtidy</code></strong> change.</p>

    <p class="note">Note: these steps may or may not be accurate as of 2015-October-16.
Please <a href="https://github.com/htacg/tidy-html5/issues">submit a bug report</a> if you verify whether or not these
instructions still work before we do.</p>
  </dd>
  <dt>Regression test for Windows</dt>
  <dd>
    <p><strong>Before</strong> making changes:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\tidy\test&gt; alltest.cmd
C:\tidy\test&gt; ren tmp baseline
</code></pre></div>    </div>

    <p><strong>After</strong> making changes and building <strong>Tidy</strong>:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\tidy\test&gt; alltest.cmd
C:\tidy\test&gt; windiff tmp baseline
</code></pre></div>    </div>
  </dd>
  <dt>Regression test for Mac/Linux/Unix</dt>
  <dd>
    <p><strong>Before</strong> making changes:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/tidy/test$ ./testall.sh
~/tidy/test$ mv tmp baseline
</code></pre></div>    </div>

    <p><strong>After</strong> making changes and building <strong>Tidy</strong>:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/tidy/test$ ./testall.sh
~/tidy/test$ diff -u tmp baseline &gt; diff.txt
</code></pre></div>    </div>
  </dd>
</dl>


    </div>
</div>


<div id="documentation20000801part_license" class="section p-documentation20000801part_license">
    
    <div class="subtlecircle sectiondivider faicon">
          <span class="fa-stack">
            <i class="fa fa-circle fa-stack-2x"></i>
            <i class="fa fa-gavel fa-stack-1x"></i>
          </span>
        <h5 class="icon-title">License</h5>
    </div>
    
    <div class="container left">
        <h1 id="license">License</h1>

<h2 id="html-parser-and-pretty-printer">HTML parser and pretty printer</h2>

<p>Copyright © 1998-2003 World Wide Web Consortium
(Massachusetts Institute of Technology, European Research
Consortium for Informatics and Mathematics, Keio University).
All Rights Reserved.</p>

<p>Copyright © 2003-2015 by additional contributors.</p>

<p>This software and documentation is provided “as is,” and
the copyright holders and contributing author(s) make no
representations or warranties, express or implied, including
but not limited to, warranties of merchantability or fitness
for any particular purpose or that the use of the software or
documentation will not infringe any third party patents,
copyrights, trademarks or other rights.</p>

<p>The copyright holders and contributing author(s) will not be held
liable for any direct, indirect, special or consequential damages
arising out of any use of the software or documentation, even if
advised of the possibility of such damage.</p>

<p>Permission is hereby granted to use, copy, modify, and distribute
this source code, or portions hereof, documentation and executables,
for any purpose, without fee, subject to the following restrictions:</p>

<ol>
  <li>The origin of this source code must not be misrepresented.</li>
  <li>Altered versions must be plainly marked as such and must
not be misrepresented as being the original source.</li>
  <li>This Copyright notice may not be removed or altered from any
source or altered source distribution.</li>
</ol>

<p>The copyright holders and contributing author(s) specifically
permit, without fee, and encourage the use of this source code
as a component for supporting the Hypertext Markup Language in
commercial products. If you use this source code in a product,
acknowledgment is not required but would be appreciated.</p>

    </div>
</div>





    <div id="footer" class="section text-white">
      <div class="container">
        
        
<p>Website © 2015-2022 by <a href="https://www.htacg.org/">HTACG</a>
—
The HTACG and HTML Tidy logos incorporate the HTML5 logo by <a href="https://w3.org">W3C</a></p>


      </div>
    </div>
  </div>


</body>
<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="https://www.html-tidy.org/assets/javascript/site.js"></script>
</html>
