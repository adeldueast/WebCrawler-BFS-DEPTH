<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<title>Introduction to TalkML</title>
<style type="text/css">
  body { 
    margin-left: 10%; 
    margin-right: 10%; 
    font-family: sans-serif
  }
  h1 { margin-left: -8%; text-align: center }
  h2,h3,h4,h5,h6 { margin-left: -4% }
  pre { color: green; font-weight: bold }
  em { font-style: italic; font-weight: bold }
  strong { text-transform: uppercase; font-weight: bold }
  code { font-style: italic; font-weight: bold }
  samp { font-weight: bold; color: maroon }
  .navbar {text-align: center }
  table {
    margin-left: -4%;
    font-family: sans-serif;
    background: rgb(255,255,153)
  }
  th { background: rgb(204, 204, 153) }
</style>
</head>
<body bgcolor="white" text="black">
<h1>Introduction to TalkML</h1>

<p align="center"><img src="guillaume.jpg" alt=
"photo of a smart phone with Guillaume Belrose in the display"
width="320" height="240"><br>
<small>Guillaume Belrose, who helped to devise TalkML and develop
the sofware</small></p>

<br>
<br>
<br>
 

<p>TalkML is an experimental XML language for voice browsers, and
is being developed by <a href="http://www.hplabs.hp.com">HP
Labs</a> for use in the following markets:</p>

<ul>
<li>
<p>Call centers (IVR++) -- sales and support services accessed
via 800 numbers, adding speech recognition to today's DTMF (touch
tone) systems</p>
</li>

<li>
<p>Smart phones with displays</p>
</li>

<li>
<p>Access to email, appointments, news and travel services etc.
while your are on the road (in-car systems)</p>
</li>

<li>
<p>Mobile devices too small for decent displays or keyboards,
WCDMA palmtop organizers/pagers with low enough cost to be a
must-have (like cell-phones)</p>
</li>
</ul>

<p>TalkML supports more natural conversations than dialog systems
based on keywords, while remaining simple to author. Other work
is underway to investigate how to author "dual-access"
applications, where the same application can be accessed by both
conventional visual browsers and voice browsers, perhaps via
transforming HTML into TalkML.</p>

<p>The outermost element is <code>talkml</code>:</p>

<pre>
&lt;talkml [first="start"]&gt;
  ... dialog definitions ...
&lt;/talkml&gt;
</pre>

<p>An application is defined as set of dialog blocks</p>

<ul>
<li>
<p>A typical dialog block involves:</p>

<ol>
<li>Prompt user for input</li>

<li>Listen for a response</li>

<li>Determine what to do next</li>
</ol>

<br>
</li>

<li>
<p>On timeouts, offer help and listen again</p>
</li>

<li>
<p>Barge-ins allow users to break in when the browser is
speaking, e.g. to change to a new task or to get help</p>
</li>

<li>
<p>Each application defines variables representing information
about its state. These are set by the grammar rules according to
the user's responses and determine the way the dialog
proceeeds</p>
</li>
</ul>

<p>The <code>dialog</code> element defines a dialog block. It
consists of one or more steps which are executed in sequence,
looping back to the beginning after the last step is
executed.</p>

<pre>
&lt;dialog name=<em>name</em>&gt;
  <em>one or more steps</em>
&lt;/dialog&gt;
</pre>

<p>Each step is one of the following:</p>

<pre>
&lt;say [on=<em>condition</em>]&gt;
  <em>text used as a prompt</em>
&lt;/say&gt;
</pre>

<p>Within the "say" element you can use others, e.g.</p>

<pre>
&lt;say&gt;
  &lt;audio src="dooropen.wav"/&gt;
  &lt;speaker name="Eddie"&gt;
     Welcome to the TalkML Travel Center
  &lt;/speaker&gt;
&lt;/say&gt;
</pre>

<p>We propose to support the SABLE tag set for richer control of
text to speech as well as style sheets and ACSS. You can use the
<code>var</code> element to insert the value of an application
variable into the text, e.g.</p>

<pre>
&lt;say&gt;
  Which day do you want to travel to 
  &lt;var name="destination"/&gt;?
&lt;/say&gt;
</pre>

<p>The user's expected response is represented by:</p>

<pre>
&lt;listen [grammar=<em>grammar-name</em>]
  [timeout=<em>seconds</em>] [response=<em>var-name</em>]&gt;
  ... grammar rules ...
&lt;/listen&gt;
</pre>

<p>You can include the grammar rules in place or refer to an
external definition defined with a <code>grammar</code> element,
e.g.</p>

<pre>
&lt;listen grammar="main-menu"/&gt;
</pre>

<p>The response attribute is used to name which variable to place
the response, and is convenient when the grammar consists of
simple list of choices, e.g.</p>

<pre>
&lt;listen response="airport"&gt;
  "Bristol"|"Heathrow"|"Gatwick"|"Stansted"
&lt;/listen&gt;
</pre>

<p>You can define grammars separately using the <code>
grammar</code> element and refer to them as non-terminals in
other grammar rules using the <code>rule</code> element, e.g.</p>

<pre>
&lt;grammar name="flight" timeout="4"&gt;
  intro ((to|dest) from?)| (from (to|dest)?) polite?;
  intro = ("I want"|"I would like") ("to fly"|"a flight");
  polite = "please"|"thanks"|"thank you";
  to = ("going"|"flying")? "to" &lt;rule name="airport"/&gt;;
       (leave? departure)? {to.airport=airport};
  dest = "arriving" (arrival atdest?)|(atdest arrival?)
     ("and" from)?;
  arrival = "on" &lt;rule name="date"/&gt; {to.time=date};
  atdest = "at" &lt;rule name="airport"/&gt; {to.airport=airport};
  from = leave? (origin departure?)|(departure origin)
     ("and"? (dest|to))?;
  origin = "from" &lt;rule name="airport"/&gt; {from.airport=airport};
  departure = "on" &lt;rule name="date"/&gt; {from.time=date};
  leave = "departing" | "leaving";
&lt;/grammar&gt;
</pre>

<p>Which permits the user to say things like:</p>

<ul>
<li>I want a flight from London to Boston next Thursday</li>

<li>I want to fly to Boston from London please</li>

<li>I would like a flight departing from London on 3rd March and
going to Boston</li>
</ul>

<p>The grammar uses <samp>|</samp> for alternatives, <samp>
(</samp> and <samp>)</samp> for grouping, the <samp>?</samp>
suffix for options, <samp>*</samp> for zero or more, and <samp>
+</samp> for one or more. Variable assignments for matching rules
are given within <samp>{</samp> and <samp>}</samp>.</p>

<p><i>The rule tag could easily be expanded to support macro-like
capability</i></p>

<p>The <code>act</code> element is used to determine what to do
next based upon the values of variables set by the user's
response or by earlier dialog steps. The "set" attribute is used
to set one or more variables to given values. The "next"
attribute specifies the dialog to do next.</p>

<pre>
&lt;act [on=<em>condition</em>]
    [set="<em>var=value</em>[;<em>var=value</em>]*"]
    [next=<em>dialog-name</em>]/&gt;
</pre>

<p>Conditions are boolean expressions over variables using
<samp>(</samp> and <samp>)</samp> for grouping, with the logical
operators such as <samp>and</samp>, <samp>or</samp>,
<samp>not</samp>, <samp> =</samp>, and <samp>!=</samp>. Additional
operators are available for numbers and strings, and for finding
out if a variable is currently undefined.</p>

<p>An <code>error</code> element is triggered when an timeout has
occurred or when the user's response hasn't been understood. Each
time this happens an error counter is incremented, allowing you
to tailor the prompt accordingly. Note that the dialog name
"<samp>retry</samp>" is reserved to mean retry the current dialog
block without clearing the error counter.</p>

<pre>
&lt;error [on=<em>condition</em>]
    [set="<em>var=value</em>[;<em>var=value</em>]*"]
    [next=<em>dialog-name</em>]&gt;
  ... error prompt ...
&lt;/error&gt;
</pre>

<h3>Barge in commands</h3>

<p>You can say "help" at any time. The <code>help</code> element
defines the text you will get and can contain the same elements
as "say". The "next" attribute allows you to branch off to
another dialog, without it, the default behavior is to retry the
current dialog. The "on" attribute allows you to offer different
help text depending on the current values of the application's
variables.</p>

<pre>
&lt;help [name=<em>dialog-name</em>]
   [on=<em>condition</em>] [next=<em>dialog-name</em>]&gt;
  ... help dialog steps ...
&lt;/help&gt;
</pre>

<p>The Voice Browser defines a number of barge-in commands in
addition to "help", e.g. to move back to the previous dialog
step, to stop the current activity, to change user preferences,
to switch to a new activity, etc.</p>

<p>Barge in commands are grouped as follows:</p>

<ul>
<li>
<p>Context sensitive help</p>
</li>

<li>
<p>Hooking into Built-in commands</p>
</li>

<li>
<p>Application specific commands</p>
</li>
</ul>

<p>The commands trigger execution of the associated dialog.
This allows the application developer to intercept a built-in
command to end the task and to thank the user or offer a warning
etc. Authors can define application specific commands in addtion
to help and the commands built into the browser.</p>

<h3>Tasks</h3>

<p>To allow for re-use and effective modularization, you can group
dialogs into <b>tasks</b>. The <samp>task</samp> element scopes
application variables and allows you to specify import and export
sets of variables.</p>

<pre>
&lt;task name="hotel" import="..." export="..." start="..."&gt;

... <i>dialog definitions</i> ...

&lt;/task&gt;
</pre>

<p>You can execute a task with the act element, e.g.</p>

<pre>
&lt;act task=<i>name</i>/&gt;
</pre>

<p>The task ends with a return statement, e.g.</p>

<pre>
&lt;act next="return"/&gt;
</pre>

<p>Where "return" is a reserved name like "retry".</p>

<h3>Key Pad Input</h3>

<p>In some situations, speech recognition can't be used,
e.g. you need to be quiet, or it would be embassing to
talk to your handheld, or its really noisy, or you have
a bad cold etc.</p>

<p>You can bind keys to actions with the "key" attribute,
e.g. to bind the "1" key</p>

<pre>
&lt;act key="1" next="<i>dialog name</i>"&gt;
</pre>

<h3>Visual Output</h3>

<p>For small displays etc. where you want to show stuff on the
cellphone's display to complement spoken material.</p>

<p>This can be handled via the CSS <b>display</b> property, e.g.

<pre>
p.summary {display: block; speak: none}
</pre>

<p>Which renderers any paragraph with <i>class="summary"</i> on
the display without speaking it.</p>

<p>Another idea is to add a <i>show</i> element. There is a great
opportunity to control time-based synchronization for multimodal
applications using ideas being developed in W3C's Synchronized
Multimedia Activity.</p>

<h3><a href="example.html">Example TalkML
application</a></h3>

<p>This is a simple example of a flight booking application.</p>

<address>
<hr>
<a href="http://www.hp.com"><img src="hp.gif" width="76" height= 
"30" alt="HP - Expanding Possibilities" border="0" align=
"left"></a> <a href="http://www.w3.org/People/Raggett">Dave
Raggett</a> email: <a href="mailto:correc@ti.con">correc@ti.con</a>,
phone: +44 122 578 2521</address>
</body>
</html>

