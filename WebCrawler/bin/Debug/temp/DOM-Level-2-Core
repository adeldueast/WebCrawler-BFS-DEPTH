<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--
 Generated: Thu Nov 09 17:42:26 EST 2000 jfouffa.w3.org
 -->
<html lang='en' xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Document Object Model (DOM) Level 2 Core
Specification</title>
<link rel='stylesheet' type='text/css' href='./spec.css' />
<link rel='stylesheet' type='text/css' href='https://www.w3.org/StyleSheets/TR/W3C-SPSD.css' />



</head>

<a name='Overview'></a>



<div class='head'>
<p><a href='http://www.w3.org/'><img height='48' width='72'
alt='W3C' src='http://www.w3.org/Icons/w3c_home' /></a></p>

<h1 id='Overview-title'>Document Object Model (DOM) Level 2 Core
Specification</h1>

<h2 id='Overview-version'>Version 1.0</h2>

<!-- REC-DOM-Level-2-Core-20001113
 -->
<h2 id='Overview-W3C-doctype'>W3C Recommendation <i>13 November,
2000</i>
  <br>superseded 3 November 2020
</h2>

<dl>
<dt>This version:</dt>

<dd><a
href='https://www.w3.org/TR/2020/SPSD-DOM-Level-2-Core-20201103/'>https://www.w3.org/TR/2020/SPSD-DOM-Level-2-Core-20201103/</a></dd>

<dt>Latest version:</dt>

<dd><a
href='https://www.w3.org/TR/DOM-Level-2-Core/'>https://www.w3.org/TR/DOM-Level-2-Core/</a></dd>

<dt>Previous version:</dt>

<dd><a
      href='https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113'>https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113</a></dd>
</dl>

<dl>
<dt>Editors:</dt>

<dd>Arnaud Le Hors, <i>W3C team contact until October 1999, then
IBM</i></dd>

<dd>Philippe Le H&eacute;garet, <i>W3C, team contact (from November
1999)</i></dd>

<dd>Lauren Wood, <i>SoftQuad Software Inc., WG Chair</i></dd>

<dd>Gavin Nicol, <i>Inso EPS (for DOM Level 1)</i></dd>

<dd>Jonathan Robie, <i>Texcel Research and Software AG (for DOM
Level 1)</i></dd>

<dd>Mike Champion, <i>ArborText and Software AG (for DOM Level 1
from November 20, 1997)</i></dd>

<dd>Steve Byrne, <i>JavaSoft (for DOM Level 1 until November 19,
1997)</i></dd>
</dl>

<p class='copyright'>Copyright &copy; 2000 <a
href='http://www.w3.org/'><abbr
title='World Wide Web Consortium'>W3C</abbr></a><sup>&reg;</sup>
(<a href='http://www.lcs.mit.edu/'><abbr
title='Massachusetts Institute of Technology'>MIT</abbr></a>, <a
href='http://www.inria.fr/'><abbr lang='fr'
title='Institut National de Recherche en Informatique et Automatique'>
INRIA</abbr></a>, <a href='http://www.keio.ac.jp/'>Keio</a>), All
Rights Reserved. W3C <a
href='http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer'>
liability</a>, <a
href='http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks'>
trademark</a>, <a
href='http://www.w3.org/Consortium/Legal/copyright-documents-19990405'>
document use</a> and <a
href='http://www.w3.org/Consortium/Legal/copyright-software-19980720'>
software licensing</a> rules apply.</p>
</div>

<hr title='separator from header' />
<h2 id='Overview-abstract'>Abstract</h2>

<div class='abstract'>
<p>This specification defines the Document Object Model Level 2
Core, a platform- and language-neutral interface that allows
programs and scripts to dynamically access and update the content
and structure of documents. The Document Object Model Level 2 Core
builds on the Document Object Model Level 1 Core.</p>

<p>The DOM Level 2 Core is made of a set of core interfaces to
create and manipulate the structure and contents of a document. The
Core also contains specialized interfaces dedicated to XML.</p>
</div>

<h2 id='Overview-status'>Status of this document</h2>

<div class='status'>
<p><em>This section describes the status of this document at the
time of its publication. Other documents may supersede this
document. The latest status of this document series is maintained
at the W3C.</em></p>

      <p>This specification is a <a
      href="https://www.w3.org/2020/Process-20200915/#rec-rescind">Superseded
      Recommendation</a>. A newer specification exists that is recommended
      for new adoption in place of  this specification. </p>


       <p>For purposes of the W3C Patent Policy, this Superseded
       Recommendation  has the same status as an active Recommendation; it
       retains licensing  commitments and remains available as a reference
       for old — and  possibly still deployed — implementations, but is
       not recommended for future implementation. New implementations
       should follow the <a href='https://dom.spec.whatwg.org/'>Living
       Standard</a> of the DOM specification.</p>

<p>This document has been produced as part of the <a
href='http://www.w3.org/DOM/Activity.html'>W3C DOM Activity</a>.
The authors of this document are the DOM Working Group members.
Different modules of the Document Object Model have different
editors.</p>

<p>Please send general comments about this document to the public
mailing list <a href='mailto:correc@ti.con'>correc@ti.con</a>. An
<a href='http://lists.w3.org/Archives/Public/www-dom/'>archive</a>
is available at http://lists.w3.org/Archives/Public/www-dom/.</p>

<p>The English version of this specification is the only normative
version. Information about <a
href='http://www.w3.org/2000/11/DOM-Level-2-translations'>translations</a>
of this document is available at
http://www.w3.org/2000/11/DOM-Level-2-translations.</p>

<p>The <a href='http://www.w3.org/2000/11/DOM-Level-2-errata'>list
of known errors</a> in this document is available at
http://www.w3.org/2000/11/DOM-Level-2-errata</p>

<p>A list of <a href='http://www.w3.org/TR/'>current W3C
Recommendations and other technical documents</a> can be found at
http://www.w3.org/TR.</p>
</div>

<h2 id='Overview-table-of-contents'><a id='Overview-contents' name='Overview-contents'>Table
of contents</a></h2>

<ul class='toc'>
<li class='tocline2'><a class='tocxref'
href='#expanded-toc'>Expanded Table of Contents</a></li>

<li class='tocline2'><a class='tocxref'
href='#copyright-notice'>Copyright Notice</a></li>

<li class='tocline2'><a class='tocxref'
href='#introduction'>What is the Document Object
Model?</a></li>
</ul>

<ul class='toc'>
<li class='tocline2'><a class='tocxref' href='#core'>1.
Document Object Model Core</a></li>
</ul>

<ul class='toc'>
<li class='tocline2'><a class='tocxref'
href='#changes'>Appendix A: Changes</a></li>

<li class='tocline2'><a class='tocxref' href='#i18n'>Appendix
B: Accessing code point boundaries</a></li>

<li class='tocline2'><a class='tocxref'
href='#idl-definitions'>Appendix C: IDL Definitions</a></li>

<li class='tocline2'><a class='tocxref'
href='#java-binding'>Appendix D: Java Language Binding</a></li>

<li class='tocline2'><a class='tocxref'
href='#ecma-script-binding'>Appendix E: ECMAScript Language
Binding</a></li>

<li class='tocline2'><a class='tocxref'
href='#acknowledgements'>Appendix F: Acknowledgements</a></li>

<li class='tocline2'><a class='tocxref'
href='#glossary'>Glossary</a></li>

<li class='tocline2'><a class='tocxref'
href='#references'>References</a></li>

<li class='tocline2'><a class='tocxref'
href='#def-index'>Index</a></li>
</ul>



<a name='expanded-toc'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='expanded-toc-TOC' name='expanded-toc-TOC'></a> 

<h1 id='expanded-toc-TOC-h1' class='div1'>Expanded Table of Contents</h1>

<ul class='toc'>
<li class='tocline2'><a class='tocxref'
href='#expanded-toc'>Expanded Table of Contents</a></li>

<li class='tocline2'><a class='tocxref'
href='#copyright-notice'>Copyright Notice</a> 

<ul class='toc'>
<li class='tocline3'><a class='tocxref'
href='#copyright-notice-Copyright-notice-document'>W3C Document
Copyright Notice and License</a></li>

<li class='tocline3'><a class='tocxref'
href='#copyright-notice-Copyright-notice-software'>W3C Software
Copyright Notice and License</a></li>
</ul>
</li>

<li class='tocline2'><a class='tocxref'
href='#introduction'>What is the Document Object Model?</a> 

<ul class='toc'>
<li class='tocline3'><a class='tocxref'
href='#introduction-ID-E7C3082'>Introduction</a></li>

<li class='tocline3'><a class='tocxref'
href='#introduction-ID-E7C30821'>What the Document Object Model
is</a></li>

<li class='tocline3'><a class='tocxref'
href='#introduction-ID-E7C30822'>What the Document Object Model
is not</a></li>

<li class='tocline3'><a class='tocxref'
href='#introduction-ID-E7C30823'>Where the Document Object
Model came from</a></li>

<li class='tocline3'><a class='tocxref'
href='#introduction-ID-E7C30824'>Entities and the DOM
Core</a></li>

<li class='tocline3'><a class='tocxref'
href='#introduction-ID-Conformance'>Conformance</a></li>

<li class='tocline3'><a class='tocxref'
href='#introduction-ID-E7C30826'>DOM Interfaces and DOM
Implementations</a></li>
</ul>
</li>
</ul>

<ul class='toc'>
<li class='tocline2'><a class='tocxref' href='#core'>1.
Document Object Model Core</a> 

<ul class='toc'>
<li class='tocline3'><a class='tocxref'
href='#core-ID-1590626201'>1.1. Overview of the DOM Core
Interfaces</a> 

<ul class='toc'>
<li class='tocline4'><a class='tocxref'
href='#core-ID-1590626202'>1.1.1. The DOM Structure
Model</a></li>

<li class='tocline4'><a class='tocxref'
href='#core-ID-249F15BA'>1.1.2. Memory Management</a></li>

<li class='tocline4'><a class='tocxref'
href='#core-ID-45A944CB'>1.1.3. Naming Conventions</a></li>

<li class='tocline4'><a class='tocxref'
href='#core-ID-1CED5498'>1.1.4. Inheritance vs. Flattened Views
of the API</a></li>

<li class='tocline4'><a class='tocxref'
href='#core-ID-C74D1578'>1.1.5. The DOMString type</a></li>

<li class='tocline4'><a class='tocxref'
href='#core-Core-DOMTimeStamp'>1.1.6. The DOMTimeStamp
type</a></li>

<li class='tocline4'><a class='tocxref'
href='#core-ID-5DFED1F0'>1.1.7. String comparisons in the
DOM</a></li>

<li class='tocline4'><a class='tocxref'
href='#core-Namespaces-Considerations'>1.1.8. XML
Namespaces</a></li>
</ul>
</li>

<li class='tocline3'><a class='tocxref'
href='#core-ID-BBACDC08'>1.2. Fundamental Interfaces</a></li>

<li class='tocline3'><a class='tocxref'
href='#core-ID-E067D597'>1.3. Extended Interfaces</a></li>
</ul>
</li>
</ul>

<ul class='toc'>
<li class='tocline2'><a class='tocxref'
href='#changes'>Appendix A: Changes</a> 

<ul class='toc'>
<li class='tocline3'><a class='tocxref'
href='#changes-DOMLevel1to2Changes'>A.1. Changes between DOM
Level 1 Core and DOM Level 2 Core</a> 

<ul class='toc'>
<li class='tocline4'><a class='tocxref'
href='#changes-DOMLevel1Changes'>A.1.1. Changes to DOM Level 1
Core interfaces and exceptions</a></li>

<li class='tocline4'><a class='tocxref'
href='#changes-DOMLevel2Addons'>A.1.2. New features</a></li>
</ul>
</li>
</ul>
</li>

<li class='tocline2'><a class='tocxref' href='#i18n'>Appendix
B: Accessing code point boundaries</a> 

<ul class='toc'>
<li class='tocline3'><a class='tocxref'
href='#i18n-i18n-introduction'>B.1. Introduction</a></li>

<li class='tocline3'><a class='tocxref'
href='#i18n-i18n-methods'>B.2. Methods</a></li>
</ul>
</li>

<li class='tocline2'><a class='tocxref'
href='#idl-definitions'>Appendix C: IDL Definitions</a></li>

<li class='tocline2'><a class='tocxref'
href='#java-binding'>Appendix D: Java Language Binding</a></li>

<li class='tocline2'><a class='tocxref'
href='#ecma-script-binding'>Appendix E: ECMAScript Language
Binding</a></li>

<li class='tocline2'><a class='tocxref'
href='#acknowledgements'>Appendix F: Acknowledgements</a> 

<ul class='toc'>
<li class='tocline3'><a class='tocxref'
href='#acknowledgements-Productions'>F.1. Production
Systems</a></li>
</ul>
</li>

<li class='tocline2'><a class='tocxref'
href='#glossary'>Glossary</a></li>

<li class='tocline2'><a class='tocxref'
href='#references'>References</a> 

<ul class='toc'>
<li class='tocline3'><a class='tocxref'
href='#references-References-Normative'>1. Normative
references</a></li>

<li class='tocline3'><a class='tocxref'
href='#references-References-Informative'>2. Informative
references</a></li>
</ul>
</li>

<li class='tocline2'><a class='tocxref'
href='#def-index'>Index</a></li>
</ul>
</div>

<!-- div1 TOC -->


<a name='copyright-notice'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='copyright-notice-Copyright-Notice' name='copyright-notice-Copyright-Notice'></a> 

<h1 id='copyright-notice-Copyright-Notice-h1' class='div1'>Copyright Notice</h1>

<p><b>Copyright &copy; 2000 <a href='http://www.w3.org/'>World Wide
Web Consortium</a>, (<a
href='http://www.lcs.mit.edu/'>Massachusetts Institute of
Technology</a>, <a href='http://www.inria.fr/'>Institut National de
Recherche en Informatique et en Automatique</a>, <a
href='http://www.keio.ac.jp/'>Keio University</a>). All Rights
Reserved.</b></p>

<p>This document is published under the <a
href='#copyright-notice-Copyright-notice-document'>W3C Document
Copyright Notice and License</a>. The bindings within this document
are published under the <a
href='#copyright-notice-Copyright-notice-software'>W3C Software
Copyright Notice and License</a>. The software license requires
"Notice of any changes or modifications to the W3C files, including
the date changes were made." Consequently, modified versions of the
DOM bindings must document that they do not conform to the W3C
standard; in the case of the IDL definitions, the pragma prefix can
no longer be 'w3c.org'; in the case of the Java Language binding,
the package names can no longer be in the 'org.w3c' package.</p>

<div class='div2'><a id='copyright-notice-Copyright-notice-document' name='copyright-notice-Copyright-notice-document'></a> 

<hr width='50' align='center' title='Area separator' />
<h2 id='copyright-notice-Copyright-notice-document-h2' class='div2'>W3C Document
Copyright Notice and License</h2>

<p><b>Note:</b> This section is a copy of the W3C Document Notice
and License and could be found at <a
href='http://www.w3.org/Consortium/Legal/copyright-documents-19990405'>
http://www.w3.org/Consortium/Legal/copyright-documents-19990405</a>.</p>

<p><b>Copyright &copy; 1994-2000 <a href='http://www.w3.org/'>World
Wide Web Consortium</a>, (<a
href='http://www.lcs.mit.edu/'>Massachusetts Institute of
Technology</a>, <a href='http://www.inria.fr/'>Institut National de
Recherche en Informatique et en Automatique</a>, <a
href='http://www.keio.ac.jp/'>Keio University</a>). All Rights
Reserved.</b></p>

<p><b>http://www.w3.org/Consortium/Legal/</b></p>

<p>Public documents on the W3C site are provided by the copyright
holders under the following license. The software or Document Type
Definitions (DTDs) associated with W3C specifications are governed
by the <a
href='http://www.w3.org/Consortium/Legal/copyright-software.html'>Software
Notice</a>. By using and/or copying this document, or the W3C
document from which this statement is linked, you (the licensee)
agree that you have read, understood, and will comply with the
following terms and conditions:</p>

<p>Permission to use, copy, and distribute the contents of this
document, or the W3C document from which this statement is linked,
in any medium for any purpose and without fee or royalty is hereby
granted, provided that you include the following on <em>ALL</em>
copies of the document, or portions thereof, that you use:</p>

<ol>
<li>A link or URL to the original W3C document.</li>

<li>The pre-existing copyright notice of the original author, or if
it doesn't exist, a notice of the form: "Copyright &copy;
[$date-of-document] <a href='http://www.w3.org/'>World Wide Web
Consortium</a>, (<a href='http://www.lcs.mit.edu/'>Massachusetts
Institute of Technology</a>, <a
href='http://www.inria.fr/'>Institut National de Recherche en
Informatique et en Automatique</a>, <a
href='http://www.keio.ac.jp/'>Keio University</a>). All Rights
Reserved. http://www.w3.org/Consortium/Legal/" (Hypertext is
preferred, but a textual representation is permitted.)</li>

<li><em>If it exists</em>, the STATUS of the W3C document.</li>
</ol>

<p>When space permits, inclusion of the full text of this
<b>NOTICE</b> should be provided. We request that authorship
attribution be provided in any software, documents, or other items
or products that you create pursuant to the implementation of the
contents of this document, or any portion thereof.</p>

<p>No right to create modifications or derivatives of W3C documents
is granted pursuant to this license. However, if additional
requirements (documented in the <a
href='http://www.w3.org/Consortium/Legal/IPR-FAQ.html'>Copyright
FAQ</a>) are satisfied, the right to create modifications or
derivatives is sometimes granted by the W3C to individuals
complying with those requirements.</p>

<p>THIS DOCUMENT IS PROVIDED "AS IS," AND COPYRIGHT HOLDERS MAKE NO
REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, BUT
NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS
OF THE DOCUMENT ARE SUITABLE FOR ANY PURPOSE; NOR THAT THE
IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ANY THIRD PARTY
PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.</p>

<p>COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT,
SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE
DOCUMENT OR THE PERFORMANCE OR IMPLEMENTATION OF THE CONTENTS
THEREOF.</p>

<p>The name and trademarks of copyright holders may NOT be used in
advertising or publicity pertaining to this document or its
contents without specific, written prior permission. Title to
copyright in this document will at all times remain with copyright
holders.</p>
</div>

<!-- div2 Copyright-notice-document -->
<div class='div2'><a id='copyright-notice-Copyright-notice-software' name='copyright-notice-Copyright-notice-software'></a> 

<hr width='50' align='center' title='Area separator' />
<h2 id='copyright-notice-Copyright-notice-software-h2' class='div2'>W3C Software
Copyright Notice and License</h2>

<p><b>Note:</b> This section is a copy of the W3C Software
Copyright Notice and License and could be found at <a
href='http://www.w3.org/Consortium/Legal/copyright-software-19980720'>
http://www.w3.org/Consortium/Legal/copyright-software-19980720</a></p>

<p><b>Copyright &copy; 1994-2000 <a href='http://www.w3.org/'>World
Wide Web Consortium</a>, (<a
href='http://www.lcs.mit.edu/'>Massachusetts Institute of
Technology</a>, <a href='http://www.inria.fr/'>Institut National de
Recherche en Informatique et en Automatique</a>, <a
href='http://www.keio.ac.jp/'>Keio University</a>). All Rights
Reserved.</b></p>

<p><b>http://www.w3.org/Consortium/Legal/</b></p>

<p>This W3C work (including software, documents, or other related
items) is being provided by the copyright holders under the
following license. By obtaining, using and/or copying this work,
you (the licensee) agree that you have read, understood, and will
comply with the following terms and conditions:</p>

<p>Permission to use, copy, and modify this software and its
documentation, with or without modification, for any purpose and
without fee or royalty is hereby granted, provided that you include
the following on ALL copies of the software and documentation or
portions thereof, including modifications, that you make:</p>

<ol>
<li>The full text of this NOTICE in a location viewable to users of
the redistributed or derivative work.</li>

<li>Any pre-existing intellectual property disclaimers. If none
exist, then a notice of the following form: "Copyright &copy;
[$date-of-software] <a href='http://www.w3.org/'>World Wide Web
Consortium</a>, (<a href='http://www.lcs.mit.edu/'>Massachusetts
Institute of Technology</a>, <a
href='http://www.inria.fr/'>Institut National de Recherche en
Informatique et en Automatique</a>, <a
href='http://www.keio.ac.jp/'>Keio University</a>). All Rights
Reserved. http://www.w3.org/Consortium/Legal/."</li>

<li>Notice of any changes or modifications to the W3C files,
including the date changes were made. (We recommend you provide
URIs to the location from which the code is derived.)</li>
</ol>

<p>THIS SOFTWARE AND DOCUMENTATION IS PROVIDED "AS IS," AND
COPYRIGHT HOLDERS MAKE NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO, WARRANTIES OF
MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
USE OF THE SOFTWARE OR DOCUMENTATION WILL NOT INFRINGE ANY THIRD
PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.</p>

<p>COPYRIGHT HOLDERS WILL NOT BE LIABLE FOR ANY DIRECT, INDIRECT,
SPECIAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF ANY USE OF THE
SOFTWARE OR DOCUMENTATION.</p>

<p>The name and trademarks of copyright holders may NOT be used in
advertising or publicity pertaining to the software without
specific, written prior permission. Title to copyright in this
software and any associated documentation will at all times remain
with copyright holders.</p>
</div>

<!-- div2 Copyright-notice-software --></div>

<!-- div1 Copyright-Notice -->


<a name='introduction'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='introduction-Introduction' name='introduction-Introduction'></a> 

<h1 id='introduction-Introduction-h1' class='div1'>What is the Document Object
Model?</h1>

<dl>
<dt><i>Editors</i></dt>

<dd>Philippe Le H&eacute;garet, W3C</dd>

<dd>Lauren Wood, SoftQuad Software Inc., WG Chair</dd>

<dd>Jonathan Robie, Texcel (for DOM Level 1)</dd>
</dl>

<div class='div2'><a id='introduction-ID-E7C3082' name='introduction-ID-E7C3082'></a> 

<h2 id='introduction-ID-E7C3082-h2' class='div2'>Introduction</h2>

<p>The Document Object Model (DOM) is an application programming
interface (<a href='#glossary-dt-API'><em>API</em></a>) for
valid <a href='#glossary-dt-HTML'><em>HTML</em></a> and
well-formed <a href='#glossary-dt-XML'><em>XML</em></a>
documents. It defines the logical structure of documents and the
way a document is accessed and manipulated. In the DOM
specification, the term "document" is used in the broad sense -
increasingly, XML is being used as a way of representing many
different kinds of information that may be stored in diverse
systems, and much of this would traditionally be seen as data
rather than as documents. Nevertheless, XML presents this data as
documents, and the DOM may be used to manage this data.</p>

<p>With the Document Object Model, programmers can build documents,
navigate their structure, and add, modify, or delete elements and
content. Anything found in an HTML or XML document can be accessed,
changed, deleted, or added using the Document Object Model, with a
few exceptions - in particular, the DOM <a
href='#glossary-dt-interface'><em>interfaces</em></a> for the
XML internal and external subsets have not yet been specified.</p>

<p>As a W3C specification, one important objective for the Document
Object Model is to provide a standard programming interface that
can be used in a wide variety of environments and <a
href='#glossary-dt-application'><em>applications</em></a>. The
DOM is designed to be used with any programming language. In order
to provide a precise, language-independent specification of the DOM
interfaces, we have chosen to define the specifications in Object
Management Group (OMG) IDL [<a class='noxref'
href='#references-OMGIDL'>OMGIDL</a>], as defined in the CORBA
2.3.1 specification [<a class='noxref'
href='#references-CORBA'>CORBA</a>]. In addition to the OMG IDL
specification, we provide <a
href='#glossary-dt-lang-binding'><em>language bindings</em></a>
for Java [<a class='noxref' href='#references-Java'>Java</a>]
and ECMAScript [<a class='noxref'
href='#references-ECMAScript'>ECMAScript</a>] (an
industry-standard scripting language based on JavaScript [<a
class='noxref' href='#references-JavaScript'>JavaScript</a>]
and JScript [<a class='noxref'
href='#references-JScript'>JScript</a>]).</p>

<p><b>Note:</b> OMG IDL is used only as a language-independent and
implementation-neutral way to specify <a
href='#glossary-dt-interface'><em>interfaces</em></a>. Various
other IDLs could have been used ([<a class='noxref'
href='#references-COM'>COM</a>], [<a class='noxref'
href='#references-JavaIDL'>JavaIDL</a>], [<a class='noxref'
href='#references-MSIDL'>MIDL</a>], ...). In general, IDLs are
designed for specific computing environments. The Document Object
Model can be implemented in any computing environment, and does not
require the object binding runtimes generally associated with such
IDLs.</p>
</div>

<!-- div2 ID-E7C3082 -->
<div class='div2'><a id='introduction-ID-E7C30821' name='introduction-ID-E7C30821'></a> 

<h2 id='introduction-ID-E7C30821-h2' class='div2'>What the Document Object Model
is</h2>

<p>The DOM is a programming <a
href='#glossary-dt-API'><em>API</em></a> for documents. It is
based on an object structure that closely resembles the structure
of the documents it <a
href='#glossary-dt-model'><em>models</em></a>. For instance,
consider this table, taken from an HTML document:</p>

<div class='code-block'>
<pre>
      &lt;TABLE&gt;
      &lt;TBODY&gt; 
      &lt;TR&gt; 
      &lt;TD&gt;Shady Grove&lt;/TD&gt;
      &lt;TD&gt;Aeolian&lt;/TD&gt; 
      &lt;/TR&gt; 
      &lt;TR&gt;
      &lt;TD&gt;Over the River, Charlie&lt;/TD&gt;        
      &lt;TD&gt;Dorian&lt;/TD&gt; 
      &lt;/TR&gt; 
      &lt;/TBODY&gt;
      &lt;/TABLE&gt;
   
</pre>
</div>

<p>A graphical representation of the DOM of the example table
is:<br />
</p>

<div align='center'>
<hr width='90%' size='2' />
<img src='./images/table.gif'
alt='graphical representation of the DOM of the example table' /> 

<hr width='90%' size='2' />
<b>graphical representation of the DOM of the example table</b> 

<hr width='90%' size='2' />
</div>

<p>In the DOM, documents have a logical structure which is very
much like a tree; to be more precise, which is like a "forest" or
"grove", which can contain more than one tree. Each document
contains zero or one doctype nodes, one root element node, and zero
or more comments or processing instructions; the root element
serves as the root of the element tree for the document. However,
the DOM does not specify that documents must be
<em>implemented</em> as a tree or a grove, nor does it specify how
the relationships among objects be implemented. The DOM is a
logical model that may be implemented in any convenient manner. In
this specification, we use the term <em>structure model</em> to
describe the tree-like representation of a document. We also use
the term "tree" when referring to the arrangement of those
information items which can be reached by using "tree-walking"
methods; (this does not include attributes). One important property
of DOM structure models is <em>structural isomorphism</em>: if any
two Document Object Model implementations are used to create a
representation of the same document, they will create the same
structure model, in accordance with the XML Information Set [<a
class='noxref' href='#references-InfoSet'>Infoset</a>].</p>

<p><b>Note:</b> There may be some variations depending on the
parser being used to build the DOM. For instance, the DOM may not
contain whitespaces in element content if the parser discards
them.</p>

<p>The name "Document Object Model" was chosen because it is an "<a
href='#glossary-dt-object-model'><em>object model</em></a>" in
the traditional object oriented design sense: documents are modeled
using objects, and the model encompasses not only the structure of
a document, but also the behavior of a document and the objects of
which it is composed. In other words, the nodes in the above
diagram do not represent a data structure, they represent objects,
which have functions and identity. As an object model, the DOM
identifies:</p>

<ul>
<li>the interfaces and objects used to represent and manipulate a
document</li>

<li>the semantics of these interfaces and objects - including both
behavior and attributes</li>

<li>the relationships and collaborations among these interfaces and
objects</li>
</ul>

<p>The structure of SGML documents has traditionally been
represented by an abstract <a
href='#glossary-dt-datamodel'><em>data model</em></a>, not by
an object model. In an abstract <a
href='#glossary-dt-datamodel'><em>data model</em></a>, the
model is centered around the data. In object oriented programming
languages, the data itself is encapsulated in objects that hide the
data, protecting it from direct external manipulation. The
functions associated with these objects determine how the objects
may be manipulated, and they are part of the object model.</p>
</div>

<!-- div2 ID-E7C30821 -->
<div class='div2'><a id='introduction-ID-E7C30822' name='introduction-ID-E7C30822'></a> 

<h2 id='introduction-ID-E7C30822-h2' class='div2'>What the Document Object Model
is not</h2>

<p>This section is designed to give a more precise understanding of
the DOM by distinguishing it from other systems that may seem to be
like it.</p>

<ul>
<li>The Document Object Model is not a binary specification. DOM
programs written in the same language binding will be source code
compatible across platforms, but the DOM does not define any form
of binary interoperability.</li>

<li>The Document Object Model is not a way of persisting objects to
XML or HTML. Instead of specifying how objects may be represented
in XML, the DOM specifies how XML and HTML documents are
represented as objects, so that they may be used in object oriented
programs.</li>

<li>The Document Object Model is not a set of data structures; it
is an <a href='#glossary-dt-object-model'><em>object
model</em></a> that specifies interfaces. Although this document
contains diagrams showing parent/child relationships, these are
logical relationships defined by the programming interfaces, not
representations of any particular internal data structures.</li>

<li>The Document Object Model does not define what information in a
document is relevant or how information in a document is
structured. For XML, this is specified by the W3C XML Information
Set [<a class='noxref' href='#references-InfoSet'>Infoset</a>].
The DOM is simply an <a
href='#glossary-dt-API'><em>API</em></a> to this information
set.</li>

<li>The Document Object Model, despite its name, is not a
competitor to the Component Object Model (COM). COM, like CORBA, is
a language independent way to specify interfaces and objects; the
DOM is a set of interfaces and objects designed for managing HTML
and XML documents. The DOM may be implemented using
language-independent systems like COM or CORBA; it may also be
implemented using language-specific bindings like the Java or
ECMAScript bindings specified in this document.</li>
</ul>
</div>

<!-- div2 ID-E7C30822 -->
<div class='div2'><a id='introduction-ID-E7C30823' name='introduction-ID-E7C30823'></a> 

<h2 id='introduction-ID-E7C30823-h2' class='div2'>Where the Document Object
Model came from</h2>

<p>The DOM originated as a specification to allow JavaScript
scripts and Java programs to be portable among Web browsers.
"Dynamic HTML" was the immediate ancestor of the Document Object
Model, and it was originally thought of largely in terms of
browsers. However, when the DOM Working Group was formed at W3C, it
was also joined by vendors in other domains, including HTML or XML
editors and document repositories. Several of these vendors had
worked with SGML before XML was developed; as a result, the DOM has
been influenced by SGML Groves and the HyTime standard. Some of
these vendors had also developed their own object models for
documents in order to provide an API for SGML/XML editors or
document repositories, and these object models have also influenced
the DOM.</p>
</div>

<!-- div2 ID-E7C30823 -->
<div class='div2'><a id='introduction-ID-E7C30824' name='introduction-ID-E7C30824'></a> 

<h2 id='introduction-ID-E7C30824-h2' class='div2'>Entities and the DOM Core</h2>

<p>In the fundamental DOM interfaces, there are no objects
representing entities. Numeric character references, and references
to the pre-defined entities in HTML and XML, are replaced by the
single character that makes up the entity's replacement. For
example, in:</p>

<div class='code-block'>
<pre>
        &lt;p&gt;This is a dog &amp;amp; a cat&lt;/p&gt;        
     
</pre>
</div>

<p>the "&amp;amp;" will be replaced by the character "&amp;", and
the text in the P element will form a single continuous sequence of
characters. Since numeric character references and pre-defined
entities are not recognized as such in CDATA sections, or in the
SCRIPT and STYLE elements in HTML, they are not replaced by the
single character they appear to refer to. If the example above were
enclosed in a CDATA section, the "&amp;amp;" would not be replaced
by "&amp;"; neither would the &lt;p&gt; be recognized as a start
tag. The representation of general entities, both internal and
external, are defined within the extended (XML) interfaces of DOM
Level 1 [<a class='noxref' href='#references-DOM-Level-1'>DOM
Level 1</a>].</p>

<p>Note: When a DOM representation of a document is serialized as
XML or HTML text, applications will need to check each character in
text data to see if it needs to be escaped using a numeric or
pre-defined entity. Failing to do so could result in invalid HTML
or XML. Also, <a
href='#glossary-dt-implementation'><em>implementations</em></a>
should be aware of the fact that serialization into a character
encoding ("charset") that does not fully cover ISO 10646 may fail
if there are characters in markup or CDATA sections that are not
present in the encoding.</p>
</div>

<!-- div2 ID-E7C30824 -->
<div class='div2'><a id='introduction-ID-Conformance' name='introduction-ID-Conformance'></a>


<h2 id='introduction-ID-Conformance-h2' class='div2'>Conformance</h2>

<p>This section explains the different levels of conformance to DOM
Level 2. DOM Level 2 consists of 14 modules. It is possible to
conform to DOM Level 2, or to a DOM Level 2 module.</p>

<p>An implementation is DOM Level 2 conformant if it supports the
Core module defined in this document (see <a
href='#core-ID-BBACDC08'>Fundamental Interfaces</a>). An
implementation conforms to a DOM Level 2 module if it supports all
the interfaces for that module and the associated semantics.</p>

<p>Here is the complete list of DOM Level 2.0 modules and the
features used by them. Feature names are case-insensitive.</p>

<dl>
<dt><b>Core module</b></dt>

<dd>defines the feature <a
href='#core-ID-BBACDC08'><em>"Core"</em></a>.</dd>

<dt><b>XML module</b></dt>

<dd>defines the feature <a
href='#core-ID-E067D597'><em>"XML"</em></a>.</dd>

<dt><b>HTML module</b></dt>

<dd>defines the feature "HTML". (see [<a class='noxref'
href='#references-DOMHTML-inf'>DOM Level 2 HTML</a>]). 

<p><b>Note:</b> At time of publication, this DOM Level 2 module is
not yet a W3C Recommendation.</p>
</dd>

<dt><b>Views module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Views/views.html'><em>"Views"</em></a>
in [<a class='noxref' href='#references-DOMViews-inf'>DOM Level
2 Views</a>].</dd>

<dt><b>Style Sheets module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html'><em>"StyleSheets"</em></a>
in [<a class='noxref' href='#references-DOMStyleSheets-inf'>DOM
Level 2 Style Sheets</a>].</dd>

<dt><b>CSS module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Style/css.html'><em>"CSS"</em></a>
in [<a class='noxref' href='#references-DOMCSS-inf'>DOM Level 2
CSS</a>].</dd>

<dt><b>CSS2 module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Style/css.html'><em>"CSS2"</em></a>
in [<a class='noxref' href='#references-DOMCSS-inf'>DOM Level 2
CSS</a>].</dd>

<dt><b>Events module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Events/events.html'><em>"Events"</em></a>
in [<a class='noxref' href='#references-DOMEvents-inf'>DOM
Level 2 Events</a>].</dd>

<dt><b>User interface Events module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Events/events.html'><em>"UIEvents"</em></a>
in [<a class='noxref' href='#references-DOMEvents-inf'>DOM
Level 2 Events</a>].</dd>

<dt><b>Mouse Events module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Events/events.html'><em>"MouseEvents"</em></a>
in [<a class='noxref' href='#references-DOMEvents-inf'>DOM
Level 2 Events</a>].</dd>

<dt><b>Mutation Events module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Events/events.html'><em>"MutationEvents"</em></a>
in [<a class='noxref' href='#references-DOMEvents-inf'>DOM
Level 2 Events</a>].</dd>

<dt><b>HTML Events module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Events/events.html'><em>"HTMLEvents"</em></a>
in [<a class='noxref' href='#references-DOMEvents-inf'>DOM
Level 2 Events</a>].</dd>

<dt><b>Range module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html'>
<em>"Range"</em></a> in [<a class='noxref'
href='#references-DOMRange-inf'>DOM Level 2 Range</a>].</dd>

<dt><b>Traversal module</b></dt>

<dd>defines the feature <a
href='http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal.html'>
<em>"Traversal"</em></a> in [<a class='noxref'
href='#references-DOMTraversal-inf'>DOM Level 2
Traversal</a>].</dd>
</dl>

<p>A DOM implementation must not return <code>"true"</code> to the
<code>hasFeature(feature, version)</code> <a
href='#glossary-dt-method'><em>method</em></a> of the <a
href='#core-ID-102161490'><code>DOMImplementation</code></a>
interface for that feature unless the implementation conforms to
that module. The <code>version</code> number for all features used
in DOM Level 2.0 is "2.0".</p>
</div>

<!-- div2 ID-Conformance -->
<div class='div2'><a id='introduction-ID-E7C30826' name='introduction-ID-E7C30826'></a> 

<h2 id='introduction-ID-E7C30826-h2' class='div2'>DOM Interfaces and DOM
Implementations</h2>

<p>The DOM specifies interfaces which may be used to manage XML or
HTML documents. It is important to realize that these interfaces
are an abstraction - much like "abstract base classes" in C++, they
are a means of specifying a way to access and manipulate an
application's internal representation of a document. Interfaces do
not imply a particular concrete implementation. Each DOM
application is free to maintain documents in any convenient
representation, as long as the interfaces shown in this
specification are supported. Some DOM implementations will be
existing programs that use the DOM interfaces to access software
written long before the DOM specification existed. Therefore, the
DOM is designed to avoid implementation dependencies; in
particular,</p>

<ol>
<li>Attributes defined in the IDL do not imply concrete objects
which must have specific data members - in the language bindings,
they are translated to a pair of get()/set() functions, not to a
data member. Read-only attributes have only a get() function in the
language bindings.</li>

<li>DOM applications may provide additional interfaces and objects
not found in this specification and still be considered DOM
conformant.</li>

<li>Because we specify interfaces and not the actual objects that
are to be created, the DOM cannot know what constructors to call
for an implementation. In general, DOM users call the createX()
methods on the Document class to create document structures, and
DOM implementations create their own internal representations of
these structures in their implementations of the createX()
functions.</li>
</ol>

<p>The Level 1 interfaces were extended to provide both Level 1 and
Level 2 functionality.</p>

<p>DOM implementations in languages other than Java or ECMAScript
may choose bindings that are appropriate and natural for their
language and run time environment. For example, some systems may
need to create a Document2 class which inherits from Document and
contains the new methods and attributes.</p>

<p>DOM Level 2 does not specify multithreading mechanisms.</p>
</div>

<!-- div2 ID-E7C30826 --></div>

<!-- div1 Introduction -->


<a name='core'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='core-Core' name='core-Core'></a> 

<h1 id='core-Core-h1' class='div1'>1. Document Object Model Core</h1>

<dl>
<dt><i>Editors</i></dt>

<dd>Arnaud Le Hors, IBM</dd>

<dd>Gavin Nicol, Inso EPS (for DOM Level 1)</dd>

<dd>Lauren Wood, SoftQuad, Inc. (for DOM Level 1)</dd>

<dd>Mike Champion, ArborText (for DOM Level 1 from November 20,
1997)</dd>

<dd>Steve Byrne, JavaSoft (for DOM Level 1 until November 19,
1997)</dd>
</dl>

<div class='noprint'>
<h2 id='core-table-of-contents'>Table of contents</h2>

<ul class='toc'>
<li class='tocline3'><a class='tocxref' href='#core-ID-1590626201'>1.1.
Overview of the DOM Core Interfaces</a> 

<ul class='toc'>
<li class='tocline4'><a class='tocxref'
href='#core-ID-1590626202'>1.1.1. The DOM Structure Model</a></li>

<li class='tocline4'><a class='tocxref' href='#core-ID-249F15BA'>1.1.2.
Memory Management</a></li>

<li class='tocline4'><a class='tocxref' href='#core-ID-45A944CB'>1.1.3.
Naming Conventions</a></li>

<li class='tocline4'><a class='tocxref' href='#core-ID-1CED5498'>1.1.4.
Inheritance vs. Flattened Views of the API</a></li>

<li class='tocline4'><a class='tocxref' href='#core-ID-C74D1578'>1.1.5.
The DOMString type</a></li>

<li class='tocline4'><a class='tocxref'
href='#core-Core-DOMTimeStamp'>1.1.6. The DOMTimeStamp type</a></li>

<li class='tocline4'><a class='tocxref' href='#core-ID-5DFED1F0'>1.1.7.
String comparisons in the DOM</a></li>

<li class='tocline4'><a class='tocxref'
href='#core-Namespaces-Considerations'>1.1.8. XML Namespaces</a></li>
</ul>
</li>

<li class='tocline3'><a class='tocxref' href='#core-ID-BBACDC08'>1.2.
Fundamental Interfaces</a> 

<ul class='toc'>
<li class='tocline4'><a href='#core-ID-17189187'>DOMException</a>, <a
href='#core-ID-258A00AF'>ExceptionCode</a>, <a
href='#core-ID-102161490'>DOMImplementation</a>, <a
href='#core-ID-B63ED1A3'>DocumentFragment</a>, <a
href='#core-i-Document'>Document</a>, <a href='#core-ID-1950641247'>Node</a>,
<a href='#core-ID-536297177'>NodeList</a>, <a
href='#core-ID-1780488922'>NamedNodeMap</a>, <a
href='#core-ID-FF21A306'>CharacterData</a>, <a
href='#core-ID-637646024'>Attr</a>, <a href='#core-ID-745549614'>Element</a>,
<a href='#core-ID-1312295772'>Text</a>, <a
href='#core-ID-1728279322'>Comment</a></li>
</ul>
</li>

<li class='tocline3'><a class='tocxref' href='#core-ID-E067D597'>1.3.
Extended Interfaces</a> 

<ul class='toc'>
<li class='tocline4'><a href='#core-ID-667469212'>CDATASection</a>, <a
href='#core-ID-412266927'>DocumentType</a>, <a
href='#core-ID-5431D1B9'>Notation</a>, <a
href='#core-ID-527DCFF2'>Entity</a>, <a
href='#core-ID-11C98490'>EntityReference</a>, <a
href='#core-ID-1004215813'>ProcessingInstruction</a></li>
</ul>
</li>
</ul>
</div>

<div class='div2'><a id='core-ID-1590626201' name='core-ID-1590626201'></a> 

<h2 id='core-ID-1590626201-h2' class='div2'>1.1. Overview of the DOM
Core Interfaces</h2>

<p>This section defines a set of objects and interfaces for
accessing and manipulating document objects. The functionality
specified in this section (the <em>Core</em> functionality) is
sufficient to allow software developers and web script authors to
access and manipulate parsed HTML and XML content inside conforming
products. The DOM Core API also allows creation and population of a
<a href='#core-i-Document'><code>Document</code></a> object
using only DOM API calls; loading a <a class='noxref'
href='#core-i-Document'><code>Document</code></a> and saving it
persistently is left to the product that implements the DOM
API.</p>

<div class='div3'><a id='core-ID-1590626202' name='core-ID-1590626202'></a> 

<h3 id='core-ID-1590626202-h3' class='div3'>1.1.1. The DOM Structure
Model</h3>

<p>The DOM presents documents as a hierarchy of <a
href='#core-ID-1950641247'><code>Node</code></a> objects that
also implement other, more specialized interfaces. Some types of
nodes may have <a href='#glossary-dt-child'><em>child</em></a>
nodes of various types, and others are leaf nodes that cannot have
anything below them in the document structure. For XML and HTML,
the node types, and which node types they may have as children, are
as follows:</p>

<ul>
<li><a href='#core-i-Document'><code>Document</code></a> -- <a
href='#core-ID-745549614'><code>Element</code></a> (maximum of
one), <a
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a>,
<a href='#core-ID-1728279322'><code>Comment</code></a>, <a
href='#core-ID-412266927'><code>DocumentType</code></a>
(maximum of one)</li>

<li><a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a> --
<a href='#core-ID-745549614'><code>Element</code></a>, <a
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a>,
<a href='#core-ID-1728279322'><code>Comment</code></a>, <a
href='#core-ID-1312295772'><code>Text</code></a>, <a
href='#core-ID-667469212'><code>CDATASection</code></a>, <a
href='#core-ID-11C98490'><code>EntityReference</code></a></li>

<li><a href='#core-ID-412266927'><code>DocumentType</code></a>
-- no children</li>

<li><a
href='#core-ID-11C98490'><code>EntityReference</code></a> -- <a
href='#core-ID-745549614'><code>Element</code></a>, <a
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a>,
<a href='#core-ID-1728279322'><code>Comment</code></a>, <a
href='#core-ID-1312295772'><code>Text</code></a>, <a
href='#core-ID-667469212'><code>CDATASection</code></a>, <a
class='noxref'
href='#core-ID-11C98490'><code>EntityReference</code></a></li>

<li><a href='#core-ID-745549614'><code>Element</code></a> -- <a
class='noxref'
href='#core-ID-745549614'><code>Element</code></a>, <a
href='#core-ID-1312295772'><code>Text</code></a>, <a
href='#core-ID-1728279322'><code>Comment</code></a>, <a
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a>,
<a href='#core-ID-667469212'><code>CDATASection</code></a>, <a
href='#core-ID-11C98490'><code>EntityReference</code></a></li>

<li><a href='#core-ID-637646024'><code>Attr</code></a> -- <a
href='#core-ID-1312295772'><code>Text</code></a>, <a
href='#core-ID-11C98490'><code>EntityReference</code></a></li>

<li><a
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a>
-- no children</li>

<li><a href='#core-ID-1728279322'><code>Comment</code></a> --
no children</li>

<li><a href='#core-ID-1312295772'><code>Text</code></a> -- no
children</li>

<li><a href='#core-ID-667469212'><code>CDATASection</code></a>
-- no children</li>

<li><a href='#core-ID-527DCFF2'><code>Entity</code></a> -- <a
href='#core-ID-745549614'><code>Element</code></a>, <a
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a>,
<a href='#core-ID-1728279322'><code>Comment</code></a>, <a
href='#core-ID-1312295772'><code>Text</code></a>, <a
href='#core-ID-667469212'><code>CDATASection</code></a>, <a
href='#core-ID-11C98490'><code>EntityReference</code></a></li>

<li><a href='#core-ID-5431D1B9'><code>Notation</code></a> -- no
children</li>
</ul>

<p>The DOM also specifies a <a
href='#core-ID-536297177'><code>NodeList</code></a> interface
to handle ordered lists of <a
href='#core-ID-1950641247'><code>Nodes</code></a>, such as the
children of a <a
href='#core-ID-1950641247'><code>Node</code></a>, or the <a
href='#glossary-dt-element'><em>elements</em></a> returned by
the <code>getElementsByTagName</code> method of the <a
href='#core-ID-745549614'><code>Element</code></a> interface,
and also a <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>
interface to handle unordered sets of nodes referenced by their
name attribute, such as the attributes of an <a class='noxref'
href='#core-ID-745549614'><code>Element</code></a>. <a id='core-td-live' name='core-td-live'></a> <a
href='#core-ID-536297177'><code>NodeList</code></a> and <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>
objects in the DOM are <i>live</i>; that is, changes to the
underlying document structure are reflected in all relevant <a
class='noxref'
href='#core-ID-536297177'><code>NodeList</code></a> and <a
class='noxref'
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>
objects. For example, if a DOM user gets a <a class='noxref'
href='#core-ID-536297177'><code>NodeList</code></a> object
containing the children of an <a
href='#core-ID-745549614'><code>Element</code></a>, then
subsequently adds more children to that <a
href='#glossary-dt-element'><em>element</em></a> (or removes
children, or modifies them), those changes are automatically
reflected in the <a class='noxref'
href='#core-ID-536297177'><code>NodeList</code></a>, without
further action on the user's part. Likewise, changes to a <a
href='#core-ID-1950641247'><code>Node</code></a> in the tree
are reflected in all references to that <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> in <a
class='noxref'
href='#core-ID-536297177'><code>NodeList</code></a> and <a
class='noxref'
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>
objects.</p>

<p>Finally, the interfaces <a
href='#core-ID-1312295772'><code>Text</code></a>, <a
href='#core-ID-1728279322'><code>Comment</code></a>, and <a
href='#core-ID-667469212'><code>CDATASection</code></a> all
inherit from the <a
href='#core-ID-FF21A306'><code>CharacterData</code></a>
interface.</p>
</div>

<!-- div3 ID-1590626202 -->
<div class='div3'><a id='core-ID-249F15BA' name='core-ID-249F15BA'></a> 

<h3 id='core-ID-249F15BA-h3' class='div3'>1.1.2. Memory Management</h3>

<p>Most of the APIs defined by this specification are
<em>interfaces</em> rather than classes. That means that an
implementation need only expose methods with the defined names and
specified operation, not implement classes that correspond directly
to the interfaces. This allows the DOM APIs to be implemented as a
thin veneer on top of legacy applications with their own data
structures, or on top of newer applications with different class
hierarchies. This also means that ordinary constructors (in the
Java or C++ sense) cannot be used to create DOM objects, since the
underlying objects to be constructed may have little relationship
to the DOM interfaces. The conventional solution to this in
object-oriented design is to define <em>factory</em> methods that
create instances of objects that implement the various interfaces.
Objects implementing some interface "X" are created by a
"createX()" method on the <a
href='#core-i-Document'><code>Document</code></a> interface;
this is because all DOM objects live in the context of a specific
Document.</p>

<p>The DOM Level 2 API does <em>not</em> define a standard way to
create <a
href='#core-ID-102161490'><code>DOMImplementation</code></a>
objects; DOM implementations must provide some proprietary way of
bootstrapping these DOM interfaces, and then all other objects can
be built from there.</p>

<p>The Core DOM APIs are designed to be compatible with a wide
range of languages, including both general-user scripting languages
and the more challenging languages used mostly by professional
programmers. Thus, the DOM APIs need to operate across a variety of
memory management philosophies, from language bindings that do not
expose memory management to the user at all, through those (notably
Java) that provide explicit constructors but provide an automatic
garbage collection mechanism to automatically reclaim unused
memory, to those (especially C/C++) that generally require the
programmer to explicitly allocate object memory, track where it is
used, and explicitly free it for re-use. To ensure a consistent API
across these platforms, the DOM does not address memory management
issues at all, but instead leaves these for the implementation.
Neither of the explicit language bindings defined by the DOM API
(for <a href='#glossary-dt-ECMAScript'><em>ECMAScript</em></a>
and Java) require any memory management methods, but DOM bindings
for other languages (especially C or C++) may require such support.
These extensions will be the responsibility of those adapting the
DOM API to a specific language, not the DOM Working Group.</p>
</div>

<!-- div3 ID-249F15BA -->
<div class='div3'><a id='core-ID-45A944CB' name='core-ID-45A944CB'></a> 

<h3 id='core-ID-45A944CB-h3' class='div3'>1.1.3. Naming Conventions</h3>

<p>While it would be nice to have attribute and method names that
are short, informative, internally consistent, and familiar to
users of similar APIs, the names also should not clash with the
names in legacy APIs supported by DOM implementations. Furthermore,
both OMG IDL and <code>ECMAScript</code> have significant
limitations in their ability to disambiguate names from different
namespaces that make it difficult to avoid naming conflicts with
short, familiar names. So, DOM names tend to be long and
descriptive in order to be unique across all environments.</p>

<p>The Working Group has also attempted to be internally consistent
in its use of various terms, even though these may not be common
distinctions in other APIs. For example, the DOM API uses the
method name "remove" when the method changes the structural model,
and the method name "delete" when the method gets rid of something
inside the structure model. The thing that is deleted is not
returned. The thing that is removed may be returned, when it makes
sense to return it.</p>
</div>

<!-- div3 ID-45A944CB -->
<div class='div3'><a id='core-ID-1CED5498' name='core-ID-1CED5498'></a> 

<h3 id='core-ID-1CED5498-h3' class='div3'>1.1.4. Inheritance vs.
Flattened Views of the API</h3>

<p>The DOM Core <a href='#glossary-dt-API'><em>APIs</em></a>
present two somewhat different sets of interfaces to an XML/HTML
document: one presenting an "object oriented" approach with a
hierarchy of <a
href='#glossary-dt-inheritance'><em>inheritance</em></a>, and a
"simplified" view that allows all manipulation to be done via the
<a href='#core-ID-1950641247'><code>Node</code></a> interface
without requiring casts (in Java and other C-like languages) or
query interface calls in <a
href='#glossary-dt-COM'><em>COM</em></a> environments. These
operations are fairly expensive in Java and COM, and the DOM may be
used in performance-critical environments, so we allow significant
functionality using just the <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> interface.
Because many other users will find the <a
href='#glossary-dt-inheritance'><em>inheritance</em></a>
hierarchy easier to understand than the "everything is a <a
class='noxref'
href='#core-ID-1950641247'><code>Node</code></a>" approach to
the DOM, we also support the full higher-level interfaces for those
who prefer a more object-oriented <a
href='#glossary-dt-API'><em>API</em></a>.</p>

<p>In practice, this means that there is a certain amount of
redundancy in the <a href='#glossary-dt-API'><em>API</em></a>.
The Working Group considers the "<a
href='#glossary-dt-inheritance'><em>inheritance</em></a>"
approach the primary view of the API, and the full set of
functionality on <a
href='#core-ID-1950641247'><code>Node</code></a> to be "extra"
functionality that users may employ, but that does not eliminate
the need for methods on other interfaces that an object-oriented
analysis would dictate. (Of course, when the O-O analysis yields an
attribute or method that is identical to one on the <a
class='noxref' href='#core-ID-1950641247'><code>Node</code></a>
interface, we don't specify a completely redundant one.) Thus, even
though there is a generic <code>nodeName</code> attribute on the <a
class='noxref' href='#core-ID-1950641247'><code>Node</code></a>
interface, there is still a <code>tagName</code> attribute on the
<a href='#core-ID-745549614'><code>Element</code></a>
interface; these two attributes must contain the same value, but
the it is worthwhile to support both, given the different
constituencies the DOM <a
href='#glossary-dt-API'><em>API</em></a> must satisfy.</p>
</div>

<!-- div3 ID-1CED5498 -->
<div class='div3'><a id='core-ID-C74D1578' name='core-ID-C74D1578'></a> 

<h3 id='core-ID-C74D1578-h3' class='div3'>1.1.5. The <a
href='#core-DOMString'><code>DOMString</code></a> type</h3>

<p>To ensure interoperability, the DOM specifies the following:</p>

<ul>
<li>
<dl>
<dt><b>Type Definition <i><a id='core-DOMString' name='core-DOMString'>DOMString</a></i></b></dt>

<dd>
<p>A <a href='#core-DOMString'><code>DOMString</code></a> is a
sequence of <a href='#glossary-dt-16-bit-unit'><em>16-bit
units</em></a>.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
valuetype DOMString sequence&lt;unsigned short&gt;;
</pre>
</div>

<br />
</dd>
</dl>
</dd>
</dl>
</li>

<li>Applications must encode <a
href='#core-DOMString'><code>DOMString</code></a> using UTF-16
(defined in [<a class='noxref'
href='#references-Unicode'>Unicode</a>] and Amendment 1 of [<a
class='noxref' href='#references-ISO10646'>ISO/IEC
10646</a>]).<br />
The UTF-16 encoding was chosen because of its widespread industry
practice. Note that for both HTML and XML, the document character
set (and therefore the notation of numeric character references) is
based on UCS [ISO-10646]. A single numeric character reference in a
source document may therefore in some cases correspond to two
16-bit units in a <a
href='#core-DOMString'><code>DOMString</code></a> (a high
surrogate and a low surrogate). 

<p><b>Note:</b> Even though the DOM defines the name of the string
type to be <a
href='#core-DOMString'><code>DOMString</code></a>, bindings may
use different names. For example for Java, <a class='noxref'
href='#core-DOMString'><code>DOMString</code></a> is bound to
the <code>String</code> type because it also uses UTF-16 as its
encoding.</p>
</li>
</ul>

<p><b>Note:</b> As of August 2000, the OMG IDL specification ([<a
class='noxref' href='#references-OMGIDL'>OMGIDL</a>]) included
a <code>wstring</code> type. However, that definition did not meet
the interoperability criteria of the DOM <a
href='#glossary-dt-API'><em>API</em></a> since it relied on
negotiation to decide the width and encoding of a character.</p>
</div>

<!-- div3 ID-C74D1578 -->
<div class='div3'><a id='core-Core-DOMTimeStamp' name='core-Core-DOMTimeStamp'></a> 

<h3 id='core-Core-DOMTimeStamp-h3' class='div3'>1.1.6. The <a
href='#core-DOMTimeStamp'><code>DOMTimeStamp</code></a>
type</h3>

<p>To ensure interoperability, the DOM specifies the following:</p>

<ul>
<li>
<dl>
<dt><b>Type Definition <i><a id='core-DOMTimeStamp' name='core-DOMTimeStamp'>DOMTimeStamp</a></i></b></dt>

<dd>
<p>A <a href='#core-DOMTimeStamp'><code>DOMTimeStamp</code></a>
represents a number of milliseconds.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
typedef unsigned long long DOMTimeStamp;
</pre>
</div>

<br />
</dd>
</dl>
</dd>
</dl>
</li>

<li>
<p><b>Note:</b> Even though the DOM uses the type <a
href='#core-DOMTimeStamp'><code>DOMTimeStamp</code></a>,
bindings may use different types. For example for Java, <a
class='noxref'
href='#core-DOMTimeStamp'><code>DOMTimeStamp</code></a> is
bound to the <code>long</code> type. In ECMAScript,
<code>TimeStamp</code> is bound to the <code>Date</code> type
because the range of the <code>integer</code> type is too
small.</p>
</li>
</ul>
</div>

<!-- div3 Core-DOMTimeStamp -->
<div class='div3'><a id='core-ID-5DFED1F0' name='core-ID-5DFED1F0'></a> 

<h3 id='core-ID-5DFED1F0-h3' class='div3'>1.1.7. String comparisons in
the DOM</h3>

<p>The DOM has many interfaces that imply string matching. HTML
processors generally assume an uppercase (less often, lowercase)
normalization of names for such things as <a
href='#glossary-dt-element'><em>elements</em></a>, while XML is
explicitly case sensitive. For the purposes of the DOM, string
matching is performed purely by binary <a
href='#glossary-dt-string-compare'><em>comparison</em></a> of
the <a href='#glossary-dt-16-bit-unit'><em>16-bit
units</em></a> of the <a
href='#core-DOMString'><code>DOMString</code></a>. In addition,
the DOM assumes that any case normalizations take place in the
processor, <em>before</em> the DOM structures are built.</p>

<p><b>Note:</b> Besides case folding, there are additional
normalizations that can be applied to text. The W3C I18N Working
Group is in the process of defining exactly which normalizations
are necessary, and where they should be applied. The W3C I18N
Working Group expects to require early normalization, which means
that data read into the DOM is assumed to already be normalized.
The DOM and applications built on top of it in this case only have
to assure that text remains normalized when being changed. For
further details, please see [<a class='noxref'
href='#references-Charmod'>Charmod</a>].</p>
</div>

<!-- div3 ID-5DFED1F0 -->
<div class='div3'><a id='core-Namespaces-Considerations' name='core-Namespaces-Considerations'></a> 

<h3 id='core-Namespaces-Considerations-h3' class='div3'>1.1.8. XML
Namespaces</h3>

<p>The DOM Level 2 supports XML namespaces [<a class='noxref'
href='#references-Namespaces'>Namespaces</a>] by augmenting
several interfaces of the DOM Level 1 Core to allow creating and
manipulating <a
href='#glossary-dt-element'><em>elements</em></a> and
attributes associated to a namespace.</p>

<p>As far as the DOM is concerned, special attributes used for
declaring <a href='#glossary-dt-XML-namespace'><em>XML
namespaces</em></a> are still exposed and can be manipulated just
like any other attribute. However, nodes are permanently bound to
<a href='#glossary-dt-namespaceURI'><em>namespace URIs</em></a>
as they get created. Consequently, moving a node within a document,
using the DOM, in no case results in a change of its <a
href='#glossary-dt-namespaceprefix'><em>namespace
prefix</em></a> or namespace URI. Similarly, creating a node with a
namespace prefix and namespace URI, or changing the namespace
prefix of a node, does not result in any addition, removal, or
modification of any special attributes for declaring the
appropriate XML namespaces. Namespace validation is not enforced;
the DOM application is responsible. In particular, since the
mapping between prefixes and namespace URIs is not enforced, in
general, the resulting document cannot be serialized naively. For
example, applications may have to declare every namespace in use
when serializing a document.</p>

<p>DOM Level 2 doesn't perform any URI normalization or
canonicalization. The URIs given to the DOM are assumed to be valid
(e.g., characters such as whitespaces are properly escaped), and no
lexical checking is performed. Absolute URI references are treated
as strings and <a
href='#glossary-dt-string-compare'><em>compared
literally</em></a>. How relative namespace URI references are
treated is undefined. To ensure interoperability only absolute
namespace URI references (i.e., URI references beginning with a
scheme name and a colon) should be used. Note that because the DOM
does no lexical checking, the empty string will be treated as a
real namespace URI in DOM Level 2 methods. Applications must use
the value <code>null</code> as the namespaceURI parameter for
methods if they wish to have no namespace.</p>

<p><b>Note:</b> In the DOM, all namespace declaration attributes
are <em>by definition</em> bound to the namespace URI: "<a
href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>".
These are the attributes whose <a
href='#glossary-dt-namespaceprefix'><em>namespace
prefix</em></a> or <a
href='#glossary-dt-qualifiedname'><em>qualified name</em></a>
is "xmlns". Although, at the time of writing, this is not part of
the XML Namespaces specification [<a class='noxref'
href='#references-Namespaces'>Namespaces</a>], it is planned to
be incorporated in a future revision.</p>

<p>In a document with no namespaces, the <a
href='#glossary-dt-child'><em>child</em></a> list of an <a
href='#core-ID-11C98490'><code>EntityReference</code></a> node
is always the same as that of the corresponding <a
href='#core-ID-527DCFF2'><code>Entity</code></a>. This is not
true in a document where an entity contains unbound <a
href='#glossary-dt-namespaceprefix'><em>namespace
prefixes</em></a>. In such a case, the <a
href='#glossary-dt-descendant'><em>descendants</em></a> of the
corresponding <a class='noxref'
href='#core-ID-11C98490'><code>EntityReference</code></a> nodes
may be bound to different <a
href='#glossary-dt-namespaceURI'><em>namespace URIs</em></a>,
depending on where the entity references are. Also, because, in the
DOM, nodes always remain bound to the same namespace URI, moving
such <a class='noxref'
href='#core-ID-11C98490'><code>EntityReference</code></a> nodes
can lead to documents that cannot be serialized. This is also true
when the DOM Level 1 method <code>createEntityReference</code> of
the <a href='#core-i-Document'><code>Document</code></a>
interface is used to create entity references that correspond to
such entities, since the <a
href='#glossary-dt-descendant'><em>descendants</em></a> of the
returned <a class='noxref'
href='#core-ID-11C98490'><code>EntityReference</code></a> are
unbound. The DOM Level 2 does not support any mechanism to resolve
namespace prefixes. For all of these reasons, use of such entities
and entity references should be avoided or used with extreme care.
A future Level of the DOM may include some additional support for
handling these.</p>

<p>The new methods, such as <code>createElementNS</code> and
<code>createAttributeNS</code> of the <a
href='#core-i-Document'><code>Document</code></a> interface,
are meant to be used by namespace aware applications. Simple
applications that do not use namespaces can use the DOM Level 1
methods, such as <code>createElement</code> and
<code>createAttribute</code>. Elements and attributes created in
this way do not have any namespace prefix, namespace URI, or local
name.</p>

<p><b>Note:</b> DOM Level 1 methods are namespace ignorant.
Therefore, while it is safe to use these methods when not dealing
with namespaces, using them and the new ones at the same time
should be avoided. DOM Level 1 methods solely identify attribute
nodes by their <code>nodeName</code>. On the contrary, the DOM
Level 2 methods related to namespaces, identify attribute nodes by
their <code>namespaceURI</code> and <code>localName</code>. Because
of this fundamental difference, mixing both sets of methods can
lead to unpredictable results. In particular, using
<code>setAttributeNS</code>, an <a
href='#glossary-dt-element'><em>element</em></a> may have two
attributes (or more) that have the same <code>nodeName</code>, but
different <code>namespaceURI</code>s. Calling
<code>getAttribute</code> with that <code>nodeName</code> could
then return any of those attributes. The result depends on the
implementation. Similarly, using <code>setAttributeNode</code>, one
can set two attributes (or more) that have different
<code>nodeNames</code> but the same <code>prefix</code> and
<code>namespaceURI</code>. In this case
<code>getAttributeNodeNS</code> will return either attribute, in an
implementation dependent manner. The only guarantee in such cases
is that all methods that access a named item by its
<code>nodeName</code> will access the same item, and all methods
which access a node by its URI and local name will access the same
node. For instance, <code>setAttribute</code> and
<code>setAttributeNS</code> affect the node that
<code>getAttribute</code> and <code>getAttributeNS</code>,
respectively, return.</p>
</div>

<!-- div3 Namespaces-Considerations --></div>

<!-- div2 ID-1590626201 -->
<div class='div2'><a id='core-ID-BBACDC08' name='core-ID-BBACDC08'></a> 

<h2 id='core-ID-BBACDC08-h2' class='div2'>1.2. Fundamental
Interfaces</h2>

<p>The interfaces within this section are considered
<em>fundamental</em>, and must be fully implemented by all
conforming implementations of the DOM, including all HTML DOM
implementations [<a class='noxref'
href='#references-DOMHTML-inf'>DOM Level 2 HTML</a>], unless
otherwise specified.</p>

<p>A DOM application may use the <code>hasFeature(feature,
version)</code> method of the <a
href='#core-ID-102161490'><code>DOMImplementation</code></a>
interface with parameter values "Core" and "2.0" (respectively) to
determine whether or not this module is supported by the
implementation. Any implementation that conforms to DOM Level 2 or
a DOM Level 2 module must conform to the Core module. Please refer
to additional information about <a
href='http://www.w3.org/TR/DOM-Level-2-Core/introduction.html#ID-Conformance'>
<em>conformance</em></a> in this specification.</p>

<dl>
<dt><b>Exception <i><a id='core-ID-17189187' name='core-ID-17189187'>DOMException</a></i></b></dt>

<dd>
<p>DOM operations only raise exceptions in "exceptional"
circumstances, i.e., when an operation is impossible to perform
(either for logical reasons, because data is lost, or because the
implementation has become unstable). In general, DOM methods return
specific error values in ordinary processing situations, such as
out-of-bound errors when using <a
href='#core-ID-536297177'><code>NodeList</code></a>.</p>

<p>Implementations should raise other exceptions under other
circumstances. For example, implementations should raise an
implementation-dependent exception if a <code>null</code> argument
is passed.</p>

<p>Some languages and object systems do not support the concept of
exceptions. For such systems, error conditions may be indicated
using native error reporting mechanisms. For some bindings, for
example, methods may return error codes similar to those listed in
the corresponding method descriptions.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
exception DOMException {
  unsigned short   code;
};
// ExceptionCode
const unsigned short      INDEX_SIZE_ERR                 = 1;
const unsigned short      DOMSTRING_SIZE_ERR             = 2;
const unsigned short      HIERARCHY_REQUEST_ERR          = 3;
const unsigned short      WRONG_DOCUMENT_ERR             = 4;
const unsigned short      INVALID_CHARACTER_ERR          = 5;
const unsigned short      NO_DATA_ALLOWED_ERR            = 6;
const unsigned short      NO_MODIFICATION_ALLOWED_ERR    = 7;
const unsigned short      NOT_FOUND_ERR                  = 8;
const unsigned short      NOT_SUPPORTED_ERR              = 9;
const unsigned short      INUSE_ATTRIBUTE_ERR            = 10;
// Introduced in DOM Level 2:
const unsigned short      INVALID_STATE_ERR              = 11;
// Introduced in DOM Level 2:
const unsigned short      SYNTAX_ERR                     = 12;
// Introduced in DOM Level 2:
const unsigned short      INVALID_MODIFICATION_ERR       = 13;
// Introduced in DOM Level 2:
const unsigned short      NAMESPACE_ERR                  = 14;
// Introduced in DOM Level 2:
const unsigned short      INVALID_ACCESS_ERR             = 15;
</pre>
</div>

<br />
</dd>

<dt><b>Definition group <i><a id='core-ID-258A00AF' name='core-ID-258A00AF'>ExceptionCode</a></i></b></dt>

<dd>
<p>An integer indicating the type of error generated.</p>

<p><b>Note:</b> Other numeric codes are reserved for W3C for
possible future use.</p>

<dl>
<dt><b>Defined Constants</b></dt>

<dd>
<dl>
<dt><code class='constant-name'>DOMSTRING_SIZE_ERR</code></dt>

<dd>If the specified range of text does not fit into a
DOMString</dd>

<dt><code class='constant-name'>HIERARCHY_REQUEST_ERR</code></dt>

<dd>If any node is inserted somewhere it doesn't belong</dd>

<dt><code class='constant-name'>INDEX_SIZE_ERR</code></dt>

<dd>If index or size is negative, or greater than the allowed
value</dd>

<dt><code class='constant-name'>INUSE_ATTRIBUTE_ERR</code></dt>

<dd>If an attempt is made to add an attribute that is already in
use elsewhere</dd>

<dt><code class='constant-name'>INVALID_ACCESS_ERR</code>,
introduced in <b class='version'>DOM Level 2</b>.</dt>

<dd>If a parameter or an operation is not supported by the
underlying object.</dd>

<dt><code class='constant-name'>INVALID_CHARACTER_ERR</code></dt>

<dd>If an invalid or illegal character is specified, such as in a
name. See <a
href='http://www.w3.org/TR/1998/REC-xml-19980210#NT-Char'><em>production
2</em></a> in the XML specification for the definition of a legal
character, and <a
href='http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name'><em>production
5</em></a> for the definition of a legal name character.</dd>

<dt><code class='constant-name'>INVALID_MODIFICATION_ERR</code>,
introduced in <b class='version'>DOM Level 2</b>.</dt>

<dd>If an attempt is made to modify the type of the underlying
object.</dd>

<dt><code class='constant-name'>INVALID_STATE_ERR</code>,
introduced in <b class='version'>DOM Level 2</b>.</dt>

<dd>If an attempt is made to use an object that is not, or is no
longer, usable.</dd>

<dt><code class='constant-name'>NAMESPACE_ERR</code>, introduced in
<b class='version'>DOM Level 2</b>.</dt>

<dd>If an attempt is made to create or change an object in a way
which is incorrect with regard to namespaces.</dd>

<dt><code class='constant-name'>NOT_FOUND_ERR</code></dt>

<dd>If an attempt is made to reference a node in a context where it
does not exist</dd>

<dt><code class='constant-name'>NOT_SUPPORTED_ERR</code></dt>

<dd>If the implementation does not support the requested type of
object or operation.</dd>

<dt><code class='constant-name'>NO_DATA_ALLOWED_ERR</code></dt>

<dd>If data is specified for a node which does not support
data</dd>

<dt><code
class='constant-name'>NO_MODIFICATION_ALLOWED_ERR</code></dt>

<dd>If an attempt is made to modify an object where modifications
are not allowed</dd>

<dt><code class='constant-name'>SYNTAX_ERR</code>, introduced in <b
class='version'>DOM Level 2</b>.</dt>

<dd>If an invalid or illegal string is specified.</dd>

<dt><code class='constant-name'>WRONG_DOCUMENT_ERR</code></dt>

<dd>If a node is used in a different document than the one that
created it (that doesn't support it)</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-102161490' name='core-ID-102161490'>DOMImplementation</a></i></b></dt>

<dd>
<p>The <code>DOMImplementation</code> interface provides a number
of methods for performing operations that are independent of any
particular instance of the document object model.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface DOMImplementation {
  boolean            hasFeature(in DOMString feature, 
                                in DOMString version);
  // Introduced in DOM Level 2:
  DocumentType       createDocumentType(in DOMString qualifiedName, 
                                        in DOMString publicId, 
                                        in DOMString systemId)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  Document           createDocument(in DOMString namespaceURI, 
                                    in DOMString qualifiedName, 
                                    in DocumentType doctype)
                                        raises(DOMException);
};
</pre>
</div>

<br />
</dd>

<dt><b>Methods</b></dt>

<dd>
<dl>
<dt><code class='method-name'><a id='core-Level-2-Core-DOM-createDocument' name='core-Level-2-Core-DOM-createDocument'>createDocument</a></code>
introduced in <b class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Creates an XML <a
href='#core-i-Document'><code>Document</code></a> object of the
specified type with its document element. HTML-only DOM
implementations do not need to implement this method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the document element to create.<br />
</dd>

<dt><code class='parameter-name'>qualifiedName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-qualifiedname'><em>qualified
name</em></a> of the document element to be created.<br />
</dd>

<dt><code class='parameter-name'>doctype</code> of type <a
href='#core-ID-412266927'><code>DocumentType</code></a></dt>

<dd>The type of document to be created or <code>null</code>.<br />
When <code>doctype</code> is not <code>null</code>, its <a
href='#core-node-ownerDoc'><code>Node.ownerDocument</code></a>
attribute is set to the document being created.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-i-Document'><code>Document</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-i-Document'><code>Document</code></a> object.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name
contains an illegal character.</p>

<p>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is
malformed, if the <code>qualifiedName</code> has a prefix and the
<code>namespaceURI</code> is <code>null</code>, or if the
<code>qualifiedName</code> has a prefix that is "xml" and the
<code>namespaceURI</code> is different from "<a
href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>"
[<a class='noxref'
href='#references-Namespaces'>Namespaces</a>].</p>

<p>WRONG_DOCUMENT_ERR: Raised if <code>doctype</code> has already
been used with a different document or was created from a different
implementation.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-Level-2-Core-DOM-createDocType' name='core-Level-2-Core-DOM-createDocType'>createDocumentType</a></code>
introduced in <b class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Creates an empty <a
href='#core-ID-412266927'><code>DocumentType</code></a> node.
Entity declarations and notations are not made available. Entity
reference expansions and default attribute additions do not occur.
It is expected that a future version of the DOM will provide a way
for populating a <a class='noxref'
href='#core-ID-412266927'><code>DocumentType</code></a>.<br />
HTML-only DOM implementations do not need to implement this method.


<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>qualifiedName</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-qualifiedname'><em>qualified
name</em></a> of the document type to be created.<br />
</dd>

<dt><code class='parameter-name'>publicId</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The external subset public identifier.<br />
</dd>

<dt><code class='parameter-name'>systemId</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The external subset system identifier.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-412266927'><code>DocumentType</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-ID-412266927'><code>DocumentType</code></a> node
with <a
href='#core-node-ownerDoc'><code>Node.ownerDocument</code></a>
set to <code>null</code>.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name
contains an illegal character.</p>

<p>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is
malformed.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-5CED94D7' name='core-ID-5CED94D7'>hasFeature</a></code></dt>

<dd>
<div class='method'>Test if the DOM implementation implements a
specific feature. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>feature</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the feature to test (case-insensitive). The values
used by DOM features are defined throughout the DOM Level 2
specifications and listed in the <a
href='#introduction-ID-Conformance'>Conformance</a> section.
The name must be an <a href='#glossary-dt-XML-name'><em>XML
name</em></a>. To avoid possible conflicts, as a convention, names
referring to features defined outside the DOM specification should
be made unique by reversing the name of the Internet domain name of
the person (or the organization that the person belongs to) who
defines the feature, component by component, and using this as a
prefix. For instance, the W3C SVG Working Group defines the feature
"org.w3c.dom.svg".<br />
</dd>

<dt><code class='parameter-name'>version</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>This is the version number of the feature to test. In Level 2,
the string can be either "2.0" or "1.0". If the version is not
specified, supporting any version of the feature causes the method
to return <code>true</code>.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>boolean</code></p>
</td>
<td>
<p><code>true</code> if the feature is implemented in the specified
version, <code>false</code> otherwise.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-B63ED1A3' name='core-ID-B63ED1A3'>DocumentFragment</a></i></b></dt>

<dd>
<p><code>DocumentFragment</code> is a "lightweight" or "minimal" <a
href='#core-i-Document'><code>Document</code></a> object. It is
very common to want to be able to extract a portion of a document's
tree or to create a new fragment of a document. Imagine
implementing a user command like cut or rearranging a document by
moving fragments around. It is desirable to have an object which
can hold such fragments and it is quite natural to use a Node for
this purpose. While it is true that a <a class='noxref'
href='#core-i-Document'><code>Document</code></a> object could
fulfill this role, a <a class='noxref'
href='#core-i-Document'><code>Document</code></a> object can
potentially be a heavyweight object, depending on the underlying
implementation. What is really needed for this is a very
lightweight object. <code>DocumentFragment</code> is such an
object.</p>

<p>Furthermore, various operations -- such as inserting nodes as
children of another <a
href='#core-ID-1950641247'><code>Node</code></a> -- may take
<code>DocumentFragment</code> objects as arguments; this results in
all the child nodes of the <code>DocumentFragment</code> being
moved to the child list of this node.</p>

<p>The children of a <code>DocumentFragment</code> node are zero or
more nodes representing the tops of any sub-trees defining the
structure of the document. <code>DocumentFragment</code> nodes do
not need to be <a
href='#glossary-dt-well-formed'><em>well-formed XML
documents</em></a> (although they do need to follow the rules
imposed upon well-formed XML parsed entities, which can have
multiple top nodes). For example, a <code>DocumentFragment</code>
might have only one child and that child node could be a <a
href='#core-ID-1312295772'><code>Text</code></a> node. Such a
structure model represents neither an HTML document nor a
well-formed XML document.</p>

<p>When a <code>DocumentFragment</code> is inserted into a <a
href='#core-i-Document'><code>Document</code></a> (or indeed
any other <a href='#core-ID-1950641247'><code>Node</code></a>
that may take children) the children of the
<code>DocumentFragment</code> and not the
<code>DocumentFragment</code> itself are inserted into the <a
class='noxref'
href='#core-ID-1950641247'><code>Node</code></a>. This makes
the <code>DocumentFragment</code> very useful when the user wishes
to create nodes that are <a
href='#glossary-dt-sibling'><em>siblings</em></a>; the
<code>DocumentFragment</code> acts as the parent of these nodes so
that the user can use the standard methods from the <a
class='noxref' href='#core-ID-1950641247'><code>Node</code></a>
interface, such as <code>insertBefore</code> and
<code>appendChild</code>.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface DocumentFragment : Node {
};
</pre>
</div>

<br />
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-i-Document' name='core-i-Document'>Document</a></i></b></dt>

<dd>
<p>The <code>Document</code> interface represents the entire HTML
or XML document. Conceptually, it is the <a
href='#glossary-dt-root-node'><em>root</em></a> of the document
tree, and provides the primary access to the document's data.</p>

<p>Since elements, text nodes, comments, processing instructions,
etc. cannot exist outside the context of a <code>Document</code>,
the <code>Document</code> interface also contains the factory
methods needed to create these objects. The <a
href='#core-ID-1950641247'><code>Node</code></a> objects
created have a <code>ownerDocument</code> attribute which
associates them with the <code>Document</code> within whose context
they were created.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface Document : Node {
  readonly attribute DocumentType     doctype;
  readonly attribute DOMImplementation  implementation;
  readonly attribute Element          documentElement;
  Element            createElement(in DOMString tagName)
                                        raises(DOMException);
  DocumentFragment   createDocumentFragment();
  Text               createTextNode(in DOMString data);
  Comment            createComment(in DOMString data);
  CDATASection       createCDATASection(in DOMString data)
                                        raises(DOMException);
  ProcessingInstruction createProcessingInstruction(in DOMString target, 
                                                    in DOMString data)
                                        raises(DOMException);
  Attr               createAttribute(in DOMString name)
                                        raises(DOMException);
  EntityReference    createEntityReference(in DOMString name)
                                        raises(DOMException);
  NodeList           getElementsByTagName(in DOMString tagname);
  // Introduced in DOM Level 2:
  Node               importNode(in Node importedNode, 
                                in boolean deep)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  Element            createElementNS(in DOMString namespaceURI, 
                                     in DOMString qualifiedName)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  Attr               createAttributeNS(in DOMString namespaceURI, 
                                       in DOMString qualifiedName)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  NodeList           getElementsByTagNameNS(in DOMString namespaceURI, 
                                            in DOMString localName);
  // Introduced in DOM Level 2:
  Element            getElementById(in DOMString elementId);
};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-B63ED1A31' name='core-ID-B63ED1A31'>doctype</a></code> of type <a
href='#core-ID-412266927'><code>DocumentType</code></a>,
readonly</dt>

<dd>The Document Type Declaration (see <a
href='#core-ID-412266927'><code>DocumentType</code></a>)
associated with this document. For HTML documents as well as XML
documents without a document type declaration this returns
<code>null</code>. The DOM Level 2 does not support editing the
Document Type Declaration. <code>docType</code> cannot be altered
in any way, including through the use of methods inherited from the
<a href='#core-ID-1950641247'><code>Node</code></a> interface,
such as <code>insertNode</code> or <code>removeNode</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-87CD092' name='core-ID-87CD092'>documentElement</a></code> of type <a
href='#core-ID-745549614'><code>Element</code></a>,
readonly</dt>

<dd>This is a <a
href='#glossary-dt-convenience'><em>convenience</em></a>
attribute that allows direct access to the child node that is the
root element of the document. For HTML documents, this is the
element with the tagName "HTML".<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-1B793EBA' name='core-ID-1B793EBA'>implementation</a></code> of type <a
href='#core-ID-102161490'><code>DOMImplementation</code></a>,
readonly</dt>

<dd>The <a
href='#core-ID-102161490'><code>DOMImplementation</code></a>
object that handles this document. A DOM application may use
objects from multiple implementations.<br />
</dd>
</dl>
</dd>

<dt><b>Methods</b></dt>

<dd>
<dl>
<dt><code class='method-name'><a id='core-ID-1084891198' name='core-ID-1084891198'>createAttribute</a></code></dt>

<dd>
<div class='method'>Creates an <a
href='#core-ID-637646024'><code>Attr</code></a> of the given
name. Note that the <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> instance can
then be set on an <a
href='#core-ID-745549614'><code>Element</code></a> using the
<code>setAttributeNode</code> method.<br />
To create an attribute with a qualified name and namespace URI, use
the <code>createAttributeNS</code> method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the attribute.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-637646024'><code>Attr</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> object with the
<code>nodeName</code> attribute set to <code>name</code>, and
<code>localName</code>, <code>prefix</code>, and
<code>namespaceURI</code> set to <code>null</code>. The value of
the attribute is the empty string.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified name contains an
illegal character.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-DocCrAttrNS' name='core-ID-DocCrAttrNS'>createAttributeNS</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Creates an attribute of the given qualified
name and namespace URI. HTML-only DOM implementations do not need
to implement this method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the attribute to create.<br />
</dd>

<dt><code class='parameter-name'>qualifiedName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-qualifiedname'><em>qualified
name</em></a> of the attribute to instantiate.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-637646024'><code>Attr</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> object with the
following attributes:</p>

<table border='1'
summary='Layout table: the first cell the name property, the second cell contains his initial value'>
<tr>
<th>Attribute</th>
<th>Value</th>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-F68D095'><code>Node.nodeName</code></a></td>
<td valign='top' rowspan='1' colspan='1'>qualifiedName</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-NodeNSname'><code>Node.namespaceURI</code></a></td>
<td valign='top' rowspan='1' colspan='1'>
<code>namespaceURI</code></td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-NodeNSPrefix'><code>Node.prefix</code></a></td>
<td valign='top' rowspan='1' colspan='1'>prefix, extracted from
<code>qualifiedName</code>, or <code>null</code> if there is no
prefix</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-NodeNSLocalN'><code>Node.localName</code></a></td>
<td valign='top' rowspan='1' colspan='1'><a class='noxref'
href='#glossary-dt-localname'><em>local name</em></a>,
extracted from <code>qualifiedName</code></td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-1112119403'><code>Attr.name</code></a></td>
<td valign='top' rowspan='1' colspan='1'>
<code>qualifiedName</code></td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-F68D080'><code>Node.nodeValue</code></a></td>
<td valign='top' rowspan='1' colspan='1'>the empty string</td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name
contains an illegal character.</p>

<p>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is
malformed, if the <code>qualifiedName</code> has a prefix and the
<code>namespaceURI</code> is <code>null</code>, if the
<code>qualifiedName</code> has a prefix that is "xml" and the
<code>namespaceURI</code> is different from "<a
href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>",
or if the <code>qualifiedName</code> is "xmlns" and the
<code>namespaceURI</code> is different from "<a
href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>".</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-D26C0AF8' name='core-ID-D26C0AF8'>createCDATASection</a></code></dt>

<dd>
<div class='method'>Creates a <a
href='#core-ID-667469212'><code>CDATASection</code></a> node
whose value is the specified string. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>data</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The data for the <a
href='#core-ID-667469212'><code>CDATASection</code></a>
contents.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-667469212'><code>CDATASection</code></a></p>
</td>
<td>
<p>The new <a class='noxref'
href='#core-ID-667469212'><code>CDATASection</code></a>
object.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NOT_SUPPORTED_ERR: Raised if this document is an HTML
document.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-1334481328' name='core-ID-1334481328'>createComment</a></code></dt>

<dd>
<div class='method'>Creates a <a
href='#core-ID-1728279322'><code>Comment</code></a> node given
the specified string. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>data</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The data for the node.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1728279322'><code>Comment</code></a></p>
</td>
<td>
<p>The new <a class='noxref'
href='#core-ID-1728279322'><code>Comment</code></a> object.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-35CB04B5' name='core-ID-35CB04B5'>createDocumentFragment</a></code></dt>

<dd>
<div class='method'>Creates an empty <a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>
object. 

<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Parameters</b></div>

<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-2141741547' name='core-ID-2141741547'>createElement</a></code></dt>

<dd>
<div class='method'>Creates an element of the type specified. Note
that the instance returned implements the <a
href='#core-ID-745549614'><code>Element</code></a> interface,
so attributes can be specified directly on the returned
object.<br />
In addition, if there are known attributes with default values, <a
href='#core-ID-637646024'><code>Attr</code></a> nodes
representing them are automatically created and attached to the
element.<br />
To create an element with a qualified name and namespace URI, use
the <code>createElementNS</code> method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>tagName</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the element type to instantiate. For XML, this is
case-sensitive. For HTML, the <code>tagName</code> parameter may be
provided in any case, but it must be mapped to the canonical
uppercase form by the DOM implementation.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-745549614'><code>Element</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-ID-745549614'><code>Element</code></a> object with
the <code>nodeName</code> attribute set to <code>tagName</code>,
and <code>localName</code>, <code>prefix</code>, and
<code>namespaceURI</code> set to <code>null</code>.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified name contains an
illegal character.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-DocCrElNS' name='core-ID-DocCrElNS'>createElementNS</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Creates an element of the given qualified name
and namespace URI. HTML-only DOM implementations do not need to
implement this method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the element to create.<br />
</dd>

<dt><code class='parameter-name'>qualifiedName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-qualifiedname'><em>qualified
name</em></a> of the element type to instantiate.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-745549614'><code>Element</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-ID-745549614'><code>Element</code></a> object with
the following attributes:</p>

<table border='1'
summary='Layout table: the first cell the name property, the second cell contains his initial value'>
<tr>
<th>Attribute</th>
<th>Value</th>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-F68D095'><code>Node.nodeName</code></a></td>
<td valign='top' rowspan='1' colspan='1'>
<code>qualifiedName</code></td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-NodeNSname'><code>Node.namespaceURI</code></a></td>
<td valign='top' rowspan='1' colspan='1'>
<code>namespaceURI</code></td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-NodeNSPrefix'><code>Node.prefix</code></a></td>
<td valign='top' rowspan='1' colspan='1'>prefix, extracted from
<code>qualifiedName</code>, or <code>null</code> if there is no
prefix</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-NodeNSLocalN'><code>Node.localName</code></a></td>
<td valign='top' rowspan='1' colspan='1'><a class='noxref'
href='#glossary-dt-localname'><em>local name</em></a>,
extracted from <code>qualifiedName</code></td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'><a
href='#core-ID-104682815'><code>Element.tagName</code></a></td>
<td valign='top' rowspan='1' colspan='1'>
<code>qualifiedName</code></td>
</tr>
</table>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name
contains an illegal character.</p>

<p>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is
malformed, if the <code>qualifiedName</code> has a prefix and the
<code>namespaceURI</code> is <code>null</code>, or if the
<code>qualifiedName</code> has a prefix that is "xml" and the
<code>namespaceURI</code> is different from "<a
href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>"
[<a class='noxref'
href='#references-Namespaces'>Namespaces</a>].</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-392B75AE' name='core-ID-392B75AE'>createEntityReference</a></code></dt>

<dd>
<div class='method'>Creates an <a
href='#core-ID-11C98490'><code>EntityReference</code></a>
object. In addition, if the referenced entity is known, the child
list of the <a class='noxref'
href='#core-ID-11C98490'><code>EntityReference</code></a> node
is made the same as that of the corresponding <a
href='#core-ID-527DCFF2'><code>Entity</code></a> node. 

<p><b>Note:</b> If any descendant of the <a
href='#core-ID-527DCFF2'><code>Entity</code></a> node has an
unbound <a href='#glossary-dt-namespaceprefix'><em>namespace
prefix</em></a>, the corresponding descendant of the created <a
href='#core-ID-11C98490'><code>EntityReference</code></a> node
is also unbound; (its <code>namespaceURI</code> is
<code>null</code>). The DOM Level 2 does not support any mechanism
to resolve namespace prefixes.</p>

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the entity to reference.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-11C98490'><code>EntityReference</code></a></p>
</td>
<td>
<p>The new <a class='noxref'
href='#core-ID-11C98490'><code>EntityReference</code></a>
object.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified name contains an
illegal character.</p>

<p>NOT_SUPPORTED_ERR: Raised if this document is an HTML
document.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-135944439' name='core-ID-135944439'>createProcessingInstruction</a></code></dt>

<dd>
<div class='method'>Creates a <a
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a>
node given the specified name and data strings. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>target</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The target part of the processing instruction.<br />
</dd>

<dt><code class='parameter-name'>data</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The data for the node.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a></p>
</td>
<td>
<p>The new <a class='noxref'
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a>
object.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified target contains
an illegal character.</p>

<p>NOT_SUPPORTED_ERR: Raised if this document is an HTML
document.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-1975348127' name='core-ID-1975348127'>createTextNode</a></code></dt>

<dd>
<div class='method'>Creates a <a
href='#core-ID-1312295772'><code>Text</code></a> node given the
specified string. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>data</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The data for the node.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1312295772'><code>Text</code></a></p>
</td>
<td>
<p>The new <a class='noxref'
href='#core-ID-1312295772'><code>Text</code></a> object.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-getElBId' name='core-ID-getElBId'>getElementById</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Returns the <a
href='#core-ID-745549614'><code>Element</code></a> whose
<code>ID</code> is given by <code>elementId</code>. If no such
element exists, returns <code>null</code>. Behavior is not defined
if more than one element has this <code>ID</code>. 

<p><b>Note:</b> The DOM implementation must have information that
says which attributes are of type ID. Attributes with the name "ID"
are not of type ID unless so defined. Implementations that do not
know whether attributes are of type ID or not are expected to
return <code>null</code>.</p>

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>elementId</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The unique <code>id</code> value for an element.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-745549614'><code>Element</code></a></p>
</td>
<td>
<p>The matching element.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-A6C9094' name='core-ID-A6C9094'>getElementsByTagName</a></code></dt>

<dd>
<div class='method'>Returns a <a
href='#core-ID-536297177'><code>NodeList</code></a> of all the
<a href='#core-ID-745549614'><code>Elements</code></a> with a
given tag name in the order in which they are encountered in a
preorder traversal of the <code>Document</code> tree. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>tagname</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the tag to match on. The special value "*" matches
all tags.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-536297177'><code>NodeList</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-ID-536297177'><code>NodeList</code></a> object
containing all the matched <a
href='#core-ID-745549614'><code>Elements</code></a>.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-getElBTNNS' name='core-ID-getElBTNNS'>getElementsByTagNameNS</a></code> introduced
in <b class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Returns a <a
href='#core-ID-536297177'><code>NodeList</code></a> of all the
<a href='#core-ID-745549614'><code>Elements</code></a> with a
given <a href='#glossary-dt-localname'><em>local name</em></a>
and namespace URI in the order in which they are encountered in a
preorder traversal of the <code>Document</code> tree. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the elements to match on. The special value "*"
matches all namespaces.<br />
</dd>

<dt><code class='parameter-name'>localName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-localname'><em>local
name</em></a> of the elements to match on. The special value "*"
matches all local names.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-536297177'><code>NodeList</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-ID-536297177'><code>NodeList</code></a> object
containing all the matched <a
href='#core-ID-745549614'><code>Elements</code></a>.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-Core-Document-importNode' name='core-Core-Document-importNode'>importNode</a></code> introduced in
<b class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Imports a node from another document to this
document. The returned node has no parent; (<code>parentNode</code>
is <code>null</code>). The source node is not altered or removed
from the original document; this method creates a new copy of the
source node.<br />
For all nodes, importing a node creates a node object owned by the
importing document, with attribute values identical to the source
node's <code>nodeName</code> and <code>nodeType</code>, plus the
attributes related to namespaces (<code>prefix</code>,
<code>localName</code>, and <code>namespaceURI</code>). As in the
<code>cloneNode</code> operation on a <a
href='#core-ID-1950641247'><code>Node</code></a>, the source
node is not altered.<br />
Additional information is copied as appropriate to the
<code>nodeType</code>, attempting to mirror the behavior expected
if a fragment of XML or HTML source was copied from one document to
another, recognizing that the two documents may have different DTDs
in the XML case. The following list describes the specifics for
each type of node. 

<dl>
<dt><b>ATTRIBUTE_NODE</b></dt>

<dd>The <code>ownerElement</code> attribute is set to
<code>null</code> and the <code>specified</code> flag is set to
<code>true</code> on the generated <a
href='#core-ID-637646024'><code>Attr</code></a>. The <a
href='#glossary-dt-descendant'><em>descendants</em></a> of the
source <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> are recursively
imported and the resulting nodes reassembled to form the
corresponding subtree.<br />
Note that the <code>deep</code> parameter has no effect on <a
href='#core-ID-637646024'><code>Attr</code></a> nodes; they
always carry their children with them when imported.</dd>

<dt><b>DOCUMENT_FRAGMENT_NODE</b></dt>

<dd>If the <code>deep</code> option was set to <code>true</code>,
the <a href='#glossary-dt-descendant'><em>descendants</em></a>
of the source element are recursively imported and the resulting
nodes reassembled to form the corresponding subtree. Otherwise,
this simply generates an empty <a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>.</dd>

<dt><b>DOCUMENT_NODE</b></dt>

<dd><code>Document</code> nodes cannot be imported.</dd>

<dt><b>DOCUMENT_TYPE_NODE</b></dt>

<dd><a href='#core-ID-412266927'><code>DocumentType</code></a>
nodes cannot be imported.</dd>

<dt><b>ELEMENT_NODE</b></dt>

<dd><em>Specified</em> attribute nodes of the source element are
imported, and the generated <a
href='#core-ID-637646024'><code>Attr</code></a> nodes are
attached to the generated <a
href='#core-ID-745549614'><code>Element</code></a>. Default
attributes are <em>not</em> copied, though if the document being
imported into defines default attributes for this element name,
those are assigned. If the <code>importNode</code>
<code>deep</code> parameter was set to <code>true</code>, the <a
href='#glossary-dt-descendant'><em>descendants</em></a> of the
source element are recursively imported and the resulting nodes
reassembled to form the corresponding subtree.</dd>

<dt><b>ENTITY_NODE</b></dt>

<dd><a href='#core-ID-527DCFF2'><code>Entity</code></a> nodes
can be imported, however in the current release of the DOM the <a
href='#core-ID-412266927'><code>DocumentType</code></a> is
readonly. Ability to add these imported nodes to a <a
class='noxref'
href='#core-ID-412266927'><code>DocumentType</code></a> will be
considered for addition to a future release of the DOM.<br />
On import, the <code>publicId</code>, <code>systemId</code>, and
<code>notationName</code> attributes are copied. If a
<code>deep</code> import is requested, the <a
href='#glossary-dt-descendant'><em>descendants</em></a> of the
the source <a href='#core-ID-527DCFF2'><code>Entity</code></a>
are recursively imported and the resulting nodes reassembled to
form the corresponding subtree.</dd>

<dt><b>ENTITY_REFERENCE_NODE</b></dt>

<dd>Only the <a
href='#core-ID-11C98490'><code>EntityReference</code></a>
itself is copied, even if a <code>deep</code> import is requested,
since the source and destination documents might have defined the
entity differently. If the document being imported into provides a
definition for this entity name, its value is assigned.</dd>

<dt><b>NOTATION_NODE</b></dt>

<dd><a href='#core-ID-5431D1B9'><code>Notation</code></a> nodes
can be imported, however in the current release of the DOM the <a
href='#core-ID-412266927'><code>DocumentType</code></a> is
readonly. Ability to add these imported nodes to a <a
class='noxref'
href='#core-ID-412266927'><code>DocumentType</code></a> will be
considered for addition to a future release of the DOM.<br />
On import, the <code>publicId</code> and <code>systemId</code>
attributes are copied.<br />
Note that the <code>deep</code> parameter has no effect on <a
href='#core-ID-5431D1B9'><code>Notation</code></a> nodes since
they never have any children.</dd>

<dt><b>PROCESSING_INSTRUCTION_NODE</b></dt>

<dd>The imported node copies its <code>target</code> and
<code>data</code> values from those of the source node.</dd>

<dt><b>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE</b></dt>

<dd>These three types of nodes inheriting from <a
href='#core-ID-FF21A306'><code>CharacterData</code></a> copy
their <code>data</code> and <code>length</code> attributes from
those of the source node.</dd>
</dl>

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>importedNode</code> of type <a
href='#core-ID-1950641247'><code>Node</code></a></dt>

<dd>The node to import.<br />
</dd>

<dt><code class='parameter-name'>deep</code> of type
<code>boolean</code></dt>

<dd>If <code>true</code>, recursively import the subtree under the
specified node; if <code>false</code>, import only the node itself,
as explained above. This has no effect on <a
href='#core-ID-637646024'><code>Attr</code></a>, <a
href='#core-ID-11C98490'><code>EntityReference</code></a>, and
<a href='#core-ID-5431D1B9'><code>Notation</code></a>
nodes.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The imported node that belongs to this
<code>Document</code>.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NOT_SUPPORTED_ERR: Raised if the type of node being imported is
not supported.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-1950641247' name='core-ID-1950641247'>Node</a></i></b></dt>

<dd>
<p>The <code>Node</code> interface is the primary datatype for the
entire Document Object Model. It represents a single node in the
document tree. While all objects implementing the <code>Node</code>
interface expose methods for dealing with children, not all objects
implementing the <code>Node</code> interface may have children. For
example, <a href='#core-ID-1312295772'><code>Text</code></a>
nodes may not have children, and adding children to such nodes
results in a <a
href='#core-ID-17189187'><code>DOMException</code></a> being
raised.</p>

<p>The attributes <code>nodeName</code>, <code>nodeValue</code> and
<code>attributes</code> are included as a mechanism to get at node
information without casting down to the specific derived interface.
In cases where there is no obvious mapping of these attributes for
a specific <code>nodeType</code> (e.g., <code>nodeValue</code> for
an <a href='#core-ID-745549614'><code>Element</code></a> or
<code>attributes</code> for a <a
href='#core-ID-1728279322'><code>Comment</code></a>), this
returns <code>null</code>. Note that the specialized interfaces may
contain additional and more convenient mechanisms to get and set
the relevant information.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface Node {

  // NodeType
  const unsigned short      ELEMENT_NODE                   = 1;
  const unsigned short      ATTRIBUTE_NODE                 = 2;
  const unsigned short      TEXT_NODE                      = 3;
  const unsigned short      CDATA_SECTION_NODE             = 4;
  const unsigned short      ENTITY_REFERENCE_NODE          = 5;
  const unsigned short      ENTITY_NODE                    = 6;
  const unsigned short      PROCESSING_INSTRUCTION_NODE    = 7;
  const unsigned short      COMMENT_NODE                   = 8;
  const unsigned short      DOCUMENT_NODE                  = 9;
  const unsigned short      DOCUMENT_TYPE_NODE             = 10;
  const unsigned short      DOCUMENT_FRAGMENT_NODE         = 11;
  const unsigned short      NOTATION_NODE                  = 12;

  readonly attribute DOMString        nodeName;
           attribute DOMString        nodeValue;
                                        // raises(DOMException) on setting
                                        // raises(DOMException) on retrieval

  readonly attribute unsigned short   nodeType;
  readonly attribute Node             parentNode;
  readonly attribute NodeList         childNodes;
  readonly attribute Node             firstChild;
  readonly attribute Node             lastChild;
  readonly attribute Node             previousSibling;
  readonly attribute Node             nextSibling;
  readonly attribute NamedNodeMap     attributes;
  // Modified in DOM Level 2:
  readonly attribute Document         ownerDocument;
  Node               insertBefore(in Node newChild, 
                                  in Node refChild)
                                        raises(DOMException);
  Node               replaceChild(in Node newChild, 
                                  in Node oldChild)
                                        raises(DOMException);
  Node               removeChild(in Node oldChild)
                                        raises(DOMException);
  Node               appendChild(in Node newChild)
                                        raises(DOMException);
  boolean            hasChildNodes();
  Node               cloneNode(in boolean deep);
  // Modified in DOM Level 2:
  void               normalize();
  // Introduced in DOM Level 2:
  boolean            isSupported(in DOMString feature, 
                                 in DOMString version);
  // Introduced in DOM Level 2:
  readonly attribute DOMString        namespaceURI;
  // Introduced in DOM Level 2:
           attribute DOMString        prefix;
                                        // raises(DOMException) on setting

  // Introduced in DOM Level 2:
  readonly attribute DOMString        localName;
  // Introduced in DOM Level 2:
  boolean            hasAttributes();
};
</pre>
</div>

<br />
</dd>

<dt><b>Definition group <i><a id='core-ID-1841493061' name='core-ID-1841493061'>NodeType</a></i></b></dt>

<dd>
<p>An integer indicating which type of node this is.</p>

<p><b>Note:</b> Numeric codes up to 200 are reserved to W3C for
possible future use.</p>

<dl>
<dt><b>Defined Constants</b></dt>

<dd>
<dl>
<dt><code class='constant-name'>ATTRIBUTE_NODE</code></dt>

<dd>The node is an <a
href='#core-ID-637646024'><code>Attr</code></a>.</dd>

<dt><code class='constant-name'>CDATA_SECTION_NODE</code></dt>

<dd>The node is a <a
href='#core-ID-667469212'><code>CDATASection</code></a>.</dd>

<dt><code class='constant-name'>COMMENT_NODE</code></dt>

<dd>The node is a <a
href='#core-ID-1728279322'><code>Comment</code></a>.</dd>

<dt><code class='constant-name'>DOCUMENT_FRAGMENT_NODE</code></dt>

<dd>The node is a <a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>.</dd>

<dt><code class='constant-name'>DOCUMENT_NODE</code></dt>

<dd>The node is a <a
href='#core-i-Document'><code>Document</code></a>.</dd>

<dt><code class='constant-name'>DOCUMENT_TYPE_NODE</code></dt>

<dd>The node is a <a
href='#core-ID-412266927'><code>DocumentType</code></a>.</dd>

<dt><code class='constant-name'>ELEMENT_NODE</code></dt>

<dd>The node is an <a
href='#core-ID-745549614'><code>Element</code></a>.</dd>

<dt><code class='constant-name'>ENTITY_NODE</code></dt>

<dd>The node is an <a
href='#core-ID-527DCFF2'><code>Entity</code></a>.</dd>

<dt><code class='constant-name'>ENTITY_REFERENCE_NODE</code></dt>

<dd>The node is an <a
href='#core-ID-11C98490'><code>EntityReference</code></a>.</dd>

<dt><code class='constant-name'>NOTATION_NODE</code></dt>

<dd>The node is a <a
href='#core-ID-5431D1B9'><code>Notation</code></a>.</dd>

<dt><code
class='constant-name'>PROCESSING_INSTRUCTION_NODE</code></dt>

<dd>The node is a <a
href='#core-ID-1004215813'><code>ProcessingInstruction</code></a>.</dd>

<dt><code class='constant-name'>TEXT_NODE</code></dt>

<dd>The node is a <a
href='#core-ID-1312295772'><code>Text</code></a> node.</dd>
</dl>
</dd>
</dl>
</dd>

<dd>
<p>The values of <code>nodeName</code>, <code>nodeValue</code>, and
<code>attributes</code> vary according to the node type as
follows:</p>

<table border='1'
summary='Layout table: the first cell contains the name of the interface, the second contains the value of the nodeName attribute for this interface, the third contains the value of the nodeValue attribute for this interface and the fourth contains the value of the attributes attribute for this interface'>
<tr>
<th>Interface</th>
<th>nodeName</th>
<th>nodeValue</th>
<th>attributes</th>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>Attr</td>
<td valign='top' rowspan='1' colspan='1'>name of attribute</td>
<td valign='top' rowspan='1' colspan='1'>value of attribute</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>CDATASection</td>
<td valign='top' rowspan='1' colspan='1'>#cdata-section</td>
<td valign='top' rowspan='1' colspan='1'>content of the CDATA
Section</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>Comment</td>
<td valign='top' rowspan='1' colspan='1'>#comment</td>
<td valign='top' rowspan='1' colspan='1'>content of the
comment</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>Document</td>
<td valign='top' rowspan='1' colspan='1'>#document</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>DocumentFragment</td>
<td valign='top' rowspan='1' colspan='1'>#document-fragment</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>DocumentType</td>
<td valign='top' rowspan='1' colspan='1'>document type name</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>Element</td>
<td valign='top' rowspan='1' colspan='1'>tag name</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
<td valign='top' rowspan='1' colspan='1'>NamedNodeMap</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>Entity</td>
<td valign='top' rowspan='1' colspan='1'>entity name</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>EntityReference</td>
<td valign='top' rowspan='1' colspan='1'>name of entity
referenced</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>Notation</td>
<td valign='top' rowspan='1' colspan='1'>notation name</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>ProcessingInstruction</td>
<td valign='top' rowspan='1' colspan='1'>target</td>
<td valign='top' rowspan='1' colspan='1'>entire content excluding
the target</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>

<tr>
<td valign='top' rowspan='1' colspan='1'>Text</td>
<td valign='top' rowspan='1' colspan='1'>#text</td>
<td valign='top' rowspan='1' colspan='1'>content of the text
node</td>
<td valign='top' rowspan='1' colspan='1'>null</td>
</tr>
</table>
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-84CF096' name='core-ID-84CF096'>attributes</a></code> of type <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>,
readonly</dt>

<dd>A <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>
containing the attributes of this node (if it is an <a
href='#core-ID-745549614'><code>Element</code></a>) or
<code>null</code> otherwise.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-1451460987' name='core-ID-1451460987'>childNodes</a></code> of type <a
href='#core-ID-536297177'><code>NodeList</code></a>,
readonly</dt>

<dd>A <a href='#core-ID-536297177'><code>NodeList</code></a>
that contains all children of this node. If there are no children,
this is a <a class='noxref'
href='#core-ID-536297177'><code>NodeList</code></a> containing
no nodes.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-169727388' name='core-ID-169727388'>firstChild</a></code> of type <a
href='#core-ID-1950641247'><code>Node</code></a>, readonly</dt>

<dd>The first child of this node. If there is no such node, this
returns <code>null</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-61AD09FB' name='core-ID-61AD09FB'>lastChild</a></code> of type <a
href='#core-ID-1950641247'><code>Node</code></a>, readonly</dt>

<dd>The last child of this node. If there is no such node, this
returns <code>null</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-NodeNSLocalN' name='core-ID-NodeNSLocalN'>localName</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>, readonly,
introduced in <b class='version'>DOM Level 2</b></dt>

<dd>Returns the local part of the <a
href='#glossary-dt-qualifiedname'><em>qualified name</em></a>
of this node.<br />
For nodes of any type other than <code>ELEMENT_NODE</code> and
<code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1
method, such as <code>createElement</code> from the <a
href='#core-i-Document'><code>Document</code></a> interface,
this is always <code>null</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-NodeNSname' name='core-ID-NodeNSname'>namespaceURI</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>, readonly,
introduced in <b class='version'>DOM Level 2</b></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of this node, or <code>null</code> if it is
unspecified.<br />
This is not a computed value that is the result of a namespace
lookup based on an examination of the namespace declarations in
scope. It is merely the namespace URI given at creation time.<br />
For nodes of any type other than <code>ELEMENT_NODE</code> and
<code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1
method, such as <code>createElement</code> from the <a
href='#core-i-Document'><code>Document</code></a> interface,
this is always <code>null</code>. 

<p><b>Note:</b> Per the <em>Namespaces in XML</em> Specification
[<a class='noxref'
href='#references-Namespaces'>Namespaces</a>] an attribute does
not inherit its namespace from the element it is attached to. If an
attribute is not explicitly given a namespace, it simply has no
namespace.</p>
</dd>

<dt><code class='attribute-name'><a id='core-ID-6AC54C2F' name='core-ID-6AC54C2F'>nextSibling</a></code> of type <a
href='#core-ID-1950641247'><code>Node</code></a>, readonly</dt>

<dd>The node immediately following this node. If there is no such
node, this returns <code>null</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-F68D095' name='core-ID-F68D095'>nodeName</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>The name of this node, depending on its type; see the table
above.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-111237558' name='core-ID-111237558'>nodeType</a></code> of type <code>unsigned
short</code>, readonly</dt>

<dd>A code representing the type of the underlying object, as
defined above.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-F68D080' name='core-ID-F68D080'>nodeValue</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The value of this node, depending on its type; see the table
above. When it is defined to be <code>null</code>, setting it has
no effect.<br />
 

<div class='exceptions'><b>Exceptions on setting</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div class='exceptions'><b>Exceptions on retrieval</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>DOMSTRING_SIZE_ERR: Raised when it would return more characters
than fit in a <a
href='#core-DOMString'><code>DOMString</code></a> variable on
the implementation platform.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</dd>

<dt><code class='attribute-name'><a id='core-node-ownerDoc' name='core-node-ownerDoc'>ownerDocument</a></code> of type <a
href='#core-i-Document'><code>Document</code></a>, readonly,
modified in <b class='version'>DOM Level 2</b></dt>

<dd>The <a href='#core-i-Document'><code>Document</code></a>
object associated with this node. This is also the <a
class='noxref'
href='#core-i-Document'><code>Document</code></a> object used
to create new nodes. When this node is a <a class='noxref'
href='#core-i-Document'><code>Document</code></a> or a <a
href='#core-ID-412266927'><code>DocumentType</code></a> which
is not used with any <a class='noxref'
href='#core-i-Document'><code>Document</code></a> yet, this is
<code>null</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-1060184317' name='core-ID-1060184317'>parentNode</a></code> of type <a
href='#core-ID-1950641247'><code>Node</code></a>, readonly</dt>

<dd>The <a href='#glossary-dt-parent'><em>parent</em></a> of
this node. All nodes, except <a
href='#core-ID-637646024'><code>Attr</code></a>, <a
href='#core-i-Document'><code>Document</code></a>, <a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>, <a
href='#core-ID-527DCFF2'><code>Entity</code></a>, and <a
href='#core-ID-5431D1B9'><code>Notation</code></a> may have a
parent. However, if a node has just been created and not yet added
to the tree, or if it has been removed from the tree, this is
<code>null</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-NodeNSPrefix' name='core-ID-NodeNSPrefix'>prefix</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>, introduced
in <b class='version'>DOM Level 2</b></dt>

<dd>The <a href='#glossary-dt-namespaceprefix'><em>namespace
prefix</em></a> of this node, or <code>null</code> if it is
unspecified.<br />
Note that setting this attribute, when permitted, changes the
<code>nodeName</code> attribute, which holds the <a
href='#glossary-dt-qualifiedname'><em>qualified name</em></a>,
as well as the <code>tagName</code> and <code>name</code>
attributes of the <a
href='#core-ID-745549614'><code>Element</code></a> and <a
href='#core-ID-637646024'><code>Attr</code></a> interfaces,
when applicable.<br />
Note also that changing the prefix of an attribute that is known to
have a default value, does not make a new attribute with the
default value and the original prefix appear, since the
<code>namespaceURI</code> and <code>localName</code> do not
change.<br />
For nodes of any type other than <code>ELEMENT_NODE</code> and
<code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1
method, such as <code>createElement</code> from the <a
href='#core-i-Document'><code>Document</code></a> interface,
this is always <code>null</code>.<br />
 

<div class='exceptions'><b>Exceptions on setting</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified prefix contains
an illegal character.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>

<p>NAMESPACE_ERR: Raised if the specified <code>prefix</code> is
malformed, if the <code>namespaceURI</code> of this node is
<code>null</code>, if the specified prefix is "xml" and the
<code>namespaceURI</code> of this node is different from "<a
href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>",
if this node is an attribute and the specified prefix is "xmlns"
and the <code>namespaceURI</code> of this node is different from
"<a
href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>",
or if this node is an attribute and the <code>qualifiedName</code>
of this node is "xmlns" [<a class='noxref'
href='#references-Namespaces'>Namespaces</a>].</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</dd>

<dt><code class='attribute-name'><a id='core-ID-640FB3C8' name='core-ID-640FB3C8'>previousSibling</a></code> of type <a
href='#core-ID-1950641247'><code>Node</code></a>, readonly</dt>

<dd>The node immediately preceding this node. If there is no such
node, this returns <code>null</code>.<br />
</dd>
</dl>
</dd>

<dt><b>Methods</b></dt>

<dd>
<dl>
<dt><code class='method-name'><a id='core-ID-184E7107' name='core-ID-184E7107'>appendChild</a></code></dt>

<dd>
<div class='method'>Adds the node <code>newChild</code> to the end
of the list of children of this node. If the <code>newChild</code>
is already in the tree, it is first removed. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>newChild</code> of type <a
href='#core-ID-1950641247'><code>Node</code></a></dt>

<dd>The node to add.<br />
If it is a <a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>
object, the entire contents of the document fragment are moved into
the child list of this node<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The node added.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>HIERARCHY_REQUEST_ERR: Raised if this node is of a type that
does not allow children of the type of the <code>newChild</code>
node, or if the node to append is one of this node's <a
href='#glossary-dt-ancestor'><em>ancestors</em></a>.</p>

<p>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created
from a different document than the one that created this node.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-3A0ED0A4' name='core-ID-3A0ED0A4'>cloneNode</a></code></dt>

<dd>
<div class='method'>Returns a duplicate of this node, i.e., serves
as a generic copy constructor for nodes. The duplicate node has no
parent; (<code>parentNode</code> is <code>null</code>.).<br />
Cloning an <a
href='#core-ID-745549614'><code>Element</code></a> copies all
attributes and their values, including those generated by the XML
processor to represent defaulted attributes, but this method does
not copy any text it contains unless it is a deep clone, since the
text is contained in a child <a
href='#core-ID-1312295772'><code>Text</code></a> node. Cloning
an <code>Attribute</code> directly, as opposed to be cloned as part
of an <a class='noxref'
href='#core-ID-745549614'><code>Element</code></a> cloning
operation, returns a specified attribute (<code>specified</code> is
<code>true</code>). Cloning any other type of node simply returns a
copy of this node.<br />
Note that cloning an immutable subtree results in a mutable copy,
but the children of an <a
href='#core-ID-11C98490'><code>EntityReference</code></a> clone
are <a href='#glossary-dt-readonly-node'><em>readonly</em></a>.
In addition, clones of unspecified <a
href='#core-ID-637646024'><code>Attr</code></a> nodes are
specified. And, cloning <a
href='#core-i-Document'><code>Document</code></a>, <a
href='#core-ID-412266927'><code>DocumentType</code></a>, <a
href='#core-ID-527DCFF2'><code>Entity</code></a>, and <a
href='#core-ID-5431D1B9'><code>Notation</code></a> nodes is
implementation dependent. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>deep</code> of type
<code>boolean</code></dt>

<dd>If <code>true</code>, recursively clone the subtree under the
specified node; if <code>false</code>, clone only the node itself
(and its attributes, if it is an <a
href='#core-ID-745549614'><code>Element</code></a>).<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The duplicate node.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-NodeHasAttrs' name='core-ID-NodeHasAttrs'>hasAttributes</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Returns whether this node (if it is an element)
has any attributes. 

<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>boolean</code></p>
</td>
<td>
<p><code>true</code> if this node has any attributes,
<code>false</code> otherwise.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Parameters</b></div>

<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-810594187' name='core-ID-810594187'>hasChildNodes</a></code></dt>

<dd>
<div class='method'>Returns whether this node has any children. 

<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>boolean</code></p>
</td>
<td>
<p><code>true</code> if this node has any children,
<code>false</code> otherwise.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Parameters</b></div>

<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-952280727' name='core-ID-952280727'>insertBefore</a></code></dt>

<dd>
<div class='method'>Inserts the node <code>newChild</code> before
the existing child node <code>refChild</code>. If
<code>refChild</code> is <code>null</code>, insert
<code>newChild</code> at the end of the list of children.<br />
If <code>newChild</code> is a <a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>
object, all of its children are inserted, in the same order, before
<code>refChild</code>. If the <code>newChild</code> is already in
the tree, it is first removed. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>newChild</code> of type <a
href='#core-ID-1950641247'><code>Node</code></a></dt>

<dd>The node to insert.<br />
</dd>

<dt><code class='parameter-name'>refChild</code> of type <a
class='noxref'
href='#core-ID-1950641247'><code>Node</code></a></dt>

<dd>The reference node, i.e., the node before which the new node
must be inserted.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The node being inserted.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>HIERARCHY_REQUEST_ERR: Raised if this node is of a type that
does not allow children of the type of the <code>newChild</code>
node, or if the node to insert is one of this node's <a
href='#glossary-dt-ancestor'><em>ancestors</em></a>.</p>

<p>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created
from a different document than the one that created this node.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or
if the parent of the node being inserted is readonly.</p>

<p>NOT_FOUND_ERR: Raised if <code>refChild</code> is not a child of
this node.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-Level-2-Core-Node-supports' name='core-Level-2-Core-Node-supports'>isSupported</a></code> introduced
in <b class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Tests whether the DOM implementation implements
a specific feature and that feature is supported by this node. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>feature</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the feature to test. This is the same name which
can be passed to the method <code>hasFeature</code> on <a
href='#core-ID-102161490'><code>DOMImplementation</code></a>.<br />
</dd>

<dt><code class='parameter-name'>version</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>This is the version number of the feature to test. In Level 2,
version 1, this is the string "2.0". If the version is not
specified, supporting any version of the feature will cause the
method to return <code>true</code>.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>boolean</code></p>
</td>
<td>
<p>Returns <code>true</code> if the specified feature is supported
on this node, <code>false</code> otherwise.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-normalize' name='core-ID-normalize'>normalize</a></code> modified in <b
class='version'>DOM Level 2</b></dt>

<dd>
<div class='method'>Puts all <a
href='#core-ID-1312295772'><code>Text</code></a> nodes in the
full depth of the sub-tree underneath this <code>Node</code>,
including attribute nodes, into a "normal" form where only
structure (e.g., elements, comments, processing instructions, CDATA
sections, and entity references) separates <a class='noxref'
href='#core-ID-1312295772'><code>Text</code></a> nodes, i.e.,
there are neither adjacent <a class='noxref'
href='#core-ID-1312295772'><code>Text</code></a> nodes nor
empty <a class='noxref'
href='#core-ID-1312295772'><code>Text</code></a> nodes. This
can be used to ensure that the DOM view of a document is the same
as if it were saved and re-loaded, and is useful when operations
(such as XPointer [<a class='noxref'
href='#references-XPointer'>XPointer</a>] lookups) that depend
on a particular document tree structure are to be used. 

<p><b>Note:</b> In cases where the document contains <a
href='#core-ID-667469212'><code>CDATASections</code></a>, the
normalize operation alone may not be sufficient, since XPointers do
not differentiate between <a
href='#core-ID-1312295772'><code>Text</code></a> nodes and <a
href='#core-ID-667469212'><code>CDATASection</code></a>
nodes.</p>

<div><b>No Parameters</b></div>

<div><b>No Return Value</b></div>

<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-1734834066' name='core-ID-1734834066'>removeChild</a></code></dt>

<dd>
<div class='method'>Removes the child node indicated by
<code>oldChild</code> from the list of children, and returns it. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>oldChild</code> of type <a
href='#core-ID-1950641247'><code>Node</code></a></dt>

<dd>The node being removed.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The node removed.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>

<p>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a child of
this node.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-785887307' name='core-ID-785887307'>replaceChild</a></code></dt>

<dd>
<div class='method'>Replaces the child node <code>oldChild</code>
with <code>newChild</code> in the list of children, and returns the
<code>oldChild</code> node.<br />
If <code>newChild</code> is a <a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>
object, <code>oldChild</code> is replaced by all of the <a
class='noxref'
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>
children, which are inserted in the same order. If the
<code>newChild</code> is already in the tree, it is first removed. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>newChild</code> of type <a
href='#core-ID-1950641247'><code>Node</code></a></dt>

<dd>The new node to put in the child list.<br />
</dd>

<dt><code class='parameter-name'>oldChild</code> of type <a
class='noxref'
href='#core-ID-1950641247'><code>Node</code></a></dt>

<dd>The node being replaced in the list.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The node replaced.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>HIERARCHY_REQUEST_ERR: Raised if this node is of a type that
does not allow children of the type of the <code>newChild</code>
node, or if the node to put in is one of this node's <a
href='#glossary-dt-ancestor'><em>ancestors</em></a>.</p>

<p>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created
from a different document than the one that created this node.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node or the parent
of the new node is readonly.</p>

<p>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a child of
this node.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-536297177' name='core-ID-536297177'>NodeList</a></i></b></dt>

<dd>
<p>The <code>NodeList</code> interface provides the abstraction of
an ordered collection of nodes, without defining or constraining
how this collection is implemented. <code>NodeList</code> objects
in the DOM are <a href='#core-td-live'><em>live</em></a>.</p>

<p>The items in the <code>NodeList</code> are accessible via an
integral index, starting from 0.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface NodeList {
  Node               item(in unsigned long index);
  readonly attribute unsigned long    length;
};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-203510337' name='core-ID-203510337'>length</a></code> of type <code>unsigned
long</code>, readonly</dt>

<dd>The number of nodes in the list. The range of valid child node
indices is 0 to <code>length-1</code> inclusive.<br />
</dd>
</dl>
</dd>

<dt><b>Methods</b></dt>

<dd>
<dl>
<dt><code class='method-name'><a id='core-ID-844377136' name='core-ID-844377136'>item</a></code></dt>

<dd>
<div class='method'>Returns the <code>index</code>th item in the
collection. If <code>index</code> is greater than or equal to the
number of nodes in the list, this returns <code>null</code>. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>index</code> of type
<code>unsigned long</code></dt>

<dd>Index into the collection.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The node at the <code>index</code>th position in the
<code>NodeList</code>, or <code>null</code> if that is not a valid
index.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-1780488922' name='core-ID-1780488922'>NamedNodeMap</a></i></b></dt>

<dd>
<p>Objects implementing the <code>NamedNodeMap</code> interface are
used to represent collections of nodes that can be accessed by
name. Note that <code>NamedNodeMap</code> does not inherit from <a
href='#core-ID-536297177'><code>NodeList</code></a>;
<code>NamedNodeMaps</code> are not maintained in any particular
order. Objects contained in an object implementing
<code>NamedNodeMap</code> may also be accessed by an ordinal index,
but this is simply to allow convenient enumeration of the contents
of a <code>NamedNodeMap</code>, and does not imply that the DOM
specifies an order to these Nodes.</p>

<p><code>NamedNodeMap</code> objects in the DOM are <a
href='#core-td-live'><em>live</em></a>.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface NamedNodeMap {
  Node               getNamedItem(in DOMString name);
  Node               setNamedItem(in Node arg)
                                        raises(DOMException);
  Node               removeNamedItem(in DOMString name)
                                        raises(DOMException);
  Node               item(in unsigned long index);
  readonly attribute unsigned long    length;
  // Introduced in DOM Level 2:
  Node               getNamedItemNS(in DOMString namespaceURI, 
                                    in DOMString localName);
  // Introduced in DOM Level 2:
  Node               setNamedItemNS(in Node arg)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  Node               removeNamedItemNS(in DOMString namespaceURI, 
                                       in DOMString localName)
                                        raises(DOMException);
};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-6D0FB19E' name='core-ID-6D0FB19E'>length</a></code> of type <code>unsigned
long</code>, readonly</dt>

<dd>The number of nodes in this map. The range of valid child node
indices is <code>0</code> to <code>length-1</code> inclusive.<br />
</dd>
</dl>
</dd>

<dt><b>Methods</b></dt>

<dd>
<dl>
<dt><code class='method-name'><a id='core-ID-1074577549' name='core-ID-1074577549'>getNamedItem</a></code></dt>

<dd>
<div class='method'>Retrieves a node specified by name. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <code>nodeName</code> of a node to retrieve.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>A <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> (of any type)
with the specified <code>nodeName</code>, or <code>null</code> if
it does not identify any node in this map.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-getNamedItemNS' name='core-ID-getNamedItemNS'>getNamedItemNS</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Retrieves a node specified by local name and
namespace URI. HTML-only DOM implementations do not need to
implement this method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the node to retrieve.<br />
</dd>

<dt><code class='parameter-name'>localName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-localname'><em>local
name</em></a> of the node to retrieve.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>A <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> (of any type)
with the specified local name and namespace URI, or
<code>null</code> if they do not identify any node in this map.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-349467F9' name='core-ID-349467F9'>item</a></code></dt>

<dd>
<div class='method'>Returns the <code>index</code>th item in the
map. If <code>index</code> is greater than or equal to the number
of nodes in this map, this returns <code>null</code>. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>index</code> of type
<code>unsigned long</code></dt>

<dd>Index into this map.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The node at the <code>index</code>th position in the map, or
<code>null</code> if that is not a valid index.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-D58B193' name='core-ID-D58B193'>removeNamedItem</a></code></dt>

<dd>
<div class='method'>Removes a node specified by name. When this map
contains the attributes attached to an element, if the removed
attribute is known to have a default value, an attribute
immediately appears containing the default value as well as the
corresponding namespace URI, local name, and prefix when
applicable. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <code>nodeName</code> of the node to remove.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The node removed from this map if a node with such a name
exists.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NOT_FOUND_ERR: Raised if there is no node named
<code>name</code> in this map.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-removeNamedItemNS' name='core-ID-removeNamedItemNS'>removeNamedItemNS</a></code> introduced
in <b class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Removes a node specified by local name and
namespace URI. A removed attribute may be known to have a default
value when this map contains the attributes attached to an element,
as returned by the attributes attribute of the <a
href='#core-ID-1950641247'><code>Node</code></a> interface. If
so, an attribute immediately appears containing the default value
as well as the corresponding namespace URI, local name, and prefix
when applicable.<br />
HTML-only DOM implementations do not need to implement this method.


<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the node to remove.<br />
</dd>

<dt><code class='parameter-name'>localName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-localname'><em>local
name</em></a> of the node to remove.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>The node removed from this map if a node with such a local name
and namespace URI exists.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NOT_FOUND_ERR: Raised if there is no node with the specified
<code>namespaceURI</code> and <code>localName</code> in this
map.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-1025163788' name='core-ID-1025163788'>setNamedItem</a></code></dt>

<dd>
<div class='method'>Adds a node using its <code>nodeName</code>
attribute. If a node with that name is already present in this map,
it is replaced by the new one.<br />
As the <code>nodeName</code> attribute is used to derive the name
which the node must be stored under, multiple nodes of certain
types (those that have a "special" string value) cannot be stored
as the names would clash. This is seen as preferable to allowing
nodes to be aliased. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>arg</code> of type <a
href='#core-ID-1950641247'><code>Node</code></a></dt>

<dd>A node to store in this map. The node will later be accessible
using the value of its <code>nodeName</code> attribute.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>If the new <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> replaces an
existing node the replaced <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> is returned,
otherwise <code>null</code> is returned.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from
a different document than the one that created this map.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>

<p>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an <a
href='#core-ID-637646024'><code>Attr</code></a> that is already
an attribute of another <a
href='#core-ID-745549614'><code>Element</code></a> object. The
DOM user must explicitly clone <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> nodes to re-use
them in other elements.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-setNamedItemNS' name='core-ID-setNamedItemNS'>setNamedItemNS</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Adds a node using its <code>namespaceURI</code>
and <code>localName</code>. If a node with that namespace URI and
that local name is already present in this map, it is replaced by
the new one.<br />
HTML-only DOM implementations do not need to implement this method.


<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>arg</code> of type <a
href='#core-ID-1950641247'><code>Node</code></a></dt>

<dd>A node to store in this map. The node will later be accessible
using the value of its <code>namespaceURI</code> and
<code>localName</code> attributes.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1950641247'><code>Node</code></a></p>
</td>
<td>
<p>If the new <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> replaces an
existing node the replaced <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> is returned,
otherwise <code>null</code> is returned.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from
a different document than the one that created this map.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.</p>

<p>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an <a
href='#core-ID-637646024'><code>Attr</code></a> that is already
an attribute of another <a
href='#core-ID-745549614'><code>Element</code></a> object. The
DOM user must explicitly clone <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> nodes to re-use
them in other elements.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-FF21A306' name='core-ID-FF21A306'>CharacterData</a></i></b></dt>

<dd>
<p>The <code>CharacterData</code> interface extends Node with a set
of attributes and methods for accessing character data in the DOM.
For clarity this set is defined here rather than on each object
that uses these attributes and methods. No DOM objects correspond
directly to <code>CharacterData</code>, though <a
href='#core-ID-1312295772'><code>Text</code></a> and others do
inherit the interface from it. All <code>offsets</code> in this
interface start from <code>0</code>.</p>

<p>As explained in the <a
href='#core-DOMString'><code>DOMString</code></a> interface,
text strings in the DOM are represented in UTF-16, i.e. as a
sequence of 16-bit units. In the following, the term <a
href='#glossary-dt-16-bit-unit'><em>16-bit units</em></a> is
used whenever necessary to indicate that indexing on CharacterData
is done in 16-bit units.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface CharacterData : Node {
           attribute DOMString        data;
                                        // raises(DOMException) on setting
                                        // raises(DOMException) on retrieval

  readonly attribute unsigned long    length;
  DOMString          substringData(in unsigned long offset, 
                                   in unsigned long count)
                                        raises(DOMException);
  void               appendData(in DOMString arg)
                                        raises(DOMException);
  void               insertData(in unsigned long offset, 
                                in DOMString arg)
                                        raises(DOMException);
  void               deleteData(in unsigned long offset, 
                                in unsigned long count)
                                        raises(DOMException);
  void               replaceData(in unsigned long offset, 
                                 in unsigned long count, 
                                 in DOMString arg)
                                        raises(DOMException);
};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-72AB8359' name='core-ID-72AB8359'>data</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The character data of the node that implements this interface.
The DOM implementation may not put arbitrary limits on the amount
of data that may be stored in a <code>CharacterData</code> node.
However, implementation limits may mean that the entirety of a
node's data may not fit into a single <a
href='#core-DOMString'><code>DOMString</code></a>. In such
cases, the user may call <code>substringData</code> to retrieve the
data in appropriately sized pieces.<br />
 

<div class='exceptions'><b>Exceptions on setting</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div class='exceptions'><b>Exceptions on retrieval</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>DOMSTRING_SIZE_ERR: Raised when it would return more characters
than fit in a <a
href='#core-DOMString'><code>DOMString</code></a> variable on
the implementation platform.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</dd>

<dt><code class='attribute-name'><a id='core-ID-7D61178C' name='core-ID-7D61178C'>length</a></code> of type <code>unsigned
long</code>, readonly</dt>

<dd>The number of <a href='#glossary-dt-16-bit-unit'><em>16-bit
units</em></a> that are available through <code>data</code> and the
<code>substringData</code> method below. This may have the value
zero, i.e., <code>CharacterData</code> nodes may be empty.<br />
</dd>
</dl>
</dd>

<dt><b>Methods</b></dt>

<dd>
<dl>
<dt><code class='method-name'><a id='core-ID-32791A2F' name='core-ID-32791A2F'>appendData</a></code></dt>

<dd>
<div class='method'>Append the string to the end of the character
data of the node. Upon success, <code>data</code> provides access
to the concatenation of <code>data</code> and the <a
href='#core-DOMString'><code>DOMString</code></a> specified. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>arg</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a class='noxref'
href='#core-DOMString'><code>DOMString</code></a> to
append.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div><b>No Return Value</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-7C603781' name='core-ID-7C603781'>deleteData</a></code></dt>

<dd>
<div class='method'>Remove a range of <a
href='#glossary-dt-16-bit-unit'><em>16-bit units</em></a> from
the node. Upon success, <code>data</code> and <code>length</code>
reflect the change. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>offset</code> of type
<code>unsigned long</code></dt>

<dd>The offset from which to start removing.<br />
</dd>

<dt><code class='parameter-name'>count</code> of type
<code>unsigned long</code></dt>

<dd>The number of 16-bit units to delete. If the sum of
<code>offset</code> and <code>count</code> exceeds
<code>length</code> then all 16-bit units from <code>offset</code>
to the end of the data are deleted.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is
negative or greater than the number of 16-bit units in
<code>data</code>, or if the specified <code>count</code> is
negative.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div><b>No Return Value</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-3EDB695F' name='core-ID-3EDB695F'>insertData</a></code></dt>

<dd>
<div class='method'>Insert a string at the specified <a
href='#glossary-dt-16-bit-unit'><em>16-bit unit</em></a>
offset. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>offset</code> of type
<code>unsigned long</code></dt>

<dd>The character offset at which to insert.<br />
</dd>

<dt><code class='parameter-name'>arg</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a class='noxref'
href='#core-DOMString'><code>DOMString</code></a> to
insert.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is
negative or greater than the number of 16-bit units in
<code>data</code>.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div><b>No Return Value</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-E5CBA7FB' name='core-ID-E5CBA7FB'>replaceData</a></code></dt>

<dd>
<div class='method'>Replace the characters starting at the
specified <a href='#glossary-dt-16-bit-unit'><em>16-bit
unit</em></a> offset with the specified string. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>offset</code> of type
<code>unsigned long</code></dt>

<dd>The offset from which to start replacing.<br />
</dd>

<dt><code class='parameter-name'>count</code> of type
<code>unsigned long</code></dt>

<dd>The number of 16-bit units to replace. If the sum of
<code>offset</code> and <code>count</code> exceeds
<code>length</code>, then all 16-bit units to the end of the data
are replaced; (i.e., the effect is the same as a
<code>remove</code> method call with the same range, followed by an
<code>append</code> method invocation).<br />
</dd>

<dt><code class='parameter-name'>arg</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a class='noxref'
href='#core-DOMString'><code>DOMString</code></a> with which
the range must be replaced.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is
negative or greater than the number of 16-bit units in
<code>data</code>, or if the specified <code>count</code> is
negative.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div><b>No Return Value</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-6531BCCF' name='core-ID-6531BCCF'>substringData</a></code></dt>

<dd>
<div class='method'>Extracts a range of data from the node. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>offset</code> of type
<code>unsigned long</code></dt>

<dd>Start offset of substring to extract.<br />
</dd>

<dt><code class='parameter-name'>count</code> of type
<code>unsigned long</code></dt>

<dd>The number of 16-bit units to extract.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-DOMString'><code>DOMString</code></a></p>
</td>
<td>
<p>The specified substring. If the sum of <code>offset</code> and
<code>count</code> exceeds the <code>length</code>, then all 16-bit
units to the end of the data are returned.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is
negative or greater than the number of 16-bit units in
<code>data</code>, or if the specified <code>count</code> is
negative.</p>

<p>DOMSTRING_SIZE_ERR: Raised if the specified range of text does
not fit into a <a
href='#core-DOMString'><code>DOMString</code></a>.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-637646024' name='core-ID-637646024'>Attr</a></i></b></dt>

<dd>
<p>The <code>Attr</code> interface represents an attribute in an <a
href='#core-ID-745549614'><code>Element</code></a> object.
Typically the allowable values for the attribute are defined in a
document type definition.</p>

<p><code>Attr</code> objects inherit the <a
href='#core-ID-1950641247'><code>Node</code></a> interface, but
since they are not actually child nodes of the element they
describe, the DOM does not consider them part of the document tree.
Thus, the <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> attributes
<code>parentNode</code>, <code>previousSibling</code>, and
<code>nextSibling</code> have a <code>null</code> value for
<code>Attr</code> objects. The DOM takes the view that attributes
are properties of elements rather than having a separate identity
from the elements they are associated with; this should make it
more efficient to implement such features as default attributes
associated with all elements of a given type. Furthermore,
<code>Attr</code> nodes may not be immediate children of a <a
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>.
However, they can be associated with <a
href='#core-ID-745549614'><code>Element</code></a> nodes
contained within a <a class='noxref'
href='#core-ID-B63ED1A3'><code>DocumentFragment</code></a>. In
short, users and implementors of the DOM need to be aware that
<code>Attr</code> nodes have some things in common with other
objects inheriting the <a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> interface, but
they also are quite distinct.</p>

<p>The attribute's effective value is determined as follows: if
this attribute has been explicitly assigned any value, that value
is the attribute's effective value; otherwise, if there is a
declaration for this attribute, and that declaration includes a
default value, then that default value is the attribute's effective
value; otherwise, the attribute does not exist on this element in
the structure model until it has been explicitly added. Note that
the <code>nodeValue</code> attribute on the <code>Attr</code>
instance can also be used to retrieve the string version of the
attribute's value(s).</p>

<p>In XML, where the value of an attribute can contain entity
references, the child nodes of the <code>Attr</code> node may be
either <a href='#core-ID-1312295772'><code>Text</code></a> or
<a href='#core-ID-11C98490'><code>EntityReference</code></a>
nodes (when these are in use; see the description of <a
class='noxref'
href='#core-ID-11C98490'><code>EntityReference</code></a> for
discussion). Because the DOM Core is not aware of attribute types,
it treats all attribute values as simple strings, even if the DTD
or schema declares them as having <a
href='#glossary-dt-tokenized'><em>tokenized</em></a> types.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface Attr : Node {
  readonly attribute DOMString        name;
  readonly attribute boolean          specified;
           attribute DOMString        value;
                                        // raises(DOMException) on setting

  // Introduced in DOM Level 2:
  readonly attribute Element          ownerElement;
};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-1112119403' name='core-ID-1112119403'>name</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>Returns the name of this attribute.<br />
</dd>

<dt><code class='attribute-name'><a id='core-Attr-ownerElement' name='core-Attr-ownerElement'>ownerElement</a></code> of type <a
href='#core-ID-745549614'><code>Element</code></a>, readonly,
introduced in <b class='version'>DOM Level 2</b></dt>

<dd>The <a href='#core-ID-745549614'><code>Element</code></a>
node this attribute is attached to or <code>null</code> if this
attribute is not in use.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-862529273' name='core-ID-862529273'>specified</a></code> of type
<code>boolean</code>, readonly</dt>

<dd>If this attribute was explicitly given a value in the original
document, this is <code>true</code>; otherwise, it is
<code>false</code>. Note that the implementation is in charge of
this attribute, not the user. If the user changes the value of the
attribute (even if it ends up having the same value as the default
value) then the <code>specified</code> flag is automatically
flipped to <code>true</code>. To re-specify the attribute as the
default value from the DTD, the user must delete the attribute. The
implementation will then make a new attribute available with
<code>specified</code> set to <code>false</code> and the default
value (if one exists).<br />
In summary: 

<ul>
<li>If the attribute has an assigned value in the document then
<code>specified</code> is <code>true</code>, and the value is the
assigned value.</li>

<li>If the attribute has no assigned value in the document and has
a default value in the DTD, then <code>specified</code> is
<code>false</code>, and the value is the default value in the
DTD.</li>

<li>If the attribute has no assigned value in the document and has
a value of #IMPLIED in the DTD, then the attribute does not appear
in the structure model of the document.</li>

<li>If the <code>ownerElement</code> attribute is <code>null</code>
(i.e. because it was just created or was set to <code>null</code>
by the various removal and cloning operations)
<code>specified</code> is <code>true</code>.</li>
</ul>

<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-221662474' name='core-ID-221662474'>value</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>On retrieval, the value of the attribute is returned as a
string. Character and general entity references are replaced with
their values. See also the method <code>getAttribute</code> on the
<a href='#core-ID-745549614'><code>Element</code></a>
interface.<br />
On setting, this creates a <a
href='#core-ID-1312295772'><code>Text</code></a> node with the
unparsed contents of the string. I.e. any characters that an XML
processor would recognize as markup are instead treated as literal
text. See also the method <code>setAttribute</code> on the <a
href='#core-ID-745549614'><code>Element</code></a>
interface.<br />
 

<div class='exceptions'><b>Exceptions on setting</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-745549614' name='core-ID-745549614'>Element</a></i></b></dt>

<dd>
<p>The <code>Element</code> interface represents an <a
href='#glossary-dt-element'><em>element</em></a> in an HTML or
XML document. Elements may have attributes associated with them;
since the <code>Element</code> interface inherits from <a
href='#core-ID-1950641247'><code>Node</code></a>, the generic
<a class='noxref'
href='#core-ID-1950641247'><code>Node</code></a> interface
attribute <code>attributes</code> may be used to retrieve the set
of all attributes for an element. There are methods on the
<code>Element</code> interface to retrieve either an <a
href='#core-ID-637646024'><code>Attr</code></a> object by name
or an attribute value by name. In XML, where an attribute value may
contain entity references, an <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> object should
be retrieved to examine the possibly fairly complex sub-tree
representing the attribute value. On the other hand, in HTML, where
all attributes have simple string values, methods to directly
access an attribute value can safely be used as a <a
href='#glossary-dt-convenience'><em>convenience</em></a>.</p>

<p><b>Note:</b> In DOM Level 2, the method <code>normalize</code>
is inherited from the <a
href='#core-ID-1950641247'><code>Node</code></a> interface
where it was moved.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface Element : Node {
  readonly attribute DOMString        tagName;
  DOMString          getAttribute(in DOMString name);
  void               setAttribute(in DOMString name, 
                                  in DOMString value)
                                        raises(DOMException);
  void               removeAttribute(in DOMString name)
                                        raises(DOMException);
  Attr               getAttributeNode(in DOMString name);
  Attr               setAttributeNode(in Attr newAttr)
                                        raises(DOMException);
  Attr               removeAttributeNode(in Attr oldAttr)
                                        raises(DOMException);
  NodeList           getElementsByTagName(in DOMString name);
  // Introduced in DOM Level 2:
  DOMString          getAttributeNS(in DOMString namespaceURI, 
                                    in DOMString localName);
  // Introduced in DOM Level 2:
  void               setAttributeNS(in DOMString namespaceURI, 
                                    in DOMString qualifiedName, 
                                    in DOMString value)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  void               removeAttributeNS(in DOMString namespaceURI, 
                                       in DOMString localName)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  Attr               getAttributeNodeNS(in DOMString namespaceURI, 
                                        in DOMString localName);
  // Introduced in DOM Level 2:
  Attr               setAttributeNodeNS(in Attr newAttr)
                                        raises(DOMException);
  // Introduced in DOM Level 2:
  NodeList           getElementsByTagNameNS(in DOMString namespaceURI, 
                                            in DOMString localName);
  // Introduced in DOM Level 2:
  boolean            hasAttribute(in DOMString name);
  // Introduced in DOM Level 2:
  boolean            hasAttributeNS(in DOMString namespaceURI, 
                                    in DOMString localName);
};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-104682815' name='core-ID-104682815'>tagName</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>The name of the element. For example, in: 

<div class='code-block'>
<pre>
&lt;elementExample id="demo"&gt; 
        ... 
&lt;/elementExample&gt; ,
</pre>
</div>

<code>tagName</code> has the value <code>"elementExample"</code>.
Note that this is case-preserving in XML, as are all of the
operations of the DOM. The HTML DOM returns the
<code>tagName</code> of an HTML element in the canonical uppercase
form, regardless of the case in the source HTML document.<br />
</dd>
</dl>
</dd>

<dt><b>Methods</b></dt>

<dd>
<dl>
<dt><code class='method-name'><a id='core-ID-666EE0F9' name='core-ID-666EE0F9'>getAttribute</a></code></dt>

<dd>
<div class='method'>Retrieves an attribute value by name. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the attribute to retrieve.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-DOMString'><code>DOMString</code></a></p>
</td>
<td>
<p>The <a href='#core-ID-637646024'><code>Attr</code></a> value
as a string, or the empty string if that attribute does not have a
specified or default value.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-ElGetAttrNS' name='core-ID-ElGetAttrNS'>getAttributeNS</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Retrieves an attribute value by local name and
namespace URI. HTML-only DOM implementations do not need to
implement this method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the attribute to retrieve.<br />
</dd>

<dt><code class='parameter-name'>localName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-localname'><em>local
name</em></a> of the attribute to retrieve.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-DOMString'><code>DOMString</code></a></p>
</td>
<td>
<p>The <a href='#core-ID-637646024'><code>Attr</code></a> value
as a string, or the empty string if that attribute does not have a
specified or default value.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-217A91B8' name='core-ID-217A91B8'>getAttributeNode</a></code></dt>

<dd>
<div class='method'>Retrieves an attribute node by name.<br />
To retrieve an attribute node by qualified name and namespace URI,
use the <code>getAttributeNodeNS</code> method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name (<code>nodeName</code>) of the attribute to
retrieve.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-637646024'><code>Attr</code></a></p>
</td>
<td>
<p>The <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> node with the
specified name (<code>nodeName</code>) or <code>null</code> if
there is no such attribute.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-ElGetAtNodeNS' name='core-ID-ElGetAtNodeNS'>getAttributeNodeNS</a></code> introduced in
<b class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Retrieves an <a
href='#core-ID-637646024'><code>Attr</code></a> node by local
name and namespace URI. HTML-only DOM implementations do not need
to implement this method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the attribute to retrieve.<br />
</dd>

<dt><code class='parameter-name'>localName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-localname'><em>local
name</em></a> of the attribute to retrieve.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-637646024'><code>Attr</code></a></p>
</td>
<td>
<p>The <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> node with the
specified attribute local name and namespace URI or
<code>null</code> if there is no such attribute.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-1938918D' name='core-ID-1938918D'>getElementsByTagName</a></code></dt>

<dd>
<div class='method'>Returns a <a
href='#core-ID-536297177'><code>NodeList</code></a> of all <a
href='#glossary-dt-descendant'><em>descendant</em></a>
<code>Elements</code> with a given tag name, in the order in which
they are encountered in a preorder traversal of this
<code>Element</code> tree. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the tag to match on. The special value "*" matches
all tags.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-536297177'><code>NodeList</code></a></p>
</td>
<td>
<p>A list of matching <code>Element</code> nodes.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-A6C90942' name='core-ID-A6C90942'>getElementsByTagNameNS</a></code> introduced in
<b class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Returns a <a
href='#core-ID-536297177'><code>NodeList</code></a> of all the
<a href='#glossary-dt-descendant'><em>descendant</em></a>
<code>Elements</code> with a given local name and namespace URI in
the order in which they are encountered in a preorder traversal of
this <code>Element</code> tree.<br />
HTML-only DOM implementations do not need to implement this method.


<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the elements to match on. The special value "*"
matches all namespaces.<br />
</dd>

<dt><code class='parameter-name'>localName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-localname'><em>local
name</em></a> of the elements to match on. The special value "*"
matches all local names.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-536297177'><code>NodeList</code></a></p>
</td>
<td>
<p>A new <a class='noxref'
href='#core-ID-536297177'><code>NodeList</code></a> object
containing all the matched <code>Elements</code>.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-ElHasAttr' name='core-ID-ElHasAttr'>hasAttribute</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Returns <code>true</code> when an attribute
with a given name is specified on this element or has a default
value, <code>false</code> otherwise. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the attribute to look for.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>boolean</code></p>
</td>
<td>
<p><code>true</code> if an attribute with the given name is
specified on this element or has a default value,
<code>false</code> otherwise.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-ElHasAttrNS' name='core-ID-ElHasAttrNS'>hasAttributeNS</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Returns <code>true</code> when an attribute
with a given local name and namespace URI is specified on this
element or has a default value, <code>false</code> otherwise.
HTML-only DOM implementations do not need to implement this method.


<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the attribute to look for.<br />
</dd>

<dt><code class='parameter-name'>localName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-localname'><em>local
name</em></a> of the attribute to look for.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>boolean</code></p>
</td>
<td>
<p><code>true</code> if an attribute with the given local name and
namespace URI is specified or has a default value on this element,
<code>false</code> otherwise.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div><b>No Exceptions</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-6D6AC0F9' name='core-ID-6D6AC0F9'>removeAttribute</a></code></dt>

<dd>
<div class='method'>Removes an attribute by name. If the removed
attribute is known to have a default value, an attribute
immediately appears containing the default value as well as the
corresponding namespace URI, local name, and prefix when
applicable.<br />
To remove an attribute by local name and namespace URI, use the
<code>removeAttributeNS</code> method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the attribute to remove.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div><b>No Return Value</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-ElRemAtNS' name='core-ID-ElRemAtNS'>removeAttributeNS</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Removes an attribute by local name and
namespace URI. If the removed attribute has a default value it is
immediately replaced. The replacing attribute has the same
namespace URI and local name, as well as the original prefix.<br />
HTML-only DOM implementations do not need to implement this method.


<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the attribute to remove.<br />
</dd>

<dt><code class='parameter-name'>localName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-localname'><em>local
name</em></a> of the attribute to remove.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div><b>No Return Value</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-D589198' name='core-ID-D589198'>removeAttributeNode</a></code></dt>

<dd>
<div class='method'>Removes the specified attribute node. If the
removed <a href='#core-ID-637646024'><code>Attr</code></a> has
a default value it is immediately replaced. The replacing attribute
has the same namespace URI and local name, as well as the original
prefix, when applicable. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>oldAttr</code> of type <a
href='#core-ID-637646024'><code>Attr</code></a></dt>

<dd>The <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> node to remove
from the attribute list.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-637646024'><code>Attr</code></a></p>
</td>
<td>
<p>The <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> node that was
removed.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>

<p>NOT_FOUND_ERR: Raised if <code>oldAttr</code> is not an
attribute of the element.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-F68F082' name='core-ID-F68F082'>setAttribute</a></code></dt>

<dd>
<div class='method'>Adds a new attribute. If an attribute with that
name is already present in the element, its value is changed to be
that of the value parameter. This value is a simple string; it is
not parsed as it is being set. So any markup (such as syntax to be
recognized as an entity reference) is treated as literal text, and
needs to be appropriately escaped by the implementation when it is
written out. In order to assign an attribute value that contains
entity references, the user must create an <a
href='#core-ID-637646024'><code>Attr</code></a> node plus any
<a href='#core-ID-1312295772'><code>Text</code></a> and <a
href='#core-ID-11C98490'><code>EntityReference</code></a>
nodes, build the appropriate subtree, and use
<code>setAttributeNode</code> to assign it as the value of an
attribute.<br />
To set an attribute with a qualified name and namespace URI, use
the <code>setAttributeNS</code> method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>name</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The name of the attribute to create or alter.<br />
</dd>

<dt><code class='parameter-name'>value</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>Value to set in string form.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified name contains an
illegal character.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div><b>No Return Value</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-ElSetAttrNS' name='core-ID-ElSetAttrNS'>setAttributeNS</a></code> introduced in <b
class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Adds a new attribute. If an attribute with the
same local name and namespace URI is already present on the
element, its prefix is changed to be the prefix part of the
<code>qualifiedName</code>, and its value is changed to be the
<code>value</code> parameter. This value is a simple string; it is
not parsed as it is being set. So any markup (such as syntax to be
recognized as an entity reference) is treated as literal text, and
needs to be appropriately escaped by the implementation when it is
written out. In order to assign an attribute value that contains
entity references, the user must create an <a
href='#core-ID-637646024'><code>Attr</code></a> node plus any
<a href='#core-ID-1312295772'><code>Text</code></a> and <a
href='#core-ID-11C98490'><code>EntityReference</code></a>
nodes, build the appropriate subtree, and use
<code>setAttributeNodeNS</code> or <code>setAttributeNode</code> to
assign it as the value of an attribute.<br />
HTML-only DOM implementations do not need to implement this method.


<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>namespaceURI</code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-namespaceURI'><em>namespace
URI</em></a> of the attribute to create or alter.<br />
</dd>

<dt><code class='parameter-name'>qualifiedName</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The <a href='#glossary-dt-qualifiedname'><em>qualified
name</em></a> of the attribute to create or alter.<br />
</dd>

<dt><code class='parameter-name'>value</code> of type <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The value to set in string form.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INVALID_CHARACTER_ERR: Raised if the specified qualified name
contains an illegal character.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>

<p>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is
malformed, if the <code>qualifiedName</code> has a prefix and the
<code>namespaceURI</code> is <code>null</code>, if the
<code>qualifiedName</code> has a prefix that is "xml" and the
<code>namespaceURI</code> is different from "<a
href='http://www.w3.org/XML/1998/namespace'>http://www.w3.org/XML/1998/namespace</a>",
or if the <code>qualifiedName</code> is "xmlns" and the
<code>namespaceURI</code> is different from "<a
href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>".</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
<div><b>No Return Value</b></div>
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-887236154' name='core-ID-887236154'>setAttributeNode</a></code></dt>

<dd>
<div class='method'>Adds a new attribute node. If an attribute with
that name (<code>nodeName</code>) is already present in the
element, it is replaced by the new one.<br />
To add a new attribute node with a qualified name and namespace
URI, use the <code>setAttributeNodeNS</code> method. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>newAttr</code> of type <a
href='#core-ID-637646024'><code>Attr</code></a></dt>

<dd>The <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> node to add to
the attribute list.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-637646024'><code>Attr</code></a></p>
</td>
<td>
<p>If the <code>newAttr</code> attribute replaces an existing
attribute, the replaced <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> node is
returned, otherwise <code>null</code> is returned.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>WRONG_DOCUMENT_ERR: Raised if <code>newAttr</code> was created
from a different document than the one that created the
element.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>

<p>INUSE_ATTRIBUTE_ERR: Raised if <code>newAttr</code> is already
an attribute of another <code>Element</code> object. The DOM user
must explicitly clone <a
href='#core-ID-637646024'><code>Attr</code></a> nodes to re-use
them in other elements.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='core-ID-ElSetAtNodeNS' name='core-ID-ElSetAtNodeNS'>setAttributeNodeNS</a></code> introduced in
<b class='since'>DOM Level 2</b></dt>

<dd>
<div class='method'>Adds a new attribute. If an attribute with that
local name and that namespace URI is already present in the
element, it is replaced by the new one.<br />
HTML-only DOM implementations do not need to implement this method.


<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>newAttr</code> of type <a
href='#core-ID-637646024'><code>Attr</code></a></dt>

<dd>The <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> node to add to
the attribute list.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-637646024'><code>Attr</code></a></p>
</td>
<td>
<p>If the <code>newAttr</code> attribute replaces an existing
attribute with the same <a
href='#glossary-dt-localname'><em>local name</em></a> and <a
href='#glossary-dt-namespaceURI'><em>namespace URI</em></a>,
the replaced <a class='noxref'
href='#core-ID-637646024'><code>Attr</code></a> node is
returned, otherwise <code>null</code> is returned.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>WRONG_DOCUMENT_ERR: Raised if <code>newAttr</code> was created
from a different document than the one that created the
element.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>

<p>INUSE_ATTRIBUTE_ERR: Raised if <code>newAttr</code> is already
an attribute of another <code>Element</code> object. The DOM user
must explicitly clone <a
href='#core-ID-637646024'><code>Attr</code></a> nodes to re-use
them in other elements.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-1312295772' name='core-ID-1312295772'>Text</a></i></b></dt>

<dd>
<p>The <code>Text</code> interface inherits from <a
href='#core-ID-FF21A306'><code>CharacterData</code></a> and
represents the textual content (termed <a
href='http://www.w3.org/TR/1998/REC-xml-19980210#syntax'><em>character
data</em></a> in XML) of an <a
href='#core-ID-745549614'><code>Element</code></a> or <a
href='#core-ID-637646024'><code>Attr</code></a>. If there is no
markup inside an element's content, the text is contained in a
single object implementing the <code>Text</code> interface that is
the only child of the element. If there is markup, it is parsed
into the <a href='#glossary-dt-infoitem'><em>information
items</em></a> (elements, comments, etc.) and <code>Text</code>
nodes that form the list of children of the element.</p>

<p>When a document is first made available via the DOM, there is
only one <code>Text</code> node for each block of text. Users may
create adjacent <code>Text</code> nodes that represent the contents
of a given element without any intervening markup, but should be
aware that there is no way to represent the separations between
these nodes in XML or HTML, so they will not (in general) persist
between DOM editing sessions. The <code>normalize()</code> method
on <a href='#core-ID-1950641247'><code>Node</code></a> merges
any such adjacent <code>Text</code> objects into a single node for
each block of text.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface Text : CharacterData {
  Text               splitText(in unsigned long offset)
                                        raises(DOMException);
};
</pre>
</div>

<br />
</dd>

<dt><b>Methods</b></dt>

<dd>
<dl>
<dt><code class='method-name'><a id='core-ID-38853C1D' name='core-ID-38853C1D'>splitText</a></code></dt>

<dd>
<div class='method'>Breaks this node into two nodes at the
specified <code>offset</code>, keeping both in the tree as <a
href='#glossary-dt-sibling'><em>siblings</em></a>. After being
split, this node will contain all the content up to the
<code>offset</code> point. A new node of the same type, which
contains all the content at and after the <code>offset</code>
point, is returned. If the original node had a parent node, the new
node is inserted as the next <a
href='#glossary-dt-sibling'><em>sibling</em></a> of the
original node. When the <code>offset</code> is equal to the length
of this node, the new node has no data. 

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>offset</code> of type
<code>unsigned long</code></dt>

<dd>The <a href='#glossary-dt-16-bit-unit'><em>16-bit
unit</em></a> offset at which to split, starting from
<code>0</code>.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a href='#core-ID-1312295772'><code>Text</code></a></p>
</td>
<td>
<p>The new node, of the same type as this node.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>INDEX_SIZE_ERR: Raised if the specified offset is negative or
greater than the number of 16-bit units in <code>data</code>.</p>

<p>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-1728279322' name='core-ID-1728279322'>Comment</a></i></b></dt>

<dd>
<p>This interface inherits from <a
href='#core-ID-FF21A306'><code>CharacterData</code></a> and
represents the content of a comment, i.e., all the characters
between the starting '<code>&lt;!--</code>' and ending
'<code>--&gt;</code>'. Note that this is the definition of a
comment in XML, and, in practice, HTML, although some HTML tools
may implement the full SGML comment structure.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface Comment : CharacterData {
};
</pre>
</div>

<br />
</dd>
</dl>
</dd>
</dl>
</div>

<!-- div2 ID-BBACDC08 -->
<div class='div2'><a id='core-ID-E067D597' name='core-ID-E067D597'></a> 

<h2 id='core-ID-E067D597-h2' class='div2'>1.3. Extended Interfaces</h2>

<p>The interfaces defined here form part of the DOM Core
specification, but objects that expose these interfaces will never
be encountered in a DOM implementation that deals only with HTML.
As such, HTML-only DOM implementations [<a class='noxref'
href='#references-DOMHTML-inf'>DOM Level 2 HTML</a>] do not
need to have objects that implement these interfaces.</p>

<p>The interfaces found within this section are not mandatory. A
DOM application may use the <code>hasFeature(feature,
version)</code> method of the <a
href='#core-ID-102161490'><code>DOMImplementation</code></a>
interface with parameter values "XML" and "2.0" (respectively) to
determine whether or not this module is supported by the
implementation. In order to fully support this module, an
implementation must also support the "Core" feature defined in <a
href='#core-ID-BBACDC08'>Fundamental Interfaces</a>. Please
refer to additional information about <a
href='#introduction-ID-Conformance'>Conformance</a> in this
specification.</p>

<dl>
<dt><b>Interface <i><a id='core-ID-667469212' name='core-ID-667469212'>CDATASection</a></i></b></dt>

<dd>
<p>CDATA sections are used to escape blocks of text containing
characters that would otherwise be regarded as markup. The only
delimiter that is recognized in a CDATA section is the "]]&gt;"
string that ends the CDATA section. CDATA sections cannot be
nested. Their primary purpose is for including material such as XML
fragments, without needing to escape all the delimiters.</p>

<p>The <a href='#core-DOMString'><code>DOMString</code></a>
attribute of the <a
href='#core-ID-1312295772'><code>Text</code></a> node holds the
text that is contained by the CDATA section. Note that this
<em>may</em> contain characters that need to be escaped outside of
CDATA sections and that, depending on the character encoding
("charset") chosen for serialization, it may be impossible to write
out some characters as part of a CDATA section.</p>

<p>The <code>CDATASection</code> interface inherits from the <a
href='#core-ID-FF21A306'><code>CharacterData</code></a>
interface through the <a
href='#core-ID-1312295772'><code>Text</code></a> interface.
Adjacent <code>CDATASection</code> nodes are not merged by use of
the <code>normalize</code> method of the <a
href='#core-ID-1950641247'><code>Node</code></a> interface.</p>

<p><b>Note:</b> Because no markup is recognized within a
<code>CDATASection</code>, character numeric references cannot be
used as an escape mechanism when serializing. Therefore, action
needs to be taken when serializing a <code>CDATASection</code> with
a character encoding where some of the contained characters cannot
be represented. Failure to do so would not produce well-formed
XML.<br />
One potential solution in the serialization process is to end the
CDATA section before the character, output the character using a
character reference or entity reference, and open a new CDATA
section for any further characters in the text node. Note, however,
that some code conversion libraries at the time of writing do not
return an error or exception when a character is missing from the
encoding, making the task of ensuring that data is not corrupted on
serialization more difficult.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface CDATASection : Text {
};
</pre>
</div>

<br />
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-412266927' name='core-ID-412266927'>DocumentType</a></i></b></dt>

<dd>
<p>Each <a href='#core-i-Document'><code>Document</code></a>
has a <code>doctype</code> attribute whose value is either
<code>null</code> or a <code>DocumentType</code> object. The
<code>DocumentType</code> interface in the DOM Core provides an
interface to the list of entities that are defined for the
document, and little else because the effect of namespaces and the
various XML schema efforts on DTD representation are not clearly
understood as of this writing.</p>

<p>The DOM Level 2 doesn't support editing
<code>DocumentType</code> nodes.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface DocumentType : Node {
  readonly attribute DOMString        name;
  readonly attribute NamedNodeMap     entities;
  readonly attribute NamedNodeMap     notations;
  // Introduced in DOM Level 2:
  readonly attribute DOMString        publicId;
  // Introduced in DOM Level 2:
  readonly attribute DOMString        systemId;
  // Introduced in DOM Level 2:
  readonly attribute DOMString        internalSubset;
};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-1788794630' name='core-ID-1788794630'>entities</a></code> of type <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>,
readonly</dt>

<dd>A <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>
containing the general entities, both external and internal,
declared in the DTD. Parameter entities are not contained.
Duplicates are discarded. For example in: 

<div class='code-block'>
<pre>
&lt;!DOCTYPE ex SYSTEM "ex.dtd" [
  &lt;!ENTITY foo "foo"&gt;
  &lt;!ENTITY bar "bar"&gt;
  &lt;!ENTITY bar "bar2"&gt;
  &lt;!ENTITY % baz "baz"&gt;
]&gt;
&lt;ex/&gt;
</pre>
</div>

the interface provides access to <code>foo</code> and the first
declaration of <code>bar</code> but not the second declaration of
<code>bar</code> or <code>baz</code>. Every node in this map also
implements the <a
href='#core-ID-527DCFF2'><code>Entity</code></a>
interface.<br />
The DOM Level 2 does not support editing entities, therefore
<code>entities</code> cannot be altered in any way.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-Core-DocType-internalSubset' name='core-ID-Core-DocType-internalSubset'>internalSubset</a></code> of
type <a href='#core-DOMString'><code>DOMString</code></a>,
readonly, introduced in <b class='version'>DOM Level 2</b></dt>

<dd>The internal subset as a string. 

<p><b>Note:</b> The actual content returned depends on how much
information is available to the implementation. This may vary
depending on various parameters, including the XML processor used
to build the document.</p>
</dd>

<dt><code class='attribute-name'><a id='core-ID-1844763134' name='core-ID-1844763134'>name</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>The name of DTD; i.e., the name immediately following the
<code>DOCTYPE</code> keyword.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-D46829EF' name='core-ID-D46829EF'>notations</a></code> of type <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>,
readonly</dt>

<dd>A <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>
containing the notations declared in the DTD. Duplicates are
discarded. Every node in this map also implements the <a
href='#core-ID-5431D1B9'><code>Notation</code></a>
interface.<br />
The DOM Level 2 does not support editing notations, therefore
<code>notations</code> cannot be altered in any way.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-Core-DocType-publicId' name='core-ID-Core-DocType-publicId'>publicId</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>, readonly,
introduced in <b class='version'>DOM Level 2</b></dt>

<dd>The public identifier of the external subset.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-Core-DocType-systemId' name='core-ID-Core-DocType-systemId'>systemId</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>, readonly,
introduced in <b class='version'>DOM Level 2</b></dt>

<dd>The system identifier of the external subset.<br />
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-5431D1B9' name='core-ID-5431D1B9'>Notation</a></i></b></dt>

<dd>
<p>This interface represents a notation declared in the DTD. A
notation either declares, by name, the format of an unparsed entity
(see <a
href='http://www.w3.org/TR/1998/REC-xml-19980210#Notations'><em>section
4.7</em></a> of the XML 1.0 specification [<a class='noxref'
href='#references-XML'>XML</a>]), or is used for formal
declaration of processing instruction targets (see <a
href='http://www.w3.org/TR/1998/REC-xml-19980210#sec-pi'><em>section
2.6</em></a> of the XML 1.0 specification [<a class='noxref'
href='#references-XML'>XML</a>]). The <code>nodeName</code>
attribute inherited from <a
href='#core-ID-1950641247'><code>Node</code></a> is set to the
declared name of the notation.</p>

<p>The DOM Level 1 does not support editing <code>Notation</code>
nodes; they are therefore <a
href='#glossary-dt-readonly-node'><em>readonly</em></a>.</p>

<p>A <code>Notation</code> node does not have any parent.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface Notation : Node {
  readonly attribute DOMString        publicId;
  readonly attribute DOMString        systemId;
};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-54F2B4D0' name='core-ID-54F2B4D0'>publicId</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>The public identifier of this notation. If the public
identifier was not specified, this is <code>null</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-E8AAB1D0' name='core-ID-E8AAB1D0'>systemId</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>The system identifier of this notation. If the system
identifier was not specified, this is <code>null</code>.<br />
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-527DCFF2' name='core-ID-527DCFF2'>Entity</a></i></b></dt>

<dd>
<p>This interface represents an entity, either parsed or unparsed,
in an XML document. Note that this models the entity itself
<em>not</em> the entity declaration. <code>Entity</code>
declaration modeling has been left for a later Level of the DOM
specification.</p>

<p>The <code>nodeName</code> attribute that is inherited from <a
href='#core-ID-1950641247'><code>Node</code></a> contains the
name of the entity.</p>

<p>An XML processor may choose to completely expand entities before
the structure model is passed to the DOM; in this case there will
be no <a
href='#core-ID-11C98490'><code>EntityReference</code></a> nodes
in the document tree.</p>

<p>XML does not mandate that a non-validating XML processor read
and process entity declarations made in the external subset or
declared in external parameter entities. This means that parsed
entities declared in the external subset need not be expanded by
some classes of applications, and that the replacement value of the
entity may not be available. When the replacement value is
available, the corresponding <code>Entity</code> node's child list
represents the structure of that replacement text. Otherwise, the
child list is empty.</p>

<p>The DOM Level 2 does not support editing <code>Entity</code>
nodes; if a user wants to make changes to the contents of an
<code>Entity</code>, every related <a
href='#core-ID-11C98490'><code>EntityReference</code></a> node
has to be replaced in the structure model by a clone of the
<code>Entity</code>'s contents, and then the desired changes must
be made to each of those clones instead. <code>Entity</code> nodes
and all their <a
href='#glossary-dt-descendant'><em>descendants</em></a> are <a
href='#glossary-dt-readonly-node'><em>readonly</em></a>.</p>

<p>An <code>Entity</code> node does not have any parent.</p>

<p><b>Note:</b> If the entity contains an unbound <a
href='#glossary-dt-namespaceprefix'><em>namespace
prefix</em></a>, the <code>namespaceURI</code> of the corresponding
node in the <code>Entity</code> node subtree is <code>null</code>.
The same is true for <a
href='#core-ID-11C98490'><code>EntityReference</code></a> nodes
that refer to this entity, when they are created using the
<code>createEntityReference</code> method of the <a
href='#core-i-Document'><code>Document</code></a> interface.
The DOM Level 2 does not support any mechanism to resolve namespace
prefixes.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface Entity : Node {
  readonly attribute DOMString        publicId;
  readonly attribute DOMString        systemId;
  readonly attribute DOMString        notationName;
};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-6ABAEB38' name='core-ID-6ABAEB38'>notationName</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>For unparsed entities, the name of the notation for the entity.
For parsed entities, this is <code>null</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-D7303025' name='core-ID-D7303025'>publicId</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>The public identifier associated with the entity, if specified.
If the public identifier was not specified, this is
<code>null</code>.<br />
</dd>

<dt><code class='attribute-name'><a id='core-ID-D7C29F3E' name='core-ID-D7C29F3E'>systemId</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>The system identifier associated with the entity, if specified.
If the system identifier was not specified, this is
<code>null</code>.<br />
</dd>
</dl>
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-11C98490' name='core-ID-11C98490'>EntityReference</a></i></b></dt>

<dd>
<p><code>EntityReference</code> objects may be inserted into the
structure model when an entity reference is in the source document,
or when the user wishes to insert an entity reference. Note that
character references and references to predefined entities are
considered to be expanded by the HTML or XML processor so that
characters are represented by their Unicode equivalent rather than
by an entity reference. Moreover, the XML processor may completely
expand references to entities while building the structure model,
instead of providing <code>EntityReference</code> objects. If it
does provide such objects, then for a given
<code>EntityReference</code> node, it may be that there is no <a
href='#core-ID-527DCFF2'><code>Entity</code></a> node
representing the referenced entity. If such an <a class='noxref'
href='#core-ID-527DCFF2'><code>Entity</code></a> exists, then
the subtree of the <code>EntityReference</code> node is in general
a copy of the <a class='noxref'
href='#core-ID-527DCFF2'><code>Entity</code></a> node subtree.
However, this may not be true when an entity contains an unbound <a
href='#glossary-dt-namespaceprefix'><em>namespace
prefix</em></a>. In such a case, because the namespace prefix
resolution depends on where the entity reference is, the <a
href='#glossary-dt-descendant'><em>descendants</em></a> of the
<code>EntityReference</code> node may be bound to different <a
href='#glossary-dt-namespaceURI'><em>namespace
URIs</em></a>.</p>

<p>As for <a href='#core-ID-527DCFF2'><code>Entity</code></a>
nodes, <code>EntityReference</code> nodes and all their <a
href='#glossary-dt-descendant'><em>descendants</em></a> are <a
href='#glossary-dt-readonly-node'><em>readonly</em></a>.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface EntityReference : Node {
};
</pre>
</div>

<br />
</dd>
</dl>
</dd>

<dt><b>Interface <i><a id='core-ID-1004215813' name='core-ID-1004215813'>ProcessingInstruction</a></i></b></dt>

<dd>
<p>The <code>ProcessingInstruction</code> interface represents a
"processing instruction", used in XML as a way to keep
processor-specific information in the text of the document.</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface ProcessingInstruction : Node {
  readonly attribute DOMString        target;
           attribute DOMString        data;
                                        // raises(DOMException) on setting

};
</pre>
</div>

<br />
</dd>

<dt><b>Attributes</b></dt>

<dd>
<dl>
<dt><code class='attribute-name'><a id='core-ID-837822393' name='core-ID-837822393'>data</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a></dt>

<dd>The content of this processing instruction. This is from the
first non white space character after the target to the character
immediately preceding the <code>?&gt;</code>.<br />
 

<div class='exceptions'><b>Exceptions on setting</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><a
href='#core-ID-17189187'><code>DOMException</code></a></p>
</td>
<td>
<p>NO_MODIFICATION_ALLOWED_ERR: Raised when the node is
readonly.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</dd>

<dt><code class='attribute-name'><a id='core-ID-1478689192' name='core-ID-1478689192'>target</a></code> of type <a
href='#core-DOMString'><code>DOMString</code></a>,
readonly</dt>

<dd>The target of this processing instruction. XML defines this as
being the first <a href='#glossary-dt-token'><em>token</em></a>
following the markup that begins the processing instruction.<br />
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</div>

<!-- div2 ID-E067D597 --></div>

<!-- div1 Core -->


<a name='changes'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='changes-Changes' name='changes-Changes'></a> 

<h1 id='changes-Changes-h1' class='adiv1'>Appendix A: Changes</h1>

<dl>
<dt><i>Editors</i></dt>

<dd>Arnaud Le Hors, IBM</dd>

<dd>Philippe Le H&eacute;garet, W3C</dd>
</dl>

<div class='div2'><a id='changes-DOMLevel1to2Changes' name='changes-DOMLevel1to2Changes'></a> 

<h2 id='changes-DOMLevel1to2Changes-h2' class='adiv2'>A.1: Changes between
DOM Level 1 Core and DOM Level 2 Core</h2>

<dl>
<dt><b>OMG IDL</b></dt>

<dd>The DOM Level 2 specifications are now using Corba 2.3.1
instead of Corba 2.2.</dd>

<dt><b>Type <a
href='#core-DOMString'><code>DOMString</code></a></b></dt>

<dd>The definition of <a
href='#core-DOMString'><code>DOMString</code></a> in IDL is now
a <code>valuetype</code>.</dd>
</dl>

<div class='div3'><a id='changes-DOMLevel1Changes' name='changes-DOMLevel1Changes'></a> 

<h3 id='changes-DOMLevel1Changes-h3' class='adiv3'>A.1.1: Changes to DOM
Level 1 Core interfaces and exceptions</h3>

<dl>
<dt><b>Interface <a
href='#core-ID-637646024'><code>Attr</code></a></b></dt>

<dd>The <a href='#core-ID-637646024'><code>Attr</code></a>
interface has one new attribute: <code>ownerElement</code>.</dd>

<dt><b>Interface <a
href='#core-i-Document'><code>Document</code></a></b></dt>

<dd>The <a href='#core-i-Document'><code>Document</code></a>
interface has five new methods: <code>importNode</code>,
<code>createElementNS</code>, <code>createAttributeNS</code>,
<code>getElementsByTagNameNS</code> and
<code>getElementById</code>.</dd>

<dt><b>Interface <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a></b></dt>

<dd>The <a
href='#core-ID-1780488922'><code>NamedNodeMap</code></a>
interface has three new methods: <code>getNamedItemNS</code>,
<code>setNamedItemNS</code>, <code>removeNamedItemNS</code>.</dd>

<dt><b>Interface <a
href='#core-ID-1950641247'><code>Node</code></a></b></dt>

<dd>The <a href='#core-ID-1950641247'><code>Node</code></a>
interface has two new methods: <code>isSupported</code> and
<code>hasAttributes</code>.<br />
<code>normalize</code>, previously in the <a
href='#core-ID-745549614'><code>Element</code></a> interface,
has been moved in the <a
href='#core-ID-1950641247'><code>Node</code></a>
interface.<br />
The <a href='#core-ID-1950641247'><code>Node</code></a>
interface has three new attributes: <code>namespaceURI</code>,
<code>prefix</code> and <code>localName</code>.<br />
The <code>ownerDocument</code> attribute was specified to be
<code>null</code> when the node is a <a
href='#core-i-Document'><code>Document</code></a>. It now is
also <code>null</code> when the node is a <a
href='#core-ID-412266927'><code>DocumentType</code></a> which
is not used with any <a class='noxref'
href='#core-i-Document'><code>Document</code></a> yet.</dd>

<dt><b>Interface <a
href='#core-ID-412266927'><code>DocumentType</code></a></b></dt>

<dd>The <a
href='#core-ID-412266927'><code>DocumentType</code></a>
interface has three attributes: <code>publicId</code>,
<code>systemId</code> and <code>internalSubset</code>.</dd>

<dt><b>Interface <a
href='#core-ID-102161490'><code>DOMImplementation</code></a></b></dt>

<dd>The <a
href='#core-ID-102161490'><code>DOMImplementation</code></a>
interface has two new methods: <code>createDocumentType</code> and
<code>createDocument</code>.</dd>

<dt><b>Interface <a
href='#core-ID-745549614'><code>Element</code></a></b></dt>

<dd>The <a href='#core-ID-745549614'><code>Element</code></a>
interface has eight new methods: <code>getAttributeNS</code>,
<code>setAttributeNS</code>, <code>removeAttributeNS</code>,
<code>getAttributeNodeNS</code>, <code>setAttributeNodeNS</code>,
<code>getElementsByTagNameNS</code>, <code>hasAttribute</code> and
<code>hasAttributeNS</code>.<br />
The method <code>normalize</code> is now inherited from the <a
href='#core-ID-1950641247'><code>Node</code></a> interface
where it was moved.</dd>

<dt><b>Exception <a
href='#core-ID-17189187'><code>DOMException</code></a></b></dt>

<dd>The <a
href='#core-ID-17189187'><code>DOMException</code></a> has five
new exception codes: <code>INVALID_STATE_ERR</code>,
<code>SYNTAX_ERR</code>, <code>INVALID_MODIFICATION_ERR</code>,
<code>NAMESPACE_ERR</code> and
<code>INVALID_ACCESS_ERR</code>.</dd>
</dl>
</div>

<!-- div3 DOMLevel1Changes -->
<div class='div3'><a id='changes-DOMLevel2Addons' name='changes-DOMLevel2Addons'></a> 

<h3 id='changes-DOMLevel2Addons-h3' class='adiv3'>A.1.2: New features</h3>

<div class='div4'><a id='changes-DOMLevel2Addons-types' name='changes-DOMLevel2Addons-types'></a> 

<h4 id='changes-DOMLevel2Addons-types-h4' class='adiv4'>A.1.2.1: New
types</h4>

<dl>
<dt><b><a
href='#core-DOMTimeStamp'><code>DOMTimeStamp</code></a></b></dt>

<dd>The <a
href='#core-DOMTimeStamp'><code>DOMTimeStamp</code></a> type
was added to the Core module.</dd>
</dl>
</div>

<!-- div4 DOMLevel2Addons-types --></div>

<!-- div3 DOMLevel2Addons --></div>

<!-- div2 DOMLevel1to2Changes --></div>

<!-- div1 Changes -->


<a name='i18n'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='i18n-i18n' name='i18n-i18n'></a> 

<h1 id='i18n-i18n-h1' class='adiv1'>Appendix B: Accessing code point
boundaries</h1>

<dl>
<dd>Mark Davis, IBM</dd>

<dd>Lauren Wood, SoftQuad Software Inc.</dd>
</dl>

<div class='noprint'>
<h2 id='i18n-table-of-contents'>Table of contents</h2>

<ul class='toc'>
<li class='tocline3'><a class='tocxref'
href='#i18n-i18n-introduction'>2.1. Introduction</a></li>

<li class='tocline3'><a class='tocxref' href='#i18n-i18n-methods'>2.2.
Methods</a> 

<ul class='toc'>
<li class='tocline4'><a
href='#i18n-i18n-methods-StringExtend'>StringExtend</a></li>
</ul>
</li>
</ul>
</div>

<div class='div2'><a id='i18n-i18n-introduction' name='i18n-i18n-introduction'></a> 

<h2 id='i18n-i18n-introduction-h2' class='adiv2'>B.1: Introduction</h2>

<p>This appendix is an informative, not a normative, part of the
Level 2 DOM specification.</p>

<p>Characters are represented in Unicode by numbers called <i>code
points</i> (also called <i>scalar values</i>). These numbers can
range from 0 up to 1,114,111 = 10FFFF<sub>16</sub> (although some
of these values are illegal). Each code point can be directly
encoded with a 32-bit code unit. This encoding is termed UCS-4 (or
UTF-32). The DOM specification, however, uses UTF-16, in which the
most frequent characters (which have values less than
FFFF<sub>16</sub>) are represented by a single 16-bit code unit,
while characters above FFFF<sub>16</sub> use a special pair of code
units called a <i>surrogate pair</i>. For more information, see [<a
class='noxref' href='#references-Unicode'>Unicode</a>] or the
Unicode Web site.</p>

<p>While indexing by code points as opposed to code units is not
common in programs, some specifications such as XPath (and
therefore XSLT and XPointer) use code point indices. For
interfacing with such formats it is recommended that the
programming language provide string processing methods for
converting code point indices to code unit indices and back. Some
languages do not provide these functions natively; for these it is
recommended that the native <code>String</code> type that is bound
to <a href='#core-DOMString'><code>DOMString</code></a> be
extended to enable this conversion. An example of how such an API
might look is supplied below.</p>

<p><b>Note:</b> Since these methods are supplied as an illustrative
example of the type of functionality that is required, the names of
the methods, exceptions, and interface may differ from those given
here.</p>
</div>

<!-- div2 i18n-introduction -->
<div class='div2'><a id='i18n-i18n-methods' name='i18n-i18n-methods'></a> 

<h2 id='i18n-i18n-methods-h2' class='adiv2'>B.2: Methods</h2>

<dl>
<dt><b>Interface <i><a id='i18n-i18n-methods-StringExtend' name='i18n-i18n-methods-StringExtend'>StringExtend</a></i></b></dt>

<dd>
<p>Extensions to a language's native String class or interface</p>

<dl>
<dt><br />
<b>IDL Definition</b></dt>

<dd>
<div class='idl-code'>
<pre>
interface StringExtend {
  int                findOffset16(in int offset32)
                                        raises(StringIndexOutOfBoundsException);
  int                findOffset32(in int offset16)
                                        raises(StringIndexOutOfBoundsException);
};
</pre>
</div>

<br />
</dd>

<dt><b>Methods</b></dt>

<dd>
<dl>
<dt><code class='method-name'><a id='i18n-i18n-methods-StringExtend-findOffset16' name='i18n-i18n-methods-StringExtend-findOffset16'>findOffset16</a></code></dt>

<dd>
<div class='method'>Returns the UTF-16 offset that corresponds to a
UTF-32 offset. Used for random access. 

<p><b>Note:</b> You can always round-trip from a UTF-32 offset to a
UTF-16 offset and back. You can round-trip from a UTF-16 offset to
a UTF-32 offset and back if and only if the offset16 is not in the
middle of a surrogate pair. Unmatched surrogates count as a single
UTF-16 value.</p>

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>offset32</code> of type
<code>int</code></dt>

<dd>UTF-32 offset.<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>int</code></p>
</td>
<td>
<p>UTF-16 offset</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>StringIndexOutOfBoundsException</code></p>
</td>
<td>
<p>if <code>offset32</code> is out of bounds.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>

<dt><code class='method-name'><a id='i18n-i18n-methods-StringExtend-findOffset32' name='i18n-i18n-methods-StringExtend-findOffset32'>findOffset32</a></code></dt>

<dd>
<div class='method'>Returns the UTF-32 offset corresponding to a
UTF-16 offset. Used for random access. To find the UTF-32 length of
a string, use: 

<div class='eg'>
<pre>
len32 = findOffset32(source, source.length());
</pre>
</div>

<p><b>Note:</b> If the UTF-16 offset is into the middle of a
surrogate pair, then the UTF-32 offset of the <em>end</em> of the
pair is returned; that is, the index of the char after the end of
the pair. You can always round-trip from a UTF-32 offset to a
UTF-16 offset and back. You can round-trip from a UTF-16 offset to
a UTF-32 offset and back if and only if the offset16 is not in the
middle of a surrogate pair. Unmatched surrogates count as a single
UTF-16 value.</p>

<div class='parameters'><b>Parameters</b> 

<div class='paramtable'>
<dl>
<dt><code class='parameter-name'>offset16</code> of type
<code>int</code></dt>

<dd>UTF-16 offset<br />
</dd>
</dl>
</div>
</div>

<!-- parameters -->
<div class='return'><b>Return Value</b> 

<div class='returntable'>
<table
summary='Layout table: the first cell contains the type of the return value, the second contains a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>int</code></p>
</td>
<td>
<p>UTF-32 offset</p>
</td>
</tr>
</table>
</div>
</div>

<!-- return -->
<div class='exceptions'><b>Exceptions</b> 

<div class='exceptiontable'>
<table
summary='Layout table: the first cell contains the type of the exception, the second contains the specific error code and a short description'
 border='0'>
<tr>
<td valign='top'>
<p><code>StringIndexOutOfBoundsException</code></p>
</td>
<td>
<p>if offset16 is out of bounds.</p>
</td>
</tr>
</table>
</div>
</div>

<!-- exceptions -->
</div>

<!-- method -->
</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</div>

<!-- div2 i18n-methods --></div>

<!-- div1 i18n -->


<a name='idl-definitions'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='idl-definitions-idl' name='idl-definitions-idl'></a> 

<h1 id='idl-definitions-idl-h1' class='adiv1'>Appendix C: IDL Definitions</h1>

<p>This appendix contains the complete OMG IDL [<a class='noxref'
href='#references-OMGIDL'>OMGIDL</a>] for the Level 2 Document
Object Model Core definitions.</p>

<p>The IDL files are also available as: <a
href='#idl.zip'>http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/idl.zip</a></p>

<h3 id='idl-definitions-idl-dom.idl'><a href='idl/dom.idl'>dom.idl</a>:</h3>

<div class='idl-code'>
<pre>
// File: dom.idl

#ifndef _DOM_IDL_
#define _DOM_IDL_

#pragma prefix "w3c.org"
module dom
{

  valuetype DOMString sequence&lt;unsigned short&gt;;

  typedef   unsigned long long DOMTimeStamp;

  interface DocumentType;
  interface Document;
  interface NodeList;
  interface NamedNodeMap;
  interface Element;

  exception DOMException {
    unsigned short   code;
  };
  // ExceptionCode
  const unsigned short      INDEX_SIZE_ERR                 = 1;
  const unsigned short      DOMSTRING_SIZE_ERR             = 2;
  const unsigned short      HIERARCHY_REQUEST_ERR          = 3;
  const unsigned short      WRONG_DOCUMENT_ERR             = 4;
  const unsigned short      INVALID_CHARACTER_ERR          = 5;
  const unsigned short      NO_DATA_ALLOWED_ERR            = 6;
  const unsigned short      NO_MODIFICATION_ALLOWED_ERR    = 7;
  const unsigned short      NOT_FOUND_ERR                  = 8;
  const unsigned short      NOT_SUPPORTED_ERR              = 9;
  const unsigned short      INUSE_ATTRIBUTE_ERR            = 10;
  // Introduced in DOM Level 2:
  const unsigned short      INVALID_STATE_ERR              = 11;
  // Introduced in DOM Level 2:
  const unsigned short      SYNTAX_ERR                     = 12;
  // Introduced in DOM Level 2:
  const unsigned short      INVALID_MODIFICATION_ERR       = 13;
  // Introduced in DOM Level 2:
  const unsigned short      NAMESPACE_ERR                  = 14;
  // Introduced in DOM Level 2:
  const unsigned short      INVALID_ACCESS_ERR             = 15;


  interface DOMImplementation {
    boolean            hasFeature(in DOMString feature, 
                                  in DOMString version);
    // Introduced in DOM Level 2:
    DocumentType       createDocumentType(in DOMString qualifiedName, 
                                          in DOMString publicId, 
                                          in DOMString systemId)
                                        raises(DOMException);
    // Introduced in DOM Level 2:
    Document           createDocument(in DOMString namespaceURI, 
                                      in DOMString qualifiedName, 
                                      in DocumentType doctype)
                                        raises(DOMException);
  };

  interface Node {

    // NodeType
    const unsigned short      ELEMENT_NODE                   = 1;
    const unsigned short      ATTRIBUTE_NODE                 = 2;
    const unsigned short      TEXT_NODE                      = 3;
    const unsigned short      CDATA_SECTION_NODE             = 4;
    const unsigned short      ENTITY_REFERENCE_NODE          = 5;
    const unsigned short      ENTITY_NODE                    = 6;
    const unsigned short      PROCESSING_INSTRUCTION_NODE    = 7;
    const unsigned short      COMMENT_NODE                   = 8;
    const unsigned short      DOCUMENT_NODE                  = 9;
    const unsigned short      DOCUMENT_TYPE_NODE             = 10;
    const unsigned short      DOCUMENT_FRAGMENT_NODE         = 11;
    const unsigned short      NOTATION_NODE                  = 12;

    readonly attribute DOMString        nodeName;
             attribute DOMString        nodeValue;
                                        // raises(DOMException) on setting
                                        // raises(DOMException) on retrieval

    readonly attribute unsigned short   nodeType;
    readonly attribute Node             parentNode;
    readonly attribute NodeList         childNodes;
    readonly attribute Node             firstChild;
    readonly attribute Node             lastChild;
    readonly attribute Node             previousSibling;
    readonly attribute Node             nextSibling;
    readonly attribute NamedNodeMap     attributes;
    // Modified in DOM Level 2:
    readonly attribute Document         ownerDocument;
    Node               insertBefore(in Node newChild, 
                                    in Node refChild)
                                        raises(DOMException);
    Node               replaceChild(in Node newChild, 
                                    in Node oldChild)
                                        raises(DOMException);
    Node               removeChild(in Node oldChild)
                                        raises(DOMException);
    Node               appendChild(in Node newChild)
                                        raises(DOMException);
    boolean            hasChildNodes();
    Node               cloneNode(in boolean deep);
    // Modified in DOM Level 2:
    void               normalize();
    // Introduced in DOM Level 2:
    boolean            isSupported(in DOMString feature, 
                                   in DOMString version);
    // Introduced in DOM Level 2:
    readonly attribute DOMString        namespaceURI;
    // Introduced in DOM Level 2:
             attribute DOMString        prefix;
                                        // raises(DOMException) on setting

    // Introduced in DOM Level 2:
    readonly attribute DOMString        localName;
    // Introduced in DOM Level 2:
    boolean            hasAttributes();
  };

  interface NodeList {
    Node               item(in unsigned long index);
    readonly attribute unsigned long    length;
  };

  interface NamedNodeMap {
    Node               getNamedItem(in DOMString name);
    Node               setNamedItem(in Node arg)
                                        raises(DOMException);
    Node               removeNamedItem(in DOMString name)
                                        raises(DOMException);
    Node               item(in unsigned long index);
    readonly attribute unsigned long    length;
    // Introduced in DOM Level 2:
    Node               getNamedItemNS(in DOMString namespaceURI, 
                                      in DOMString localName);
    // Introduced in DOM Level 2:
    Node               setNamedItemNS(in Node arg)
                                        raises(DOMException);
    // Introduced in DOM Level 2:
    Node               removeNamedItemNS(in DOMString namespaceURI, 
                                         in DOMString localName)
                                        raises(DOMException);
  };

  interface CharacterData : Node {
             attribute DOMString        data;
                                        // raises(DOMException) on setting
                                        // raises(DOMException) on retrieval

    readonly attribute unsigned long    length;
    DOMString          substringData(in unsigned long offset, 
                                     in unsigned long count)
                                        raises(DOMException);
    void               appendData(in DOMString arg)
                                        raises(DOMException);
    void               insertData(in unsigned long offset, 
                                  in DOMString arg)
                                        raises(DOMException);
    void               deleteData(in unsigned long offset, 
                                  in unsigned long count)
                                        raises(DOMException);
    void               replaceData(in unsigned long offset, 
                                   in unsigned long count, 
                                   in DOMString arg)
                                        raises(DOMException);
  };

  interface Attr : Node {
    readonly attribute DOMString        name;
    readonly attribute boolean          specified;
             attribute DOMString        value;
                                        // raises(DOMException) on setting

    // Introduced in DOM Level 2:
    readonly attribute Element          ownerElement;
  };

  interface Element : Node {
    readonly attribute DOMString        tagName;
    DOMString          getAttribute(in DOMString name);
    void               setAttribute(in DOMString name, 
                                    in DOMString value)
                                        raises(DOMException);
    void               removeAttribute(in DOMString name)
                                        raises(DOMException);
    Attr               getAttributeNode(in DOMString name);
    Attr               setAttributeNode(in Attr newAttr)
                                        raises(DOMException);
    Attr               removeAttributeNode(in Attr oldAttr)
                                        raises(DOMException);
    NodeList           getElementsByTagName(in DOMString name);
    // Introduced in DOM Level 2:
    DOMString          getAttributeNS(in DOMString namespaceURI, 
                                      in DOMString localName);
    // Introduced in DOM Level 2:
    void               setAttributeNS(in DOMString namespaceURI, 
                                      in DOMString qualifiedName, 
                                      in DOMString value)
                                        raises(DOMException);
    // Introduced in DOM Level 2:
    void               removeAttributeNS(in DOMString namespaceURI, 
                                         in DOMString localName)
                                        raises(DOMException);
    // Introduced in DOM Level 2:
    Attr               getAttributeNodeNS(in DOMString namespaceURI, 
                                          in DOMString localName);
    // Introduced in DOM Level 2:
    Attr               setAttributeNodeNS(in Attr newAttr)
                                        raises(DOMException);
    // Introduced in DOM Level 2:
    NodeList           getElementsByTagNameNS(in DOMString namespaceURI, 
                                              in DOMString localName);
    // Introduced in DOM Level 2:
    boolean            hasAttribute(in DOMString name);
    // Introduced in DOM Level 2:
    boolean            hasAttributeNS(in DOMString namespaceURI, 
                                      in DOMString localName);
  };

  interface Text : CharacterData {
    Text               splitText(in unsigned long offset)
                                        raises(DOMException);
  };

  interface Comment : CharacterData {
  };

  interface CDATASection : Text {
  };

  interface DocumentType : Node {
    readonly attribute DOMString        name;
    readonly attribute NamedNodeMap     entities;
    readonly attribute NamedNodeMap     notations;
    // Introduced in DOM Level 2:
    readonly attribute DOMString        publicId;
    // Introduced in DOM Level 2:
    readonly attribute DOMString        systemId;
    // Introduced in DOM Level 2:
    readonly attribute DOMString        internalSubset;
  };

  interface Notation : Node {
    readonly attribute DOMString        publicId;
    readonly attribute DOMString        systemId;
  };

  interface Entity : Node {
    readonly attribute DOMString        publicId;
    readonly attribute DOMString        systemId;
    readonly attribute DOMString        notationName;
  };

  interface EntityReference : Node {
  };

  interface ProcessingInstruction : Node {
    readonly attribute DOMString        target;
             attribute DOMString        data;
                                        // raises(DOMException) on setting

  };

  interface DocumentFragment : Node {
  };

  interface Document : Node {
    readonly attribute DocumentType     doctype;
    readonly attribute DOMImplementation  implementation;
    readonly attribute Element          documentElement;
    Element            createElement(in DOMString tagName)
                                        raises(DOMException);
    DocumentFragment   createDocumentFragment();
    Text               createTextNode(in DOMString data);
    Comment            createComment(in DOMString data);
    CDATASection       createCDATASection(in DOMString data)
                                        raises(DOMException);
    ProcessingInstruction createProcessingInstruction(in DOMString target, 
                                                      in DOMString data)
                                        raises(DOMException);
    Attr               createAttribute(in DOMString name)
                                        raises(DOMException);
    EntityReference    createEntityReference(in DOMString name)
                                        raises(DOMException);
    NodeList           getElementsByTagName(in DOMString tagname);
    // Introduced in DOM Level 2:
    Node               importNode(in Node importedNode, 
                                  in boolean deep)
                                        raises(DOMException);
    // Introduced in DOM Level 2:
    Element            createElementNS(in DOMString namespaceURI, 
                                       in DOMString qualifiedName)
                                        raises(DOMException);
    // Introduced in DOM Level 2:
    Attr               createAttributeNS(in DOMString namespaceURI, 
                                         in DOMString qualifiedName)
                                        raises(DOMException);
    // Introduced in DOM Level 2:
    NodeList           getElementsByTagNameNS(in DOMString namespaceURI, 
                                              in DOMString localName);
    // Introduced in DOM Level 2:
    Element            getElementById(in DOMString elementId);
  };
};

#endif // _DOM_IDL_

</pre>
</div>
</div>

<!-- div1 idl -->


<a name='java-binding'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='java-binding-java-binding' name='java-binding-java-binding'></a> 

<h1 id='java-binding-java-binding-h1' class='adiv1'>Appendix D: Java Language
Binding</h1>

<p>This appendix contains the complete Java Language [<a
class='noxref' href='#references-Java'>Java</a>] binding for
the Level 2 Document Object Model Core.</p>

<p>The Java files are also available as <a
href='#java-binding.zip'>http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/java-binding.zip</a></p>

<h3 id='java-binding-org.w3c.dom.DOMException'>
org/w3c/dom/DOMException.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public class DOMException extends RuntimeException {
    public DOMException(short code, String message) {
       super(message);
       this.code = code;
    }
    public short   code;
    // ExceptionCode
    public static final short INDEX_SIZE_ERR            = 1;
    public static final short DOMSTRING_SIZE_ERR        = 2;
    public static final short HIERARCHY_REQUEST_ERR     = 3;
    public static final short WRONG_DOCUMENT_ERR        = 4;
    public static final short INVALID_CHARACTER_ERR     = 5;
    public static final short NO_DATA_ALLOWED_ERR       = 6;
    public static final short NO_MODIFICATION_ALLOWED_ERR = 7;
    public static final short NOT_FOUND_ERR             = 8;
    public static final short NOT_SUPPORTED_ERR         = 9;
    public static final short INUSE_ATTRIBUTE_ERR       = 10;
    public static final short INVALID_STATE_ERR         = 11;
    public static final short SYNTAX_ERR                = 12;
    public static final short INVALID_MODIFICATION_ERR  = 13;
    public static final short NAMESPACE_ERR             = 14;
    public static final short INVALID_ACCESS_ERR        = 15;

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.DOMImplementation'>
org/w3c/dom/DOMImplementation.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface DOMImplementation {
    public boolean hasFeature(String feature, 
                              String version);

    public DocumentType createDocumentType(String qualifiedName, 
                                           String publicId, 
                                           String systemId)
                                           throws DOMException;

    public Document createDocument(String namespaceURI, 
                                   String qualifiedName, 
                                   DocumentType doctype)
                                   throws DOMException;

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.DocumentFragment'>
org/w3c/dom/DocumentFragment.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface DocumentFragment extends Node {
}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.Document'>org/w3c/dom/Document.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface Document extends Node {
    public DocumentType getDoctype();

    public DOMImplementation getImplementation();

    public Element getDocumentElement();

    public Element createElement(String tagName)
                                 throws DOMException;

    public DocumentFragment createDocumentFragment();

    public Text createTextNode(String data);

    public Comment createComment(String data);

    public CDATASection createCDATASection(String data)
                                           throws DOMException;

    public ProcessingInstruction createProcessingInstruction(String target, 
                                                             String data)
                                                             throws DOMException;

    public Attr createAttribute(String name)
                                throws DOMException;

    public EntityReference createEntityReference(String name)
                                                 throws DOMException;

    public NodeList getElementsByTagName(String tagname);

    public Node importNode(Node importedNode, 
                           boolean deep)
                           throws DOMException;

    public Element createElementNS(String namespaceURI, 
                                   String qualifiedName)
                                   throws DOMException;

    public Attr createAttributeNS(String namespaceURI, 
                                  String qualifiedName)
                                  throws DOMException;

    public NodeList getElementsByTagNameNS(String namespaceURI, 
                                           String localName);

    public Element getElementById(String elementId);

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.Node'>org/w3c/dom/Node.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface Node {
    // NodeType
    public static final short ELEMENT_NODE              = 1;
    public static final short ATTRIBUTE_NODE            = 2;
    public static final short TEXT_NODE                 = 3;
    public static final short CDATA_SECTION_NODE        = 4;
    public static final short ENTITY_REFERENCE_NODE     = 5;
    public static final short ENTITY_NODE               = 6;
    public static final short PROCESSING_INSTRUCTION_NODE = 7;
    public static final short COMMENT_NODE              = 8;
    public static final short DOCUMENT_NODE             = 9;
    public static final short DOCUMENT_TYPE_NODE        = 10;
    public static final short DOCUMENT_FRAGMENT_NODE    = 11;
    public static final short NOTATION_NODE             = 12;

    public String getNodeName();

    public String getNodeValue()
                                  throws DOMException;
    public void setNodeValue(String nodeValue)
                                  throws DOMException;

    public short getNodeType();

    public Node getParentNode();

    public NodeList getChildNodes();

    public Node getFirstChild();

    public Node getLastChild();

    public Node getPreviousSibling();

    public Node getNextSibling();

    public NamedNodeMap getAttributes();

    public Document getOwnerDocument();

    public Node insertBefore(Node newChild, 
                             Node refChild)
                             throws DOMException;

    public Node replaceChild(Node newChild, 
                             Node oldChild)
                             throws DOMException;

    public Node removeChild(Node oldChild)
                            throws DOMException;

    public Node appendChild(Node newChild)
                            throws DOMException;

    public boolean hasChildNodes();

    public Node cloneNode(boolean deep);

    public void normalize();

    public boolean isSupported(String feature, 
                               String version);

    public String getNamespaceURI();

    public String getPrefix();
    public void setPrefix(String prefix)
                               throws DOMException;

    public String getLocalName();

    public boolean hasAttributes();

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.NodeList'>org/w3c/dom/NodeList.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface NodeList {
    public Node item(int index);

    public int getLength();

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.NamedNodeMap'>
org/w3c/dom/NamedNodeMap.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface NamedNodeMap {
    public Node getNamedItem(String name);

    public Node setNamedItem(Node arg)
                             throws DOMException;

    public Node removeNamedItem(String name)
                                throws DOMException;

    public Node item(int index);

    public int getLength();

    public Node getNamedItemNS(String namespaceURI, 
                               String localName);

    public Node setNamedItemNS(Node arg)
                               throws DOMException;

    public Node removeNamedItemNS(String namespaceURI, 
                                  String localName)
                                  throws DOMException;

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.CharacterData'>
org/w3c/dom/CharacterData.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface CharacterData extends Node {
    public String getData()
                                  throws DOMException;
    public void setData(String data)
                                  throws DOMException;

    public int getLength();

    public String substringData(int offset, 
                                int count)
                                throws DOMException;

    public void appendData(String arg)
                           throws DOMException;

    public void insertData(int offset, 
                           String arg)
                           throws DOMException;

    public void deleteData(int offset, 
                           int count)
                           throws DOMException;

    public void replaceData(int offset, 
                            int count, 
                            String arg)
                            throws DOMException;

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.Attr'>org/w3c/dom/Attr.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface Attr extends Node {
    public String getName();

    public boolean getSpecified();

    public String getValue();
    public void setValue(String value)
                            throws DOMException;

    public Element getOwnerElement();

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.Element'>org/w3c/dom/Element.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface Element extends Node {
    public String getTagName();

    public String getAttribute(String name);

    public void setAttribute(String name, 
                             String value)
                             throws DOMException;

    public void removeAttribute(String name)
                                throws DOMException;

    public Attr getAttributeNode(String name);

    public Attr setAttributeNode(Attr newAttr)
                                 throws DOMException;

    public Attr removeAttributeNode(Attr oldAttr)
                                    throws DOMException;

    public NodeList getElementsByTagName(String name);

    public String getAttributeNS(String namespaceURI, 
                                 String localName);

    public void setAttributeNS(String namespaceURI, 
                               String qualifiedName, 
                               String value)
                               throws DOMException;

    public void removeAttributeNS(String namespaceURI, 
                                  String localName)
                                  throws DOMException;

    public Attr getAttributeNodeNS(String namespaceURI, 
                                   String localName);

    public Attr setAttributeNodeNS(Attr newAttr)
                                   throws DOMException;

    public NodeList getElementsByTagNameNS(String namespaceURI, 
                                           String localName);

    public boolean hasAttribute(String name);

    public boolean hasAttributeNS(String namespaceURI, 
                                  String localName);

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.Text'>org/w3c/dom/Text.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface Text extends CharacterData {
    public Text splitText(int offset)
                          throws DOMException;

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.Comment'>org/w3c/dom/Comment.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface Comment extends CharacterData {
}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.CDATASection'>
org/w3c/dom/CDATASection.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface CDATASection extends Text {
}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.DocumentType'>
org/w3c/dom/DocumentType.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface DocumentType extends Node {
    public String getName();

    public NamedNodeMap getEntities();

    public NamedNodeMap getNotations();

    public String getPublicId();

    public String getSystemId();

    public String getInternalSubset();

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.Notation'>org/w3c/dom/Notation.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface Notation extends Node {
    public String getPublicId();

    public String getSystemId();

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.Entity'>org/w3c/dom/Entity.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface Entity extends Node {
    public String getPublicId();

    public String getSystemId();

    public String getNotationName();

}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.EntityReference'>
org/w3c/dom/EntityReference.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface EntityReference extends Node {
}
</pre>
</div>

<h3 id='java-binding-org.w3c.dom.ProcessingInstruction'>
org/w3c/dom/ProcessingInstruction.java:</h3>

<div class='java-code'>
<pre>
package org.w3c.dom;

public interface ProcessingInstruction extends Node {
    public String getTarget();

    public String getData();
    public void setData(String data)
                          throws DOMException;

}
</pre>
</div>
</div>

<!-- div1 java-binding -->


<a name='ecma-script-binding'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='ecma-script-binding-ecma-binding' name='ecma-script-binding-ecma-binding'></a> 

<h1 id='ecma-script-binding-ecma-binding-h1' class='adiv1'>Appendix E: ECMAScript
Language Binding</h1>

<p>This appendix contains the complete ECMAScript [<a
class='noxref' href='#references-ECMAScript'>ECMAScript</a>]
binding for the Level 2 Document Object Model Core definitions.</p>

<p><b>Note:</b> Exceptions handling is only supported by ECMAScript
implementation conformant with the Standard ECMA-262 3rd. Edition
([<a class='noxref'
href='#references-ECMAScript'>ECMAScript</a>]).</p>

<div class='ecma-block'>
<dl>
<dt>Prototype Object <b>DOMException</b></dt>

<dd>
<dl>
<dt>The <b>DOMException</b> class has the following constants:</dt>

<dd>
<dl>
<dt><b>DOMException.INDEX_SIZE_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>1</b>.</dd>

<dt><b>DOMException.DOMSTRING_SIZE_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>2</b>.</dd>

<dt><b>DOMException.HIERARCHY_REQUEST_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>3</b>.</dd>

<dt><b>DOMException.WRONG_DOCUMENT_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>4</b>.</dd>

<dt><b>DOMException.INVALID_CHARACTER_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>5</b>.</dd>

<dt><b>DOMException.NO_DATA_ALLOWED_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>6</b>.</dd>

<dt><b>DOMException.NO_MODIFICATION_ALLOWED_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>7</b>.</dd>

<dt><b>DOMException.NOT_FOUND_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>8</b>.</dd>

<dt><b>DOMException.NOT_SUPPORTED_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>9</b>.</dd>

<dt><b>DOMException.INUSE_ATTRIBUTE_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>10</b>.</dd>

<dt><b>DOMException.INVALID_STATE_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>11</b>.</dd>

<dt><b>DOMException.SYNTAX_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>12</b>.</dd>

<dt><b>DOMException.INVALID_MODIFICATION_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>13</b>.</dd>

<dt><b>DOMException.NAMESPACE_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>14</b>.</dd>

<dt><b>DOMException.INVALID_ACCESS_ERR</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>15</b>.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>DOMException</b></dt>

<dd>
<dl>
<dt>The <b>DOMException</b> object has the following
properties:</dt>

<dd>
<dl>
<dt><b>code</b></dt>

<dd>This property is of type <b>Number</b>.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>DOMImplementation</b></dt>

<dd>
<dl>
<dt>The <b>DOMImplementation</b> object has the following
methods:</dt>

<dd>
<dl>
<dt><b>hasFeature(feature, version)</b></dt>

<dd>This method returns a <b>Boolean</b>.<br />
The <b>feature</b> parameter is of type <b>String</b>.<br />
The <b>version</b> parameter is of type <b>String</b>.</dd>

<dt><b>createDocumentType(qualifiedName, publicId,
systemId)</b></dt>

<dd>This method returns a <b>DocumentType</b> object.<br />
The <b>qualifiedName</b> parameter is of type <b>String</b>.<br />
The <b>publicId</b> parameter is of type <b>String</b>.<br />
The <b>systemId</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>createDocument(namespaceURI, qualifiedName,
doctype)</b></dt>

<dd>This method returns a <b>Document</b> object.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>qualifiedName</b> parameter is of type <b>String</b>.<br />
The <b>doctype</b> parameter is a <b>DocumentType</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>DocumentFragment</b></dt>

<dd>
<dl>
<dt><b>DocumentFragment</b> has the all the properties and methods
of the <b>Node</b> object as well as the properties and methods
defined below.</dt>
</dl>
</dd>

<dt>Object <b>Document</b></dt>

<dd>
<dl>
<dt><b>Document</b> has the all the properties and methods of the
<b>Node</b> object as well as the properties and methods defined
below.</dt>

<dt>The <b>Document</b> object has the following properties:</dt>

<dd>
<dl>
<dt><b>doctype</b></dt>

<dd>This read-only property is a <b>DocumentType</b> object.</dd>

<dt><b>implementation</b></dt>

<dd>This read-only property is a <b>DOMImplementation</b>
object.</dd>

<dt><b>documentElement</b></dt>

<dd>This read-only property is a <b>Element</b> object.</dd>
</dl>
</dd>

<dt>The <b>Document</b> object has the following methods:</dt>

<dd>
<dl>
<dt><b>createElement(tagName)</b></dt>

<dd>This method returns a <b>Element</b> object.<br />
The <b>tagName</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>createDocumentFragment()</b></dt>

<dd>This method returns a <b>DocumentFragment</b> object.</dd>

<dt><b>createTextNode(data)</b></dt>

<dd>This method returns a <b>Text</b> object.<br />
The <b>data</b> parameter is of type <b>String</b>.</dd>

<dt><b>createComment(data)</b></dt>

<dd>This method returns a <b>Comment</b> object.<br />
The <b>data</b> parameter is of type <b>String</b>.</dd>

<dt><b>createCDATASection(data)</b></dt>

<dd>This method returns a <b>CDATASection</b> object.<br />
The <b>data</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>createProcessingInstruction(target, data)</b></dt>

<dd>This method returns a <b>ProcessingInstruction</b>
object.<br />
The <b>target</b> parameter is of type <b>String</b>.<br />
The <b>data</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>createAttribute(name)</b></dt>

<dd>This method returns a <b>Attr</b> object.<br />
The <b>name</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>createEntityReference(name)</b></dt>

<dd>This method returns a <b>EntityReference</b> object.<br />
The <b>name</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>getElementsByTagName(tagname)</b></dt>

<dd>This method returns a <b>NodeList</b> object.<br />
The <b>tagname</b> parameter is of type <b>String</b>.</dd>

<dt><b>importNode(importedNode, deep)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>importedNode</b> parameter is a <b>Node</b> object.<br />
The <b>deep</b> parameter is of type <b>Boolean</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>createElementNS(namespaceURI, qualifiedName)</b></dt>

<dd>This method returns a <b>Element</b> object.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>qualifiedName</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>createAttributeNS(namespaceURI, qualifiedName)</b></dt>

<dd>This method returns a <b>Attr</b> object.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>qualifiedName</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>getElementsByTagNameNS(namespaceURI, localName)</b></dt>

<dd>This method returns a <b>NodeList</b> object.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>localName</b> parameter is of type <b>String</b>.</dd>

<dt><b>getElementById(elementId)</b></dt>

<dd>This method returns a <b>Element</b> object.<br />
The <b>elementId</b> parameter is of type <b>String</b>.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Prototype Object <b>Node</b></dt>

<dd>
<dl>
<dt>The <b>Node</b> class has the following constants:</dt>

<dd>
<dl>
<dt><b>Node.ELEMENT_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>1</b>.</dd>

<dt><b>Node.ATTRIBUTE_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>2</b>.</dd>

<dt><b>Node.TEXT_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>3</b>.</dd>

<dt><b>Node.CDATA_SECTION_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>4</b>.</dd>

<dt><b>Node.ENTITY_REFERENCE_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>5</b>.</dd>

<dt><b>Node.ENTITY_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>6</b>.</dd>

<dt><b>Node.PROCESSING_INSTRUCTION_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>7</b>.</dd>

<dt><b>Node.COMMENT_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>8</b>.</dd>

<dt><b>Node.DOCUMENT_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>9</b>.</dd>

<dt><b>Node.DOCUMENT_TYPE_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>10</b>.</dd>

<dt><b>Node.DOCUMENT_FRAGMENT_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>11</b>.</dd>

<dt><b>Node.NOTATION_NODE</b></dt>

<dd>This constant is of type <b>Number</b> and its value is
<b>12</b>.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>Node</b></dt>

<dd>
<dl>
<dt>The <b>Node</b> object has the following properties:</dt>

<dd>
<dl>
<dt><b>nodeName</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>nodeValue</b></dt>

<dd>This property is of type <b>String</b>, can raise a
<b>DOMException</b> object on setting and can raise a
<b>DOMException</b> object on retrieval.</dd>

<dt><b>nodeType</b></dt>

<dd>This read-only property is of type <b>Number</b>.</dd>

<dt><b>parentNode</b></dt>

<dd>This read-only property is a <b>Node</b> object.</dd>

<dt><b>childNodes</b></dt>

<dd>This read-only property is a <b>NodeList</b> object.</dd>

<dt><b>firstChild</b></dt>

<dd>This read-only property is a <b>Node</b> object.</dd>

<dt><b>lastChild</b></dt>

<dd>This read-only property is a <b>Node</b> object.</dd>

<dt><b>previousSibling</b></dt>

<dd>This read-only property is a <b>Node</b> object.</dd>

<dt><b>nextSibling</b></dt>

<dd>This read-only property is a <b>Node</b> object.</dd>

<dt><b>attributes</b></dt>

<dd>This read-only property is a <b>NamedNodeMap</b> object.</dd>

<dt><b>ownerDocument</b></dt>

<dd>This read-only property is a <b>Document</b> object.</dd>

<dt><b>namespaceURI</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>prefix</b></dt>

<dd>This property is of type <b>String</b> and can raise a
<b>DOMException</b> object on setting.</dd>

<dt><b>localName</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>
</dl>
</dd>

<dt>The <b>Node</b> object has the following methods:</dt>

<dd>
<dl>
<dt><b>insertBefore(newChild, refChild)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>newChild</b> parameter is a <b>Node</b> object.<br />
The <b>refChild</b> parameter is a <b>Node</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>replaceChild(newChild, oldChild)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>newChild</b> parameter is a <b>Node</b> object.<br />
The <b>oldChild</b> parameter is a <b>Node</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>removeChild(oldChild)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>oldChild</b> parameter is a <b>Node</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>appendChild(newChild)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>newChild</b> parameter is a <b>Node</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>hasChildNodes()</b></dt>

<dd>This method returns a <b>Boolean</b>.</dd>

<dt><b>cloneNode(deep)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>deep</b> parameter is of type <b>Boolean</b>.</dd>

<dt><b>normalize()</b></dt>

<dd>This method has no return value.</dd>

<dt><b>isSupported(feature, version)</b></dt>

<dd>This method returns a <b>Boolean</b>.<br />
The <b>feature</b> parameter is of type <b>String</b>.<br />
The <b>version</b> parameter is of type <b>String</b>.</dd>

<dt><b>hasAttributes()</b></dt>

<dd>This method returns a <b>Boolean</b>.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>NodeList</b></dt>

<dd>
<dl>
<dt>The <b>NodeList</b> object has the following properties:</dt>

<dd>
<dl>
<dt><b>length</b></dt>

<dd>This read-only property is of type <b>Number</b>.</dd>
</dl>
</dd>

<dt>The <b>NodeList</b> object has the following methods:</dt>

<dd>
<dl>
<dt><b>item(index)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>index</b> parameter is of type <b>Number</b>.<br />
<b>Note:</b> This object can also be dereferenced using square
bracket notation (e.g. obj[1]). Dereferencing with an integer
<b>index</b> is equivalent to invoking the <b>item</b> method with
that index.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>NamedNodeMap</b></dt>

<dd>
<dl>
<dt>The <b>NamedNodeMap</b> object has the following
properties:</dt>

<dd>
<dl>
<dt><b>length</b></dt>

<dd>This read-only property is of type <b>Number</b>.</dd>
</dl>
</dd>

<dt>The <b>NamedNodeMap</b> object has the following methods:</dt>

<dd>
<dl>
<dt><b>getNamedItem(name)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>name</b> parameter is of type <b>String</b>.</dd>

<dt><b>setNamedItem(arg)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>arg</b> parameter is a <b>Node</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>removeNamedItem(name)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>name</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>item(index)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>index</b> parameter is of type <b>Number</b>.<br />
<b>Note:</b> This object can also be dereferenced using square
bracket notation (e.g. obj[1]). Dereferencing with an integer
<b>index</b> is equivalent to invoking the <b>item</b> method with
that index.</dd>

<dt><b>getNamedItemNS(namespaceURI, localName)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>localName</b> parameter is of type <b>String</b>.</dd>

<dt><b>setNamedItemNS(arg)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>arg</b> parameter is a <b>Node</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>removeNamedItemNS(namespaceURI, localName)</b></dt>

<dd>This method returns a <b>Node</b> object.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>localName</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>CharacterData</b></dt>

<dd>
<dl>
<dt><b>CharacterData</b> has the all the properties and methods of
the <b>Node</b> object as well as the properties and methods
defined below.</dt>

<dt>The <b>CharacterData</b> object has the following
properties:</dt>

<dd>
<dl>
<dt><b>data</b></dt>

<dd>This property is of type <b>String</b>, can raise a
<b>DOMException</b> object on setting and can raise a
<b>DOMException</b> object on retrieval.</dd>

<dt><b>length</b></dt>

<dd>This read-only property is of type <b>Number</b>.</dd>
</dl>
</dd>

<dt>The <b>CharacterData</b> object has the following methods:</dt>

<dd>
<dl>
<dt><b>substringData(offset, count)</b></dt>

<dd>This method returns a <b>String</b>.<br />
The <b>offset</b> parameter is of type <b>Number</b>.<br />
The <b>count</b> parameter is of type <b>Number</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>appendData(arg)</b></dt>

<dd>This method has no return value.<br />
The <b>arg</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>insertData(offset, arg)</b></dt>

<dd>This method has no return value.<br />
The <b>offset</b> parameter is of type <b>Number</b>.<br />
The <b>arg</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>deleteData(offset, count)</b></dt>

<dd>This method has no return value.<br />
The <b>offset</b> parameter is of type <b>Number</b>.<br />
The <b>count</b> parameter is of type <b>Number</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>replaceData(offset, count, arg)</b></dt>

<dd>This method has no return value.<br />
The <b>offset</b> parameter is of type <b>Number</b>.<br />
The <b>count</b> parameter is of type <b>Number</b>.<br />
The <b>arg</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>Attr</b></dt>

<dd>
<dl>
<dt><b>Attr</b> has the all the properties and methods of the
<b>Node</b> object as well as the properties and methods defined
below.</dt>

<dt>The <b>Attr</b> object has the following properties:</dt>

<dd>
<dl>
<dt><b>name</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>specified</b></dt>

<dd>This read-only property is of type <b>Boolean</b>.</dd>

<dt><b>value</b></dt>

<dd>This property is of type <b>String</b> and can raise a
<b>DOMException</b> object on setting.</dd>

<dt><b>ownerElement</b></dt>

<dd>This read-only property is a <b>Element</b> object.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>Element</b></dt>

<dd>
<dl>
<dt><b>Element</b> has the all the properties and methods of the
<b>Node</b> object as well as the properties and methods defined
below.</dt>

<dt>The <b>Element</b> object has the following properties:</dt>

<dd>
<dl>
<dt><b>tagName</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>
</dl>
</dd>

<dt>The <b>Element</b> object has the following methods:</dt>

<dd>
<dl>
<dt><b>getAttribute(name)</b></dt>

<dd>This method returns a <b>String</b>.<br />
The <b>name</b> parameter is of type <b>String</b>.</dd>

<dt><b>setAttribute(name, value)</b></dt>

<dd>This method has no return value.<br />
The <b>name</b> parameter is of type <b>String</b>.<br />
The <b>value</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>removeAttribute(name)</b></dt>

<dd>This method has no return value.<br />
The <b>name</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>getAttributeNode(name)</b></dt>

<dd>This method returns a <b>Attr</b> object.<br />
The <b>name</b> parameter is of type <b>String</b>.</dd>

<dt><b>setAttributeNode(newAttr)</b></dt>

<dd>This method returns a <b>Attr</b> object.<br />
The <b>newAttr</b> parameter is a <b>Attr</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>removeAttributeNode(oldAttr)</b></dt>

<dd>This method returns a <b>Attr</b> object.<br />
The <b>oldAttr</b> parameter is a <b>Attr</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>getElementsByTagName(name)</b></dt>

<dd>This method returns a <b>NodeList</b> object.<br />
The <b>name</b> parameter is of type <b>String</b>.</dd>

<dt><b>getAttributeNS(namespaceURI, localName)</b></dt>

<dd>This method returns a <b>String</b>.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>localName</b> parameter is of type <b>String</b>.</dd>

<dt><b>setAttributeNS(namespaceURI, qualifiedName, value)</b></dt>

<dd>This method has no return value.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>qualifiedName</b> parameter is of type <b>String</b>.<br />
The <b>value</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>removeAttributeNS(namespaceURI, localName)</b></dt>

<dd>This method has no return value.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>localName</b> parameter is of type <b>String</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>getAttributeNodeNS(namespaceURI, localName)</b></dt>

<dd>This method returns a <b>Attr</b> object.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>localName</b> parameter is of type <b>String</b>.</dd>

<dt><b>setAttributeNodeNS(newAttr)</b></dt>

<dd>This method returns a <b>Attr</b> object.<br />
The <b>newAttr</b> parameter is a <b>Attr</b> object.<br />
This method can raise a <b>DOMException</b> object.</dd>

<dt><b>getElementsByTagNameNS(namespaceURI, localName)</b></dt>

<dd>This method returns a <b>NodeList</b> object.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>localName</b> parameter is of type <b>String</b>.</dd>

<dt><b>hasAttribute(name)</b></dt>

<dd>This method returns a <b>Boolean</b>.<br />
The <b>name</b> parameter is of type <b>String</b>.</dd>

<dt><b>hasAttributeNS(namespaceURI, localName)</b></dt>

<dd>This method returns a <b>Boolean</b>.<br />
The <b>namespaceURI</b> parameter is of type <b>String</b>.<br />
The <b>localName</b> parameter is of type <b>String</b>.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>Text</b></dt>

<dd>
<dl>
<dt><b>Text</b> has the all the properties and methods of the
<b>CharacterData</b> object as well as the properties and methods
defined below.</dt>

<dt>The <b>Text</b> object has the following methods:</dt>

<dd>
<dl>
<dt><b>splitText(offset)</b></dt>

<dd>This method returns a <b>Text</b> object.<br />
The <b>offset</b> parameter is of type <b>Number</b>.<br />
This method can raise a <b>DOMException</b> object.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>Comment</b></dt>

<dd>
<dl>
<dt><b>Comment</b> has the all the properties and methods of the
<b>CharacterData</b> object as well as the properties and methods
defined below.</dt>
</dl>
</dd>

<dt>Object <b>CDATASection</b></dt>

<dd>
<dl>
<dt><b>CDATASection</b> has the all the properties and methods of
the <b>Text</b> object as well as the properties and methods
defined below.</dt>
</dl>
</dd>

<dt>Object <b>DocumentType</b></dt>

<dd>
<dl>
<dt><b>DocumentType</b> has the all the properties and methods of
the <b>Node</b> object as well as the properties and methods
defined below.</dt>

<dt>The <b>DocumentType</b> object has the following
properties:</dt>

<dd>
<dl>
<dt><b>name</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>entities</b></dt>

<dd>This read-only property is a <b>NamedNodeMap</b> object.</dd>

<dt><b>notations</b></dt>

<dd>This read-only property is a <b>NamedNodeMap</b> object.</dd>

<dt><b>publicId</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>systemId</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>internalSubset</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>Notation</b></dt>

<dd>
<dl>
<dt><b>Notation</b> has the all the properties and methods of the
<b>Node</b> object as well as the properties and methods defined
below.</dt>

<dt>The <b>Notation</b> object has the following properties:</dt>

<dd>
<dl>
<dt><b>publicId</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>systemId</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>Entity</b></dt>

<dd>
<dl>
<dt><b>Entity</b> has the all the properties and methods of the
<b>Node</b> object as well as the properties and methods defined
below.</dt>

<dt>The <b>Entity</b> object has the following properties:</dt>

<dd>
<dl>
<dt><b>publicId</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>systemId</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>notationName</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>
</dl>
</dd>
</dl>
</dd>

<dt>Object <b>EntityReference</b></dt>

<dd>
<dl>
<dt><b>EntityReference</b> has the all the properties and methods
of the <b>Node</b> object as well as the properties and methods
defined below.</dt>
</dl>
</dd>

<dt>Object <b>ProcessingInstruction</b></dt>

<dd>
<dl>
<dt><b>ProcessingInstruction</b> has the all the properties and
methods of the <b>Node</b> object as well as the properties and
methods defined below.</dt>

<dt>The <b>ProcessingInstruction</b> object has the following
properties:</dt>

<dd>
<dl>
<dt><b>target</b></dt>

<dd>This read-only property is of type <b>String</b>.</dd>

<dt><b>data</b></dt>

<dd>This property is of type <b>String</b> and can raise a
<b>DOMException</b> object on setting.</dd>
</dl>
</dd>
</dl>
</dd>
</dl>
</div>

<!-- ecma-block -->
</div>

<!-- div1 ecma-binding -->


<a name='acknowledgements'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='acknowledgements-contributors' name='acknowledgements-contributors'></a> 

<h1 id='acknowledgements-contributors-h1' class='adiv1'>Appendix F:
Acknowledgements</h1>

<p>Many people contributed to this specification, including members
of the DOM Working Group and the DOM Interest Group. We especially
thank the following:</p>

<p>Lauren Wood (SoftQuad Software Inc., <em>chair</em>), Andrew
Watson (Object Management Group), Andy Heninger (IBM), Arnaud Le
Hors (W3C and IBM), Ben Chang (Oracle), Bill Smith (Sun), Bill Shea
(Merrill Lynch), Bob Sutor (IBM), Chris Lovett (Microsoft), Chris
Wilson (Microsoft), David Brownell (Sun), David Singer (IBM), Don
Park (invited), Eric Vasilik (Microsoft), Gavin Nicol (INSO), Ian
Jacobs (W3C), James Clark (invited), James Davidson (Sun), Jared
Sorensen (Novell), Joe Kesselman (IBM), Joe Lapp (webMethods), Joe
Marini (Macromedia), Johnny Stenback (Netscape), Jonathan Marsh
(Microsoft), Jonathan Robie (Texcel Research and Software AG), Kim
Adamson-Sharpe (SoftQuad Software Inc.), Laurence Cable (Sun), Mark
Davis (IBM), Mark Scardina (Oracle), Martin D&uuml;rst (W3C), Mick
Goulish (Software AG), Mike Champion (Arbortext and Software AG),
Miles Sabin (Cromwell Media), Patti Lutsky (Arbortext), Paul Grosso
(Arbortext), Peter Sharpe (SoftQuad Software Inc.), Phil Karlton
(Netscape), Philippe Le H&eacute;garet (W3C, <em>W3C team
contact</em>), Ramesh Lekshmynarayanan (Merrill Lynch), Ray Whitmer
(iMall, Excite@Home and Netscape), Rich Rollman (Microsoft), Rick
Gessner (Netscape), Scott Isaacs (Microsoft), Sharon Adler (INSO),
Steve Byrne (JavaSoft), Tim Bray (invited), Tom Pixley (Netscape),
Vidur Apparao (Netscape), Vinod Anupam (Lucent).</p>

<p>Thanks to all those who have helped to improve this
specification by sending suggestions and corrections.</p>

<div class='div2'><a id='acknowledgements-Productions' name='acknowledgements-Productions'></a> 

<h2 id='acknowledgements-Productions-h2' class='adiv2'>F.1: Production Systems</h2>

<p>This specification was written in XML. The HTML, OMG IDL, Java
and ECMA Script bindings were all produced automatically.</p>

<p>Thanks to Joe English, author of <a
href='http://www.flightlab.com/cost'>cost</a>, which was used as
the basis for producing DOM Level 1. Thanks also to Gavin Nicol,
who wrote the scripts which run on top of cost. Arnaud Le Hors and
Philippe Le H&eacute;garet maintained the scripts.</p>

<p>For DOM Level 2, we used <a
href='http://xml.apache.org/xerces-j'>Xerces</a> as the basis DOM
implementation and wish to thank the authors. Philippe Le
H&eacute;garet and Arnaud Le Hors wrote the <a
href='http://dev.w3.org/cvsweb/java/classes/org/w3c/tools/specgenerator/'>
Java programs</a> which are the DOM application.</p>

<p>Thanks also to Jan K&auml;rrman, author of <a
href='http://www.tdb.uu.se/~jan/html2ps.html'>html2ps</a>, which we
use in creating the PostScript version of the specification.</p>
</div>

<!-- div2 Productions --></div>

<!-- div1 contributors -->


<a name='glossary'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='glossary-glossary' name='glossary-glossary'></a> 

<h1 id='glossary-role-glossary' class='glossary'>Glossary</h1>

<dl>
<dt><i>Editors</i></dt>

<dd>Arnaud Le Hors, IBM</dd>

<dd>Lauren Wood, SoftQuad Software Inc.</dd>

<dd>Robert S. Sutor, IBM (for DOM Level 1)</dd>
</dl>

<p>Several of the following term definitions have been borrowed or
modified from similar definitions in other W3C or standards
documents. See the links within the definitions for more
information.</p>

<dl>
<dt><b><a id='glossary-dt-16-bit-unit' name='glossary-dt-16-bit-unit'>16-bit
unit</a></b></dt>

<dd>The base unit of a <a
href='#core-DOMString'><code>DOMString</code></a>. This
indicates that indexing on a <a class='noxref'
href='#core-DOMString'><code>DOMString</code></a> occurs in
units of 16 bits. This must not be misunderstood to mean that a <a
class='noxref'
href='#core-DOMString'><code>DOMString</code></a> can store
arbitrary 16-bit units. A <a class='noxref'
href='#core-DOMString'><code>DOMString</code></a> is a
character string encoded in UTF-16; this means that the
restrictions of UTF-16 as well as the other relevant restrictions
on character strings must be maintained. A single character, for
example in the form of a numeric character reference, may
correspond to one or two 16-bit units.<br />
For more information, see [<a class='noxref'
href='#references-Unicode'>Unicode</a>] and [<a class='noxref'
href='#references-ISO10646'>ISO/IEC 10646</a>].</dd>

<dt><b><a id='glossary-dt-ancestor' name='glossary-dt-ancestor'>ancestor</a></b></dt>

<dd>An <i>ancestor</i> node of any node A is any node above A in a
tree model of a document, where "above" means "toward the
root."</dd>

<dt><b><a id='glossary-dt-API' name='glossary-dt-API'>API</a></b></dt>

<dd>An <i>API</i> is an application programming interface, a set of
functions or <i>methods</i> used to access some functionality.</dd>

<dt><b><a id='glossary-dt-child' name='glossary-dt-child'>child</a></b></dt>

<dd>A <i>child</i> is an immediate <i>descendant</i> node of a
node.</dd>

<dt><b><a id='glossary-dt-application' name='glossary-dt-application'>client
application</a></b></dt>

<dd>A [client] application is any software that uses the Document
Object Model programming interfaces provided by the hosting
implementation to accomplish useful work. Some examples of client
applications are scripts within an HTML or XML document.</dd>

<dt><b><a id='glossary-dt-COM' name='glossary-dt-COM'>COM</a></b></dt>

<dd><i>COM</i> is Microsoft's Component Object Model [<a
class='noxref' href='#references-COM'>COM</a>], a technology
for building applications from binary software components.</dd>

<dt><b><a id='glossary-dt-convenience' name='glossary-dt-convenience'>convenience</a></b></dt>

<dd>A <i>convenience method</i> is an operation on an object that
could be accomplished by a program consisting of more basic
operations on the object. Convenience <i>methods</i> are usually
provided to make the API easier and simpler to use or to allow
specific programs to create more optimized implementations for
common operations. A similar definition holds for a <i>convenience
property</i>.</dd>

<dt><b><a id='glossary-dt-datamodel' name='glossary-dt-datamodel'>data
model</a></b></dt>

<dd>A <i>data model</i> is a collection of descriptions of data
structures and their contained fields, together with the operations
or functions that manipulate them.</dd>

<dt><b><a id='glossary-dt-descendant' name='glossary-dt-descendant'>descendant</a></b></dt>

<dd>A <i>descendant</i> node of any node A is any node below A in a
tree model of a document, where "above" means "toward the
root."</dd>

<dt><b><a id='glossary-dt-ECMAScript' name='glossary-dt-ECMAScript'>ECMAScript</a></b></dt>

<dd>The programming language defined by the ECMA-262 standard [<a
class='noxref' href='#references-ECMAScript'>ECMAScript</a>].
As stated in the standard, the originating technology for
ECMAScript was JavaScript [<a class='noxref'
href='#references-JavaScript'>JavaScript</a>]. Note that in the
ECMAScript Language binding, the word "property" is used in the
same sense as the IDL term "attribute."</dd>

<dt><b><a id='glossary-dt-element' name='glossary-dt-element'>element</a></b></dt>

<dd>Each document contains one or more elements, the boundaries of
which are either delimited by start-tags and end-tags, or, for
empty elements by an empty-element tag. Each element has a type,
identified by name, and may have a set of attributes. Each
attribute has a name and a value. See <a
href='http://www.w3.org/TR/1998/REC-xml-19980210#sec-logical-struct'>
<em>Logical Structures</em></a> in XML [<a class='noxref'
href='#references-XML'>XML</a>].</dd>

<dt><b><a id='glossary-dt-infoitem' name='glossary-dt-infoitem'>information
item</a></b></dt>

<dd>An information item is an abstract representation of some
component of an XML document. See the [<a class='noxref'
href='#references-InfoSet'>Infoset</a>] for details.</dd>

<dt><b><a id='glossary-dt-implementation' name='glossary-dt-implementation'>hosting
implementation</a></b></dt>

<dd>A [hosting] implementation is a software module that provides
an implementation of the DOM interfaces so that a client
application can use them. Some examples of hosting implementations
are browsers, editors and document repositories.</dd>

<dt><b><a id='glossary-dt-HTML' name='glossary-dt-HTML'>HTML</a></b></dt>

<dd>The HyperText Markup Language (<i>HTML</i>) is a simple markup
language used to create hypertext documents that are portable from
one platform to another. HTML documents are SGML documents with
generic semantics that are appropriate for representing information
from a wide range of applications. [<a class='noxref'
href='#references-HTML40'>HTML4.0</a>]</dd>

<dt><b><a id='glossary-dt-inheritance' name='glossary-dt-inheritance'>inheritance</a></b></dt>

<dd>In object-oriented programming, the ability to create new
classes (or interfaces) that contain all the methods and properties
of another class (or interface), plus additional methods and
properties. If class (or interface) D inherits from class (or
interface) B, then D is said to be <i>derived</i> from B. B is said
to be a <i>base</i> class (or interface) for D. Some programming
languages allow for multiple inheritance, that is, inheritance from
more than one class or interface.</dd>

<dt><b><a id='glossary-dt-interface' name='glossary-dt-interface'>interface</a></b></dt>

<dd>An <i>interface</i> is a declaration of a set of <i>methods</i>
with no information given about their implementation. In object
systems that support interfaces and inheritance, interfaces can
usually inherit from one another.</dd>

<dt><b><a id='glossary-dt-lang-binding' name='glossary-dt-lang-binding'>language
binding</a></b></dt>

<dd>A programming <i>language binding</i> for an IDL specification
is an implementation of the interfaces in the specification for the
given language. For example, a Java language binding for the
Document Object Model IDL specification would implement the
concrete Java classes that provide the functionality exposed by the
interfaces.</dd>

<dt><b><a id='glossary-dt-localname' name='glossary-dt-localname'>local
name</a></b></dt>

<dd>A <i>local name</i> is the local part of a <i>qualified
name</i>. This is called the local part in Namespaces in XML [<a
class='noxref'
href='#references-Namespaces'>Namespaces</a>].</dd>

<dt><b><a id='glossary-dt-method' name='glossary-dt-method'>method</a></b></dt>

<dd>A <i>method</i> is an operation or function that is associated
with an object and is allowed to manipulate the object's data.</dd>

<dt><b><a id='glossary-dt-model' name='glossary-dt-model'>model</a></b></dt>

<dd>A <i>model</i> is the actual data representation for the
information at hand. Examples are the structural model and the
style model representing the parse structure and the style
information associated with a document. The model might be a tree,
or a directed graph, or something else.</dd>

<dt><b><a id='glossary-dt-namespaceprefix' name='glossary-dt-namespaceprefix'>namespace prefix</a></b></dt>

<dd>A <i>namespace prefix</i> is a string that associates an
element or attribute name with a <i>namespace URI</i> in XML. See
namespace prefix in Namespaces in XML [<a class='noxref'
href='#references-Namespaces'>Namespaces</a>].</dd>

<dt><b><a id='glossary-dt-namespaceURI' name='glossary-dt-namespaceURI'>namespace
URI</a></b></dt>

<dd>A <i>namespace URI</i> is a URI that identifies an <i>XML
namespace</i>. Strictly speaking, this actually is a <i>namespace
URI reference</i>. This is called the namespace name in Namespaces
in XML [<a class='noxref'
href='#references-Namespaces'>Namespaces</a>].</dd>

<dt><b><a id='glossary-dt-object-model' name='glossary-dt-object-model'>object
model</a></b></dt>

<dd>An <i>object model</i> is a collection of descriptions of
classes or interfaces, together with their member data, member
functions, and class-static operations.</dd>

<dt><b><a id='glossary-dt-parent' name='glossary-dt-parent'>parent</a></b></dt>

<dd>A <i>parent</i> is an immediate <i>ancestor</i> node of a
node.</dd>

<dt><b><a id='glossary-dt-qualifiedname' name='glossary-dt-qualifiedname'>qualified
name</a></b></dt>

<dd>A <i>qualified name</i> is the name of an element or attribute
defined as the concatenation of a <i>local name</i> (as defined in
this specification), optionally preceded by a <i>namespace
prefix</i> and colon character. See <a
href='http://www.w3.org/TR/1999/REC-xml-names-19990114/#ns-qualnames'>
<em>Qualified Names</em></a> in Namespaces in XML [<a
class='noxref'
href='#references-Namespaces'>Namespaces</a>].</dd>

<dt><b><a id='glossary-dt-readonly-node' name='glossary-dt-readonly-node'>readonly
node</a></b></dt>

<dd>A <i>readonly node</i> is a node that is immutable. This means
its list of children, its content, and its attributes, when it is
an element, cannot be changed in any way. However, a readonly node
can possibly be moved, when it is not itself contained in a
readonly node.</dd>

<dt><b><a id='glossary-dt-root-node' name='glossary-dt-root-node'>root
node</a></b></dt>

<dd>The <i>root node</i> is the unique node that is not a
<i>child</i> of any other node. All other nodes are children or
other descendants of the root node.</dd>

<dt><b><a id='glossary-dt-sibling' name='glossary-dt-sibling'>sibling</a></b></dt>

<dd>Two nodes are <i>siblings</i> if and only if they have the same
<i>parent</i> node.</dd>

<dt><b><a id='glossary-dt-string-compare' name='glossary-dt-string-compare'>string
comparison</a></b></dt>

<dd>When string matching is required, it is to occur as though the
comparison was between 2 sequences of code points from the Unicode
3.0 standard [<a class='noxref'
href='#references-Unicode'>Unicode</a>].</dd>

<dt><b><a id='glossary-dt-token' name='glossary-dt-token'>token</a></b></dt>

<dd>An information item such as an XML Name which has been <a
href='#glossary-dt-tokenized'><em>tokenized</em></a>.</dd>

<dt><b><a id='glossary-dt-tokenized' name='glossary-dt-tokenized'>tokenized</a></b></dt>

<dd>The description given to various information items (for
example, attribute values of various types, but not including the
StringType CDATA) after having been processed by the XML processor.
The process includes stripping leading and trailing white space,
and replacing multiple space characters by one. See the definition
of tokenized type.</dd>

<dt><b><a id='glossary-dt-well-formed' name='glossary-dt-well-formed'>well-formed
document</a></b></dt>

<dd>A document is <i>well-formed</i> if it is tag valid and
entities are limited to single elements (i.e., single sub-trees).
See <a
href='http://www.w3.org/TR/1998/REC-xml-19980210#sec-well-formed'><em>
Well-Formed XML Documents</em></a> in XML [<a class='noxref'
href='#references-XML'>XML</a>].</dd>

<dt><b><a id='glossary-dt-XML' name='glossary-dt-XML'>XML</a></b></dt>

<dd>Extensible Markup Language (<i>XML</i>) is an extremely simple
dialect of SGML. The goal is to enable generic SGML to be served,
received, and processed on the Web in the way that is now possible
with HTML. XML [<a class='noxref'
href='#references-XML'>XML</a>] has been designed for ease of
implementation and for interoperability with both SGML and
HTML.</dd>

<dt><b><a id='glossary-dt-XML-name' name='glossary-dt-XML-name'>XML name</a></b></dt>

<dd>See <a
href='http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name'><em>XML
name</em></a> in the XML specification [<a class='noxref'
href='#references-XML'>XML</a>].</dd>

<dt><b><a id='glossary-dt-XML-namespace' name='glossary-dt-XML-namespace'>XML
namespace</a></b></dt>

<dd>An <i>XML namespace</i> is a collection of names, identified by
a URI reference [<a class='noxref'
href='#references-URIRef'>RFC2396</a>], which are used in XML
documents as element types and attribute names. [<a class='noxref'
href='#references-Namespaces'>Namespaces</a>]</dd>
</dl>
</div>

<!-- div1 glossary -->


<a name='references'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='references-References' name='references-References'></a> 

<h1 id='references-role-references' class='references'>References</h1>

<p>For the latest version of any W3C specification please consult
the list of <a href='http://www.w3.org/TR'>W3C Technical
Reports</a> available at http://www.w3.org/TR.</p>

<div class='div2'><a id='references-References-Normative' name='references-References-Normative'></a> 

<h2 id='references-References-Normative-h2' class='adiv2'>H.1: Normative
references</h2>

<dl>
<dt><b><a id='references-Charmod' name='references-Charmod'>Charmod</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/1999/WD-charmod-19991129'>Character
Model for the World Wide Web</a>, November 1999. Available at
http://www.w3.org/TR/1999/WD-charmod-19991129</dd>

<dt><b><a id='references-ECMAScript' name='references-ECMAScript'>ECMAScript</a></b></dt>

<dd>ECMA (European Computer Manufacturers Association) <a
href='http://www.ecma.ch/ecma1/STAND/ECMA-262.HTM'>ECMAScript
Language Specification</a>. Available at
http://www.ecma.ch/ecma1/STAND/ECMA-262.HTM</dd>

<dt><b><a id='references-HTML40' name='references-HTML40'>HTML4.0</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/1998/REC-html40-19980424'>HTML 4.0
Specification</a>, April 1998. Available at
http://www.w3.org/TR/1998/REC-html40-19980424</dd>

<dt><b><a id='references-ISO10646' name='references-ISO10646'>ISO/IEC 10646</a></b></dt>

<dd>ISO (International Organization for Standardization). ISO/IEC
10646-1:2000 (E). Information technology - Universal Multiple-Octet
Coded Character Set (UCS) - Part 1: Architecture and Basic
Multilingual Plane. [Geneva]: International Organization for
Standardization.</dd>

<dt><b><a id='references-Java' name='references-Java'>Java</a></b></dt>

<dd>Sun Microsystems Inc. <a
href='http://java.sun.com/docs/books/jls'>The Java Language
Specification</a>, James Gosling, Bill Joy, and Guy Steele,
September 1996. Available at
http://java.sun.com/docs/books/jls</dd>

<dt><b><a id='references-Namespaces' name='references-Namespaces'>Namespaces</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/1999/REC-xml-names-19990114'>Namespaces
in XML</a>, January 1999. Available at
http://www.w3.org/TR/1999/REC-xml-names-19990114</dd>

<dt><b><a id='references-OMGIDL' name='references-OMGIDL'>OMGIDL</a></b></dt>

<dd>OMG (<a href='http://www.omg.org/'>Object Management Group</a>)
IDL (Interface Definition Language) defined in The Common Object
Request Broker: Architecture and Specification, version 2.3.1,
October 1999. Available from http://www.omg.org/</dd>

<dt><b><a id='references-URIRef' name='references-URIRef'>RFC2396</a></b></dt>

<dd>IETF (Internet Engineering Task Force) <a
href='http://www.ietf.org/rfc/rfc2396.txt'>RFC 2396: Uniform
Resource Identifiers (URI): Generic Syntax</a>, eds. T.
Berners-Lee, R. Fielding, L. Masinter. August 1998. Available at
http://www.ietf.org/rfc/rfc2396.txt</dd>

<dt><b><a id='references-Unicode' name='references-Unicode'>Unicode</a></b></dt>

<dd>The Unicode Consortium. <a
href='http://www.unicode.org/unicode/standard/versions/Unicode3.0.html'>
The Unicode Standard, Version 3.0.</a>, February 2000. Available at
http://www.unicode.org/unicode/standard/versions/Unicode3.0.html.</dd>

<dt><b><a id='references-XML' name='references-XML'>XML</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/1998/REC-xml-19980210'>Extensible Markup
Language (XML) 1.0</a>, February 1998. Available at
http://www.w3.org/TR/1998/REC-xml-19980210</dd>
</dl>
</div>

<!-- div2 References-Normative -->
<div class='div2'><a id='references-References-Informative' name='references-References-Informative'></a> 

<h2 id='references-References-Informative-h2' class='adiv2'>H.2: Informative
references</h2>

<dl>
<dt><b><a id='references-DOMCSS-inf' name='references-DOMCSS-inf'>DOM Level 2
CSS</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/DOM-Level-2-Style/css'>Document Object
Model Level 2 CSS</a>. Available at
http://www.w3.org/TR/DOM-Level-2-Style/css</dd>

<dt><b><a id='references-COM' name='references-COM'>COM</a></b></dt>

<dd>Microsoft Corp. <a href='http://www.microsoft.com/com'>The
Component Object Model</a>. Available at
http://www.microsoft.com/com</dd>

<dt><b><a id='references-CORBA' name='references-CORBA'>CORBA</a></b></dt>

<dd>OMG (<a href='http://www.omg.org/'>Object Management Group</a>)
The Common Object Request Broker: Architecture and Specification,
version 2.3.1, October 1999. Available from
http://www.omg.org/</dd>

<dt><b><a id='references-DOM-Level-1' name='references-DOM-Level-1'>DOM Level
1</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/REC-DOM-Level-1'>DOM Level 1
Specification</a>, October 1998. Available at
http://www.w3.org/TR/REC-DOM-Level-1</dd>

<dt><b><a id='references-DOMHTML-inf' name='references-DOMHTML-inf'>DOM Level 2
HTML</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/DOM-Level-2-HTML'>Document Object Model
Level 2 HTML Specification</a>. Available at
http://www.w3.org/TR/DOM-Level-2-HTML</dd>

<dt><b><a id='references-DOMEvents-inf' name='references-DOMEvents-inf'>DOM Level 2
Events</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/DOM-Level-2-Events'>Document Object
Model Level 2 Events Specification</a>. Available at
http://www.w3.org/TR/DOM-Level-2-Events</dd>

<dt><b><a id='references-InfoSet' name='references-InfoSet'>Infoset</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/xml-infoset'>XML Information Set</a>,
December 1999. Available at http://www.w3.org/TR/xml-infoset</dd>

<dt><b><a id='references-JavaIDL' name='references-JavaIDL'>JavaIDL</a></b></dt>

<dd>Sun Microsystems Inc. <a
href='http://java.sun.com/products/jdk/1.2/docs/guide/idl'>Java
IDL</a>. Available at
http://java.sun.com/products/jdk/1.2/docs/guide/idl</dd>

<dt><b><a id='references-JavaScript' name='references-JavaScript'>JavaScript</a></b></dt>

<dd>Netscape Communications Corp. <a
href='http://developer.netscape.com/tech/javascript/resources.html'>
JavaScript Resources</a>. Available at
http://developer.netscape.com/tech/javascript/resources.html</dd>

<dt><b><a id='references-JScript' name='references-JScript'>JScript</a></b></dt>

<dd>Microsoft Corp. <a
href='http://msdn.microsoft.com/scripting/default.htm'>JScript
Resources</a>. Available at
http://msdn.microsoft.com/scripting/default.htm</dd>

<dt><b><a id='references-MSIDL' name='references-MSIDL'>MIDL</a></b></dt>

<dd>Microsoft Corp. <a
href='http://msdn.microsoft.com/library/psdk/midl/mi-laref_1r1h.htm'>
MIDL Language Reference</a>. Available at
http://msdn.microsoft.com/library/psdk/midl/mi-laref_1r1h.htm</dd>

<dt><b><a id='references-DOMStyleSheets-inf' name='references-DOMStyleSheets-inf'>DOM
Level 2 Style Sheets</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/DOM-Level-2-Style/stylesheets'>Document
Object Model Level 2 Style Sheets</a>. Available at
http://www.w3.org/TR/DOM-Level-2-Style/stylesheets</dd>

<dt><b><a id='references-DOMTraversal-inf' name='references-DOMTraversal-inf'>DOM Level 2
Traversal</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal'>Document
Object Model Level 2 Traversal</a>. Available at
http://www.w3.org/TR/DOM-Level-2-Traversal-Range/traversal</dd>

<dt><b><a id='references-DOMRange-inf' name='references-DOMRange-inf'>DOM Level 2
Range</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html'>
Document Object Model Level 2 Range</a>. Available at
http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges</dd>

<dt><b><a id='references-DOMViews-inf' name='references-DOMViews-inf'>DOM Level 2
Views</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/DOM-Level-2-Views'>Document Object Model
Level 2 Views Specification</a>. Available at
http://www.w3.org/TR/DOM-Level-2-Views</dd>

<dt><b><a id='references-XPointer' name='references-XPointer'>XPointer</a></b></dt>

<dd>W3C (World Wide Web Consortium) <a
href='http://www.w3.org/TR/xptr'>XML Pointer Language
(XPointer)</a>, June 2000. Available at
http://www.w3.org/TR/xptr</dd>
</dl>
</div>

<!-- div2 References-Informative --></div>

<!-- div1 References -->


<a name='def-index'></a>



<div class='noprint' style='text-align: right'>
<p style='font-family: monospace;font-size:small'>13 November,
2000</p>
</div>

<div class='div1'><a id='def-index-Index' name='def-index-Index'></a> 

<h1 id='def-index-role-index' class='index'>Index</h1>

<table
summary='the table contains all keywords used in this document'>
<tr>
<td width='30%'><a class='noxref' href='#core-DOMString'>16-bit
unit</a> <a class='index-inst' href='#core-DOMString'>1</a>, <a
class='index-inst' href='#core-ID-5DFED1F0'>2</a>, <a
class='index-inst' href='#core-ID-FF21A306'>3</a>, <a
class='index-inst' href='#core-ID-7D61178C'>4</a>, <a
class='index-inst' href='#core-ID-3EDB695F'>5</a>, <a
class='index-inst' href='#core-ID-7C603781'>6</a>, <a
class='index-inst' href='#core-ID-E5CBA7FB'>7</a>, <a
class='index-inst' href='#core-ID-38853C1D'>8</a>, <a
class='index-inst' href='#glossary-dt-16-bit-unit'>9</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-952280727'>ancestor</a> <a class='index-inst'
href='#core-ID-952280727'>1</a>, <a class='index-inst'
href='#core-ID-785887307'>2</a>, <a class='index-inst'
href='#core-ID-184E7107'>3</a>, <a class='index-inst'
href='#glossary-dt-ancestor'>4</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>API</a> <a class='index-inst'
href='#introduction-ID-E7C3082'>1</a>, <a class='index-inst'
href='#introduction-ID-E7C30821'>2</a>, <a class='index-inst'
href='#introduction-ID-E7C30822'>3</a>, <a class='index-inst'
href='#core-ID-1CED5498'>4</a>, <a class='index-inst'
href='#core-ID-C74D1578'>5</a>, <a class='index-inst'
href='#glossary-dt-API'>6</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-184E7107'>appendChild</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-32791A2F'>appendData</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-637646024'>Attr</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>ATTRIBUTE_NODE</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-84CF096'>attributes</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>CDATA_SECTION_NODE</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-667469212'>CDATASection</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-FF21A306'>CharacterData</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-5DFED1F0'>Charmod</a> <a class='index-inst'
href='#core-ID-5DFED1F0'>1</a>, <a class='index-inst'
href='#references-Charmod'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1590626202'>child</a> <a class='index-inst'
href='#core-ID-1590626202'>1</a>, <a class='index-inst'
href='#core-Namespaces-Considerations'>2</a>, <a
class='index-inst' href='#glossary-dt-child'>3</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1451460987'>childNodes</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>client application</a> <a
class='index-inst' href='#introduction-ID-E7C3082'>1</a>, <a
class='index-inst' href='#glossary-dt-application'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-3A0ED0A4'>cloneNode</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>COM</a> <a class='index-inst'
href='#introduction-ID-E7C3082'>1</a>, <a class='index-inst'
href='#core-ID-1CED5498'>2</a>, <a class='index-inst'
href='#glossary-dt-COM'>3</a>, <a class='index-inst'
href='#references-COM'>4</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1728279322'>Comment</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>COMMENT_NODE</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-87CD092'>convenience</a> <a class='index-inst'
href='#core-ID-87CD092'>1</a>, <a class='index-inst'
href='#core-ID-745549614'>2</a>, <a class='index-inst'
href='#glossary-dt-convenience'>3</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>CORBA</a> <a class='index-inst'
href='#introduction-ID-E7C3082'>1</a>, <a class='index-inst'
href='#references-CORBA'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1084891198'>createAttribute</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-DocCrAttrNS'>createAttributeNS</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-D26C0AF8'>createCDATASection</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1334481328'>createComment</a></td>
<td width='30%'><a class='noxref'
href='#core-Level-2-Core-DOM-createDocument'>createDocument</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-35CB04B5'>createDocumentFragment</a></td>
<td width='30%'><a class='noxref'
href='#core-Level-2-Core-DOM-createDocType'>createDocumentType</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-2141741547'>createElement</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-DocCrElNS'>createElementNS</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-392B75AE'>createEntityReference</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-135944439'>createProcessingInstruction</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1975348127'>createTextNode</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-72AB8359'>data</a> <a class='index-inst'
href='#core-ID-72AB8359'>1</a>, <a class='index-inst'
href='#core-ID-837822393'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C30821'>data model</a> <a
class='index-inst' href='#introduction-ID-E7C30821'>1</a>, <a
class='index-inst' href='#glossary-dt-datamodel'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-7C603781'>deleteData</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-Namespaces-Considerations'>descendant</a> <a
class='index-inst'
href='#core-Namespaces-Considerations'>1</a>, <a
class='index-inst' href='#core-Core-Document-importNode'>2</a>,
<a class='index-inst' href='#core-ID-1938918D'>3</a>, <a
class='index-inst' href='#core-ID-A6C90942'>4</a>, <a
class='index-inst' href='#core-ID-527DCFF2'>5</a>, <a
class='index-inst' href='#core-ID-11C98490'>6</a>, <a
class='index-inst' href='#glossary-dt-descendant'>7</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-B63ED1A31'>doctype</a></td>
<td width='30%'><a class='noxref'
href='#core-i-Document'>Document</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>DOCUMENT_FRAGMENT_NODE</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>DOCUMENT_NODE</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>DOCUMENT_TYPE_NODE</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-87CD092'>documentElement</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-B63ED1A3'>DocumentFragment</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-412266927'>DocumentType</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C30824'>DOM Level 1</a> <a
class='index-inst' href='#introduction-ID-E7C30824'>1</a>, <a
class='index-inst' href='#references-DOM-Level-1'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-Conformance'>DOM Level 2 CSS</a> <a
class='index-inst' href='#introduction-ID-Conformance'>1</a>,
<a class='index-inst' href='#references-DOMCSS-inf'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-Conformance'>DOM Level 2 Events</a> <a
class='index-inst' href='#introduction-ID-Conformance'>1</a>,
<a class='index-inst'
href='#references-DOMEvents-inf'>2</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-Conformance'>DOM Level 2 HTML</a> <a
class='index-inst' href='#introduction-ID-Conformance'>1</a>,
<a class='index-inst' href='#core-ID-BBACDC08'>2</a>, <a
class='index-inst' href='#core-ID-E067D597'>3</a>, <a
class='index-inst' href='#references-DOMHTML-inf'>4</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-Conformance'>DOM Level 2 Range</a> <a
class='index-inst' href='#introduction-ID-Conformance'>1</a>,
<a class='index-inst'
href='#references-DOMRange-inf'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-Conformance'>DOM Level 2 Style
Sheets</a> <a class='index-inst'
href='#introduction-ID-Conformance'>1</a>, <a
class='index-inst'
href='#references-DOMStyleSheets-inf'>2</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-Conformance'>DOM Level 2 Traversal</a>
<a class='index-inst'
href='#introduction-ID-Conformance'>1</a>, <a
class='index-inst'
href='#references-DOMTraversal-inf'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-Conformance'>DOM Level 2 Views</a> <a
class='index-inst' href='#introduction-ID-Conformance'>1</a>,
<a class='index-inst'
href='#references-DOMViews-inf'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-17189187'>DOMException</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-102161490'>DOMImplementation</a></td>
<td width='30%'><a class='noxref'
href='#core-DOMString'>DOMString</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>DOMSTRING_SIZE_ERR</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-DOMTimeStamp'>DOMTimeStamp</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>ECMAScript</a> <a
class='index-inst' href='#introduction-ID-E7C3082'>1</a>, <a
class='index-inst' href='#core-ID-249F15BA'>2</a>, <a
class='index-inst' href='#glossary-dt-ECMAScript'>3</a>, <a
class='index-inst' href='#references-ECMAScript'>4</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-745549614'>Element</a> <a class='index-inst'
href='#core-ID-745549614'>1</a>, <a class='index-inst'
href='#core-ID-1590626202'>2</a>, <a class='index-inst'
href='#core-td-live'>3</a>, <a class='index-inst'
href='#core-ID-5DFED1F0'>4</a>, <a class='index-inst'
href='#core-Namespaces-Considerations'>5</a>, <a
class='index-inst' href='#glossary-dt-element'>6</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>ELEMENT_NODE</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1788794630'>entities</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-527DCFF2'>Entity</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>ENTITY_NODE</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>ENTITY_REFERENCE_NODE</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-11C98490'>EntityReference</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-169727388'>firstChild</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-666EE0F9'>getAttribute</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-217A91B8'>getAttributeNode</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-ElGetAtNodeNS'>getAttributeNodeNS</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-ElGetAttrNS'>getAttributeNS</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-getElBId'>getElementById</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-A6C9094'>getElementsByTagName</a> <a
class='index-inst' href='#core-ID-A6C9094'>1</a>, <a
class='index-inst' href='#core-ID-1938918D'>2</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-getElBTNNS'>getElementsByTagNameNS</a> <a
class='index-inst' href='#core-ID-getElBTNNS'>1</a>, <a
class='index-inst' href='#core-ID-A6C90942'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1074577549'>getNamedItem</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-getNamedItemNS'>getNamedItemNS</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-ElHasAttr'>hasAttribute</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-ElHasAttrNS'>hasAttributeNS</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-NodeHasAttrs'>hasAttributes</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-810594187'>hasChildNodes</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-5CED94D7'>hasFeature</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>HIERARCHY_REQUEST_ERR</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C30824'>hosting implementation</a> <a
class='index-inst' href='#introduction-ID-E7C30824'>1</a>, <a
class='index-inst'
href='#glossary-dt-implementation'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>HTML</a> <a class='index-inst'
href='#introduction-ID-E7C3082'>1</a>, <a class='index-inst'
href='#glossary-dt-HTML'>2</a></td>
<td width='30%'><a class='noxref'
href='#glossary-dt-HTML'>HTML4.0</a> <a class='index-inst'
href='#glossary-dt-HTML'>1</a>, <a class='index-inst'
href='#references-HTML40'>2</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1B793EBA'>implementation</a></td>
<td width='30%'><a class='noxref'
href='#core-Core-Document-importNode'>importNode</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>INDEX_SIZE_ERR</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1312295772'>information item</a> <a
class='index-inst' href='#core-ID-1312295772'>1</a>, <a
class='index-inst' href='#glossary-dt-infoitem'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C30821'>Infoset</a> <a
class='index-inst' href='#introduction-ID-E7C30821'>1</a>, <a
class='index-inst' href='#introduction-ID-E7C30822'>2</a>, <a
class='index-inst' href='#glossary-dt-infoitem'>3</a>, <a
class='index-inst' href='#references-InfoSet'>4</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1CED5498'>inheritance</a> <a class='index-inst'
href='#core-ID-1CED5498'>1</a>, <a class='index-inst'
href='#glossary-dt-inheritance'>2</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-952280727'>insertBefore</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-3EDB695F'>insertData</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>interface</a> <a
class='index-inst' href='#introduction-ID-E7C3082'>1</a>, <a
class='index-inst' href='#glossary-dt-interface'>2</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-Core-DocType-internalSubset'>internalSubset</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>INUSE_ATTRIBUTE_ERR</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>INVALID_ACCESS_ERR</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>INVALID_CHARACTER_ERR</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>INVALID_MODIFICATION_ERR</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>INVALID_STATE_ERR</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-C74D1578'>ISO/IEC 10646</a> <a
class='index-inst' href='#core-ID-C74D1578'>1</a>, <a
class='index-inst' href='#glossary-dt-16-bit-unit'>2</a>, <a
class='index-inst' href='#references-ISO10646'>3</a></td>
<td width='30%'><a class='noxref'
href='#core-Level-2-Core-Node-supports'>isSupported</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-844377136'>item</a> <a class='index-inst'
href='#core-ID-844377136'>1</a>, <a class='index-inst'
href='#core-ID-349467F9'>2</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>Java</a> <a class='index-inst'
href='#introduction-ID-E7C3082'>1</a>, <a class='index-inst'
href='#references-Java'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>JavaIDL</a> <a
class='index-inst' href='#introduction-ID-E7C3082'>1</a>, <a
class='index-inst' href='#references-JavaIDL'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>JavaScript</a> <a
class='index-inst' href='#introduction-ID-E7C3082'>1</a>, <a
class='index-inst' href='#glossary-dt-ECMAScript'>2</a>, <a
class='index-inst' href='#references-JavaScript'>3</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>JScript</a> <a
class='index-inst' href='#introduction-ID-E7C3082'>1</a>, <a
class='index-inst' href='#references-JScript'>2</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>language binding</a> <a
class='index-inst' href='#introduction-ID-E7C3082'>1</a>, <a
class='index-inst' href='#glossary-dt-lang-binding'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-61AD09FB'>lastChild</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-203510337'>length</a> <a class='index-inst'
href='#core-ID-203510337'>1</a>, <a class='index-inst'
href='#core-ID-6D0FB19E'>2</a>, <a class='index-inst'
href='#core-ID-7D61178C'>3</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref' href='#core-td-live'>live</a>
<a class='index-inst' href='#core-td-live'>1</a>, <a
class='index-inst' href='#core-ID-536297177'>2</a>, <a
class='index-inst' href='#core-ID-1780488922'>3</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-DocCrElNS'>local name</a> <a class='index-inst'
href='#core-ID-DocCrElNS'>1</a>, <a class='index-inst'
href='#core-ID-DocCrAttrNS'>2</a>, <a class='index-inst'
href='#core-ID-getElBTNNS'>3</a>, <a class='index-inst'
href='#core-ID-getNamedItemNS'>4</a>, <a class='index-inst'
href='#core-ID-removeNamedItemNS'>5</a>, <a class='index-inst'
href='#core-ID-ElGetAttrNS'>6</a>, <a class='index-inst'
href='#core-ID-ElRemAtNS'>7</a>, <a class='index-inst'
href='#core-ID-ElGetAtNodeNS'>8</a>, <a class='index-inst'
href='#core-ID-ElSetAtNodeNS'>9</a>, <a class='index-inst'
href='#core-ID-A6C90942'>10</a>, <a class='index-inst'
href='#core-ID-ElHasAttrNS'>11</a>, <a class='index-inst'
href='#glossary-dt-localname'>12</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-NodeNSLocalN'>localName</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-Conformance'>method</a> <a
class='index-inst' href='#introduction-ID-Conformance'>1</a>,
<a class='index-inst' href='#glossary-dt-method'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>MIDL</a> <a class='index-inst'
href='#introduction-ID-E7C3082'>1</a>, <a class='index-inst'
href='#references-MSIDL'>2</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C30821'>model</a> <a
class='index-inst' href='#introduction-ID-E7C30821'>1</a>, <a
class='index-inst' href='#glossary-dt-model'>2</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1112119403'>name</a> <a class='index-inst'
href='#core-ID-1112119403'>1</a>, <a class='index-inst'
href='#core-ID-1844763134'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1780488922'>NamedNodeMap</a></td>
<td width='30%'><a class='noxref'
href='#core-Namespaces-Considerations'>namespace prefix</a> <a
class='index-inst'
href='#core-Namespaces-Considerations'>1</a>, <a
class='index-inst' href='#core-ID-392B75AE'>2</a>, <a
class='index-inst' href='#core-ID-NodeNSPrefix'>3</a>, <a
class='index-inst' href='#core-ID-527DCFF2'>4</a>, <a
class='index-inst' href='#core-ID-11C98490'>5</a>, <a
class='index-inst'
href='#glossary-dt-namespaceprefix'>6</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-Namespaces-Considerations'>namespace URI</a> <a
class='index-inst'
href='#core-Namespaces-Considerations'>1</a>, <a
class='index-inst'
href='#core-Level-2-Core-DOM-createDocument'>2</a>, <a
class='index-inst' href='#core-ID-DocCrElNS'>3</a>, <a
class='index-inst' href='#core-ID-DocCrAttrNS'>4</a>, <a
class='index-inst' href='#core-ID-getElBTNNS'>5</a>, <a
class='index-inst' href='#core-ID-NodeNSname'>6</a>, <a
class='index-inst' href='#core-ID-getNamedItemNS'>7</a>, <a
class='index-inst' href='#core-ID-removeNamedItemNS'>8</a>, <a
class='index-inst' href='#core-ID-ElGetAttrNS'>9</a>, <a
class='index-inst' href='#core-ID-ElSetAttrNS'>10</a>, <a
class='index-inst' href='#core-ID-ElRemAtNS'>11</a>, <a
class='index-inst' href='#core-ID-ElGetAtNodeNS'>12</a>, <a
class='index-inst' href='#core-ID-ElSetAtNodeNS'>13</a>, <a
class='index-inst' href='#core-ID-A6C90942'>14</a>, <a
class='index-inst' href='#core-ID-ElHasAttrNS'>15</a>, <a
class='index-inst' href='#core-ID-11C98490'>16</a>, <a
class='index-inst' href='#glossary-dt-namespaceURI'>17</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>NAMESPACE_ERR</a></td>
<td width='30%'><a class='noxref'
href='#core-Namespaces-Considerations'>Namespaces</a> <a
class='index-inst'
href='#core-Namespaces-Considerations'>1</a>, <a
class='index-inst'
href='#core-Level-2-Core-DOM-createDocument'>2</a>, <a
class='index-inst' href='#core-ID-DocCrElNS'>3</a>, <a
class='index-inst' href='#core-ID-NodeNSname'>4</a>, <a
class='index-inst' href='#core-ID-NodeNSPrefix'>5</a>, <a
class='index-inst' href='#glossary-dt-localname'>6</a>, <a
class='index-inst' href='#glossary-dt-namespaceprefix'>7</a>,
<a class='index-inst' href='#glossary-dt-namespaceURI'>8</a>,
<a class='index-inst' href='#glossary-dt-qualifiedname'>9</a>,
<a class='index-inst' href='#glossary-dt-XML-namespace'>10</a>,
<a class='index-inst' href='#references-Namespaces'>11</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-NodeNSname'>namespaceURI</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-6AC54C2F'>nextSibling</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>NO_DATA_ALLOWED_ERR</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>NO_MODIFICATION_ALLOWED_ERR</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1950641247'>Node</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-536297177'>NodeList</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-F68D095'>nodeName</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-111237558'>nodeType</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-F68D080'>nodeValue</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-normalize'>normalize</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>NOT_FOUND_ERR</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>NOT_SUPPORTED_ERR</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-5431D1B9'>Notation</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>NOTATION_NODE</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-6ABAEB38'>notationName</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-D46829EF'>notations</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C30821'>object model</a> <a
class='index-inst' href='#introduction-ID-E7C30821'>1</a>, <a
class='index-inst' href='#introduction-ID-E7C30822'>2</a>, <a
class='index-inst' href='#glossary-dt-object-model'>3</a></td>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>OMGIDL</a> <a
class='index-inst' href='#introduction-ID-E7C3082'>1</a>, <a
class='index-inst' href='#core-ID-C74D1578'>2</a>, <a
class='index-inst' href='#references-OMGIDL'>3</a></td>
<td width='30%'><a class='noxref'
href='#core-node-ownerDoc'>ownerDocument</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-Attr-ownerElement'>ownerElement</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1060184317'>parent</a> <a class='index-inst'
href='#core-ID-1060184317'>1</a>, <a class='index-inst'
href='#glossary-dt-parent'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1060184317'>parentNode</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-NodeNSPrefix'>prefix</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-640FB3C8'>previousSibling</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>PROCESSING_INSTRUCTION_NODE</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1004215813'>ProcessingInstruction</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-Core-DocType-publicId'>publicId</a> <a
class='index-inst' href='#core-ID-Core-DocType-publicId'>1</a>,
<a class='index-inst' href='#core-ID-54F2B4D0'>2</a>, <a
class='index-inst' href='#core-ID-D7303025'>3</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-Namespaces-Considerations'>qualified name</a> <a
class='index-inst'
href='#core-Namespaces-Considerations'>1</a>, <a
class='index-inst'
href='#core-Level-2-Core-DOM-createDocType'>2</a>, <a
class='index-inst'
href='#core-Level-2-Core-DOM-createDocument'>3</a>, <a
class='index-inst' href='#core-ID-DocCrElNS'>4</a>, <a
class='index-inst' href='#core-ID-DocCrAttrNS'>5</a>, <a
class='index-inst' href='#core-ID-NodeNSPrefix'>6</a>, <a
class='index-inst' href='#core-ID-NodeNSLocalN'>7</a>, <a
class='index-inst' href='#core-ID-ElSetAttrNS'>8</a>, <a
class='index-inst' href='#glossary-dt-qualifiedname'>9</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-3A0ED0A4'>readonly node</a> <a
class='index-inst' href='#core-ID-3A0ED0A4'>1</a>, <a
class='index-inst' href='#core-ID-5431D1B9'>2</a>, <a
class='index-inst' href='#core-ID-527DCFF2'>3</a>, <a
class='index-inst' href='#core-ID-11C98490'>4</a>, <a
class='index-inst' href='#glossary-dt-readonly-node'>5</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-6D6AC0F9'>removeAttribute</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-D589198'>removeAttributeNode</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-ElRemAtNS'>removeAttributeNS</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1734834066'>removeChild</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-D58B193'>removeNamedItem</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-removeNamedItemNS'>removeNamedItemNS</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-785887307'>replaceChild</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-E5CBA7FB'>replaceData</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#glossary-dt-XML-namespace'>RFC2396</a> <a
class='index-inst' href='#glossary-dt-XML-namespace'>1</a>, <a
class='index-inst' href='#references-URIRef'>2</a></td>
<td width='30%'><a class='noxref' href='#core-i-Document'>root
node</a> <a class='index-inst' href='#core-i-Document'>1</a>,
<a class='index-inst' href='#glossary-dt-root-node'>2</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-F68F082'>setAttribute</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-887236154'>setAttributeNode</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-ElSetAtNodeNS'>setAttributeNodeNS</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-ElSetAttrNS'>setAttributeNS</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1025163788'>setNamedItem</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-setNamedItemNS'>setNamedItemNS</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-B63ED1A3'>sibling</a> <a class='index-inst'
href='#core-ID-B63ED1A3'>1</a>, <a class='index-inst'
href='#core-ID-38853C1D'>2</a>, <a class='index-inst'
href='#glossary-dt-sibling'>3</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-862529273'>specified</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-38853C1D'>splitText</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-5DFED1F0'>string comparison</a> <a
class='index-inst' href='#core-ID-5DFED1F0'>1</a>, <a
class='index-inst'
href='#core-Namespaces-Considerations'>2</a>, <a
class='index-inst'
href='#glossary-dt-string-compare'>3</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-6531BCCF'>substringData</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>SYNTAX_ERR</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-Core-DocType-systemId'>systemId</a> <a
class='index-inst' href='#core-ID-Core-DocType-systemId'>1</a>,
<a class='index-inst' href='#core-ID-E8AAB1D0'>2</a>, <a
class='index-inst' href='#core-ID-D7C29F3E'>3</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-104682815'>tagName</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1478689192'>target</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1312295772'>Text</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-1841493061'>TEXT_NODE</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-1478689192'>token</a> <a class='index-inst'
href='#core-ID-1478689192'>1</a>, <a class='index-inst'
href='#glossary-dt-token'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-637646024'>tokenized</a> <a class='index-inst'
href='#core-ID-637646024'>1</a>, <a class='index-inst'
href='#glossary-dt-tokenized'>2</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-C74D1578'>Unicode</a> <a class='index-inst'
href='#core-ID-C74D1578'>1</a>, <a class='index-inst'
href='#glossary-dt-16-bit-unit'>2</a>, <a class='index-inst'
href='#glossary-dt-string-compare'>3</a>, <a class='index-inst'
href='#references-Unicode'>4</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-221662474'>value</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-B63ED1A3'>well-formed document</a> <a
class='index-inst' href='#core-ID-B63ED1A3'>1</a>, <a
class='index-inst' href='#glossary-dt-well-formed'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-ID-258A00AF'>WRONG_DOCUMENT_ERR</a></td>
</tr>

<tr>
<td>&nbsp;</td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#introduction-ID-E7C3082'>XML</a> <a class='index-inst'
href='#introduction-ID-E7C3082'>1</a>, <a class='index-inst'
href='#core-ID-5431D1B9'>2</a>, <a class='index-inst'
href='#glossary-dt-XML'>3</a>, <a class='index-inst'
href='#glossary-dt-element'>4</a>, <a class='index-inst'
href='#glossary-dt-well-formed'>5</a>, <a class='index-inst'
href='#glossary-dt-XML-name'>6</a>, <a class='index-inst'
href='#references-XML'>7</a></td>
<td width='30%'><a class='noxref' href='#core-ID-5CED94D7'>XML
name</a> <a class='index-inst' href='#core-ID-5CED94D7'>1</a>,
<a class='index-inst' href='#glossary-dt-XML-name'>2</a></td>
<td width='30%'><a class='noxref'
href='#core-Namespaces-Considerations'>XML namespace</a> <a
class='index-inst'
href='#core-Namespaces-Considerations'>1</a>, <a
class='index-inst' href='#glossary-dt-XML-namespace'>2</a></td>
</tr>

<tr>
<td width='30%'><a class='noxref'
href='#core-ID-normalize'>XPointer</a> <a class='index-inst'
href='#core-ID-normalize'>1</a>, <a class='index-inst'
href='#references-XPointer'>2</a></td>
</tr>
</table>
</div>

<!-- div1 Index -->

</body>
</html>
